// Generated by @wagmi/cli@0.1.6 on 18/02/2023 at 22:50:13
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import { WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AuctionHouse
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const auctionHouseABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_token', internalType: 'contract ICrest', type: 'address' },
      { name: '_treasury', internalType: 'address', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'bidder', internalType: 'address', type: 'address', indexed: false },
      { name: 'bid', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Bid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'Start',
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'bid', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAuction',
    outputs: [
      {
        name: '',
        internalType: 'struct AuctionHouse.AuctionState',
        type: 'tuple',
        components: [
          { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
          { name: 'startTime', internalType: 'uint256', type: 'uint256' },
          { name: 'endTime', internalType: 'uint256', type: 'uint256' },
          { name: 'currentBid', internalType: 'uint256', type: 'uint256' },
          { name: 'bidder', internalType: 'address', type: 'address' },
          { name: 'minBid', internalType: 'uint256', type: 'uint256' },
          { name: 'isFinished', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getConfig',
    outputs: [
      {
        name: '',
        internalType: 'struct AuctionHouse.AuctionConfig',
        type: 'tuple',
        components: [
          { name: 'treasury', internalType: 'address', type: 'address' },
          { name: 'token', internalType: 'address', type: 'address' },
          { name: 'duration', internalType: 'uint256', type: 'uint256' },
          { name: 'extendedDuration', internalType: 'uint256', type: 'uint256' },
          { name: 'minFirstBid', internalType: 'uint256', type: 'uint256' },
          { name: 'minBidIncrementPercent', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_duration', internalType: 'uint256', type: 'uint256' }],
    name: 'setDuration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_extendedDuration', internalType: 'uint256', type: 'uint256' }],
    name: 'setExtendedDuration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_minBidIncrementPercent', internalType: 'uint256', type: 'uint256' }],
    name: 'setMinBidIncrementPercent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_minFirstBid', internalType: 'uint256', type: 'uint256' }],
    name: 'setMinFirstBid',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_treasury', internalType: 'address', type: 'address' }],
    name: 'setTreasury',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'start', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

/**
 *
 */
export const auctionHouseAddress = {
  31337: '0xC9a43158891282A2B1475592D5719c001986Aaec',
} as const

/**
 *
 */
export const auctionHouseConfig = { address: auctionHouseAddress, abi: auctionHouseABI } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Crest
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const crestABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_store', internalType: 'address', type: 'address' },
      { name: '_auctionHouse', internalType: 'address', type: 'address' },
      { name: '_founders', internalType: 'address', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'delegator', internalType: 'address', type: 'address', indexed: true },
      { name: 'fromDelegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'toDelegate', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'delegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'previousBalance', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'newBalance', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'auctionHouse',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'dnaMap',
    outputs: [{ name: '', internalType: 'uint96', type: 'uint96' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'founders',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'mint', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'dna', internalType: 'uint96', type: 'uint96' },
    ],
    name: 'mintSpecific',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_auctionHouse', internalType: 'address', type: 'address' }],
    name: 'setAuctionHouse',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'store',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

/**
 *
 */
export const crestAddress = {
  31337: '0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9',
} as const

/**
 *
 */
export const crestConfig = { address: crestAddress, abi: crestABI } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PartsStore
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const partsStoreABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'color',
        internalType: 'struct IPartsStore.Color',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'color', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addBgColor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addClass',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addCrown',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addDoodad',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addGarland',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'color',
        internalType: 'struct IPartsStore.Color',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'color', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addNogglesColor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'palette',
        internalType: 'struct IPartsStore.Palette',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'primary', internalType: 'string', type: 'string' },
          { name: 'secondary', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addQuadrantPalette',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addRep',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addShield',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addSkill',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addTrait',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'bgColors',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'color', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'bgColorsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'classes',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'classesCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'crowns',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'crownsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'doodads',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'doodadsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'garlands',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'garlandsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAllParts',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.AllParts',
        type: 'tuple',
        components: [
          { name: 'bgColors', internalType: 'string[]', type: 'string[]' },
          { name: 'nogglesColors', internalType: 'string[]', type: 'string[]' },
          { name: 'crowns', internalType: 'string[]', type: 'string[]' },
          { name: 'doodads', internalType: 'string[]', type: 'string[]' },
          { name: 'garlands', internalType: 'string[]', type: 'string[]' },
          { name: 'shields', internalType: 'string[]', type: 'string[]' },
          { name: 'quadrantPalettes', internalType: 'string[]', type: 'string[]' },
          { name: 'reps', internalType: 'string[]', type: 'string[]' },
          { name: 'skills', internalType: 'string[]', type: 'string[]' },
          { name: 'classes', internalType: 'string[]', type: 'string[]' },
          { name: 'traits', internalType: 'string[]', type: 'string[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getBgColor',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.Color',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'color', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getClass',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getCrown',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getDoodad',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getGarland',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getNogglesColor',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.Color',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'color', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getQuadrantPalette',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.Palette',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'primary', internalType: 'string', type: 'string' },
          { name: 'secondary', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getRep',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getShield',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getSkill',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getTrait',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'nogglesColors',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'color', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nogglesColorsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'quadrantPalettes',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'primary', internalType: 'string', type: 'string' },
      { name: 'secondary', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'quadrantPalettesCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'reps',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'repsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'shields',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'shieldsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'skills',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'skillsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'traits',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'traitsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

/**
 *
 */
export const partsStoreAddress = {
  31337: '0x5FbDB2315678afecb367f032d93F642f64180aa3',
} as const

/**
 *
 */
export const partsStoreConfig = { address: partsStoreAddress, abi: partsStoreABI } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ICrest
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iCrestABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'mint', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'dna', internalType: 'uint96', type: 'uint96' },
    ],
    name: 'mintSpecific',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPartsStore
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPartsStoreABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'color',
        internalType: 'struct IPartsStore.Color',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'color', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addBgColor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addClass',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addCrown',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addDoodad',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addGarland',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'color',
        internalType: 'struct IPartsStore.Color',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'color', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addNogglesColor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'palette',
        internalType: 'struct IPartsStore.Palette',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'primary', internalType: 'string', type: 'string' },
          { name: 'secondary', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addQuadrantPalette',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addRep',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addShield',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addSkill',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addTrait',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'bgColorsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'classesCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'crownsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'doodadsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'garlandsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'getAllParts',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.AllParts',
        type: 'tuple',
        components: [
          { name: 'bgColors', internalType: 'string[]', type: 'string[]' },
          { name: 'nogglesColors', internalType: 'string[]', type: 'string[]' },
          { name: 'crowns', internalType: 'string[]', type: 'string[]' },
          { name: 'doodads', internalType: 'string[]', type: 'string[]' },
          { name: 'garlands', internalType: 'string[]', type: 'string[]' },
          { name: 'shields', internalType: 'string[]', type: 'string[]' },
          { name: 'quadrantPalettes', internalType: 'string[]', type: 'string[]' },
          { name: 'reps', internalType: 'string[]', type: 'string[]' },
          { name: 'skills', internalType: 'string[]', type: 'string[]' },
          { name: 'classes', internalType: 'string[]', type: 'string[]' },
          { name: 'traits', internalType: 'string[]', type: 'string[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getBgColor',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.Color',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'color', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getClass',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getCrown',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getDoodad',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getGarland',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getNogglesColor',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.Color',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'color', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getQuadrantPalette',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.Palette',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'primary', internalType: 'string', type: 'string' },
          { name: 'secondary', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getRep',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getShield',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getSkill',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getTrait',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nogglesColorsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'quadrantPalettesCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'repsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'shieldsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'skillsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'traitsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DnaManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const dnaManagerABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'storeAddress', internalType: 'address', type: 'address' },
      { name: 'seed', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'generateDna',
    outputs: [{ name: '', internalType: 'uint96', type: 'uint96' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'img',
        internalType: 'struct DnaManager.TokenTraits',
        type: 'tuple',
        components: [
          { name: 'bgColorId', internalType: 'uint8', type: 'uint8' },
          { name: 'nogglesColorId', internalType: 'uint8', type: 'uint8' },
          { name: 'crownId', internalType: 'uint8', type: 'uint8' },
          { name: 'doodadId', internalType: 'uint8', type: 'uint8' },
          { name: 'garlandId', internalType: 'uint8', type: 'uint8' },
          { name: 'shieldId', internalType: 'uint8', type: 'uint8' },
          { name: 'quadrantPalette1Id', internalType: 'uint8', type: 'uint8' },
          { name: 'quadrantPalette2Id', internalType: 'uint8', type: 'uint8' },
          { name: 'repId', internalType: 'uint8', type: 'uint8' },
          { name: 'skillId', internalType: 'uint8', type: 'uint8' },
          { name: 'classId', internalType: 'uint8', type: 'uint8' },
          { name: 'traitId', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
    name: 'getDnaFromImage',
    outputs: [{ name: 'dna', internalType: 'uint96', type: 'uint96' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'dna', internalType: 'uint96', type: 'uint96' }],
    name: 'getImageFromDna',
    outputs: [
      {
        name: '',
        internalType: 'struct DnaManager.TokenTraits',
        type: 'tuple',
        components: [
          { name: 'bgColorId', internalType: 'uint8', type: 'uint8' },
          { name: 'nogglesColorId', internalType: 'uint8', type: 'uint8' },
          { name: 'crownId', internalType: 'uint8', type: 'uint8' },
          { name: 'doodadId', internalType: 'uint8', type: 'uint8' },
          { name: 'garlandId', internalType: 'uint8', type: 'uint8' },
          { name: 'shieldId', internalType: 'uint8', type: 'uint8' },
          { name: 'quadrantPalette1Id', internalType: 'uint8', type: 'uint8' },
          { name: 'quadrantPalette2Id', internalType: 'uint8', type: 'uint8' },
          { name: 'repId', internalType: 'uint8', type: 'uint8' },
          { name: 'skillId', internalType: 'uint8', type: 'uint8' },
          { name: 'classId', internalType: 'uint8', type: 'uint8' },
          { name: 'traitId', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
] as const

/**
 *
 */
export const dnaManagerAddress = {
  31337: '0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512',
} as const

/**
 *
 */
export const dnaManagerConfig = { address: dnaManagerAddress, abi: dnaManagerABI } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TokenGenerator
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const tokenGeneratorABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'storeAddress', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'dna', internalType: 'uint96', type: 'uint96' },
    ],
    name: 'generateTokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'storeAddress', internalType: 'address', type: 'address' },
      { name: 'dna', internalType: 'uint96', type: 'uint96' },
    ],
    name: 'getImageParts',
    outputs: [
      {
        name: '',
        internalType: 'struct TokenGenerator.ImageParts',
        type: 'tuple',
        components: [
          {
            name: 'bgColor',
            internalType: 'struct IPartsStore.Color',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'color', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'nogglesColor',
            internalType: 'struct IPartsStore.Color',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'color', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'crown',
            internalType: 'struct IPartsStore.ImagePart',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'svg', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'doodad',
            internalType: 'struct IPartsStore.ImagePart',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'svg', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'garland',
            internalType: 'struct IPartsStore.ImagePart',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'svg', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'shield',
            internalType: 'struct IPartsStore.ImagePart',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'svg', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'quadrantPalette1',
            internalType: 'struct IPartsStore.Palette',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'primary', internalType: 'string', type: 'string' },
              { name: 'secondary', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'quadrantPalette2',
            internalType: 'struct IPartsStore.Palette',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'primary', internalType: 'string', type: 'string' },
              { name: 'secondary', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'rep',
            internalType: 'struct IPartsStore.ImagePart',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'svg', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'skill',
            internalType: 'struct IPartsStore.ImagePart',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'svg', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'class',
            internalType: 'struct IPartsStore.ImagePart',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'svg', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'trait',
            internalType: 'struct IPartsStore.ImagePart',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'svg', internalType: 'string', type: 'string' },
            ],
          },
        ],
      },
    ],
  },
] as const

/**
 *
 */
export const tokenGeneratorAddress = {
  31337: '0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0',
} as const

/**
 *
 */
export const tokenGeneratorConfig = {
  address: tokenGeneratorAddress,
  abi: tokenGeneratorABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IVotes
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iVotesABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'delegator', internalType: 'address', type: 'address', indexed: true },
      { name: 'fromDelegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'toDelegate', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'delegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'previousBalance', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'newBalance', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Votes
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const votesABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'delegator', internalType: 'address', type: 'address', indexed: true },
      { name: 'fromDelegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'toDelegate', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'delegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'previousBalance', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'newBalance', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Receiver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ReceiverABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721Burnable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721BurnableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721Enumerable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721EnumerableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721Votes
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721VotesABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'delegator', internalType: 'address', type: 'address', indexed: true },
      { name: 'fromDelegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'toDelegate', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'delegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'previousBalance', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'newBalance', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Enumerable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721EnumerableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721MetadataABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link auctionHouseABI}__.
 *
 *
 */
export function useAuctionHouse(
  config: Omit<UseContractConfig, 'abi' | 'address'> & {
    chainId?: keyof typeof auctionHouseAddress
  } = {} as any,
) {
  return useContract({ abi: auctionHouseABI, address: auctionHouseAddress[31337], ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link auctionHouseABI}__.
 *
 *
 */
export function useAuctionHouseRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof auctionHouseABI, TFunctionName>, 'abi' | 'address'> & {
    chainId?: keyof typeof auctionHouseAddress
  } = {} as any,
) {
  return useContractRead({
    abi: auctionHouseABI,
    address: auctionHouseAddress[31337],
    ...config,
  } as UseContractReadConfig<typeof auctionHouseABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"getAuction"`.
 *
 *
 */
export function useAuctionHouseGetAuction(
  config: Omit<
    UseContractReadConfig<typeof auctionHouseABI, 'getAuction'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  return useContractRead({
    abi: auctionHouseABI,
    address: auctionHouseAddress[31337],
    functionName: 'getAuction',
    ...config,
  } as UseContractReadConfig<typeof auctionHouseABI, 'getAuction'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"getConfig"`.
 *
 *
 */
export function useAuctionHouseGetConfig(
  config: Omit<
    UseContractReadConfig<typeof auctionHouseABI, 'getConfig'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  return useContractRead({
    abi: auctionHouseABI,
    address: auctionHouseAddress[31337],
    functionName: 'getConfig',
    ...config,
  } as UseContractReadConfig<typeof auctionHouseABI, 'getConfig'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"onERC721Received"`.
 *
 *
 */
export function useAuctionHouseOnErc721Received(
  config: Omit<
    UseContractReadConfig<typeof auctionHouseABI, 'onERC721Received'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  return useContractRead({
    abi: auctionHouseABI,
    address: auctionHouseAddress[31337],
    functionName: 'onERC721Received',
    ...config,
  } as UseContractReadConfig<typeof auctionHouseABI, 'onERC721Received'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"owner"`.
 *
 *
 */
export function useAuctionHouseOwner(
  config: Omit<
    UseContractReadConfig<typeof auctionHouseABI, 'owner'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  return useContractRead({
    abi: auctionHouseABI,
    address: auctionHouseAddress[31337],
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof auctionHouseABI, 'owner'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link auctionHouseABI}__.
 *
 *
 */
export function useAuctionHouseWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
  TChainId extends number = keyof typeof auctionHouseAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof auctionHouseABI, string>['abi'],
        TFunctionName
      > & { address?: `0x${string}`; chainId?: TChainId }
    : UseContractWriteConfig<TMode, typeof auctionHouseABI, TFunctionName> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<TMode, typeof auctionHouseABI, TFunctionName>({
    abi: auctionHouseABI,
    address: auctionHouseAddress[31337],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"bid"`.
 *
 *
 */
export function useAuctionHouseBid<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof auctionHouseAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof auctionHouseABI, 'bid'>['abi'],
        'bid'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'bid' }
    : UseContractWriteConfig<TMode, typeof auctionHouseABI, 'bid'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'bid'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof auctionHouseABI, 'bid'>({
    abi: auctionHouseABI,
    address: auctionHouseAddress[31337],
    functionName: 'bid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 *
 */
export function useAuctionHouseRenounceOwnership<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof auctionHouseAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof auctionHouseABI, 'renounceOwnership'>['abi'],
        'renounceOwnership'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof auctionHouseABI, 'renounceOwnership'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof auctionHouseABI, 'renounceOwnership'>({
    abi: auctionHouseABI,
    address: auctionHouseAddress[31337],
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"setDuration"`.
 *
 *
 */
export function useAuctionHouseSetDuration<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof auctionHouseAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof auctionHouseABI, 'setDuration'>['abi'],
        'setDuration'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'setDuration' }
    : UseContractWriteConfig<TMode, typeof auctionHouseABI, 'setDuration'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setDuration'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof auctionHouseABI, 'setDuration'>({
    abi: auctionHouseABI,
    address: auctionHouseAddress[31337],
    functionName: 'setDuration',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"setExtendedDuration"`.
 *
 *
 */
export function useAuctionHouseSetExtendedDuration<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof auctionHouseAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof auctionHouseABI, 'setExtendedDuration'>['abi'],
        'setExtendedDuration'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'setExtendedDuration' }
    : UseContractWriteConfig<TMode, typeof auctionHouseABI, 'setExtendedDuration'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setExtendedDuration'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof auctionHouseABI, 'setExtendedDuration'>({
    abi: auctionHouseABI,
    address: auctionHouseAddress[31337],
    functionName: 'setExtendedDuration',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"setMinBidIncrementPercent"`.
 *
 *
 */
export function useAuctionHouseSetMinBidIncrementPercent<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof auctionHouseAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof auctionHouseABI, 'setMinBidIncrementPercent'>['abi'],
        'setMinBidIncrementPercent'
      > & {
        address?: `0x${string}`
        chainId?: TChainId
        functionName?: 'setMinBidIncrementPercent'
      }
    : UseContractWriteConfig<TMode, typeof auctionHouseABI, 'setMinBidIncrementPercent'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setMinBidIncrementPercent'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof auctionHouseABI, 'setMinBidIncrementPercent'>({
    abi: auctionHouseABI,
    address: auctionHouseAddress[31337],
    functionName: 'setMinBidIncrementPercent',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"setMinFirstBid"`.
 *
 *
 */
export function useAuctionHouseSetMinFirstBid<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof auctionHouseAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof auctionHouseABI, 'setMinFirstBid'>['abi'],
        'setMinFirstBid'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'setMinFirstBid' }
    : UseContractWriteConfig<TMode, typeof auctionHouseABI, 'setMinFirstBid'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setMinFirstBid'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof auctionHouseABI, 'setMinFirstBid'>({
    abi: auctionHouseABI,
    address: auctionHouseAddress[31337],
    functionName: 'setMinFirstBid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"setTreasury"`.
 *
 *
 */
export function useAuctionHouseSetTreasury<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof auctionHouseAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof auctionHouseABI, 'setTreasury'>['abi'],
        'setTreasury'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'setTreasury' }
    : UseContractWriteConfig<TMode, typeof auctionHouseABI, 'setTreasury'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setTreasury'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof auctionHouseABI, 'setTreasury'>({
    abi: auctionHouseABI,
    address: auctionHouseAddress[31337],
    functionName: 'setTreasury',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"start"`.
 *
 *
 */
export function useAuctionHouseStart<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof auctionHouseAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof auctionHouseABI, 'start'>['abi'],
        'start'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'start' }
    : UseContractWriteConfig<TMode, typeof auctionHouseABI, 'start'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'start'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof auctionHouseABI, 'start'>({
    abi: auctionHouseABI,
    address: auctionHouseAddress[31337],
    functionName: 'start',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"transferOwnership"`.
 *
 *
 */
export function useAuctionHouseTransferOwnership<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof auctionHouseAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof auctionHouseABI, 'transferOwnership'>['abi'],
        'transferOwnership'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof auctionHouseABI, 'transferOwnership'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof auctionHouseABI, 'transferOwnership'>({
    abi: auctionHouseABI,
    address: auctionHouseAddress[31337],
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link auctionHouseABI}__.
 *
 *
 */
export function usePrepareAuctionHouseWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof auctionHouseABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: auctionHouseABI,
    address: auctionHouseAddress[31337],
    ...config,
  } as UsePrepareContractWriteConfig<typeof auctionHouseABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"bid"`.
 *
 *
 */
export function usePrepareAuctionHouseBid(
  config: Omit<
    UsePrepareContractWriteConfig<typeof auctionHouseABI, 'bid'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: auctionHouseABI,
    address: auctionHouseAddress[31337],
    functionName: 'bid',
    ...config,
  } as UsePrepareContractWriteConfig<typeof auctionHouseABI, 'bid'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 *
 */
export function usePrepareAuctionHouseRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof auctionHouseABI, 'renounceOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: auctionHouseABI,
    address: auctionHouseAddress[31337],
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof auctionHouseABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"setDuration"`.
 *
 *
 */
export function usePrepareAuctionHouseSetDuration(
  config: Omit<
    UsePrepareContractWriteConfig<typeof auctionHouseABI, 'setDuration'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: auctionHouseABI,
    address: auctionHouseAddress[31337],
    functionName: 'setDuration',
    ...config,
  } as UsePrepareContractWriteConfig<typeof auctionHouseABI, 'setDuration'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"setExtendedDuration"`.
 *
 *
 */
export function usePrepareAuctionHouseSetExtendedDuration(
  config: Omit<
    UsePrepareContractWriteConfig<typeof auctionHouseABI, 'setExtendedDuration'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: auctionHouseABI,
    address: auctionHouseAddress[31337],
    functionName: 'setExtendedDuration',
    ...config,
  } as UsePrepareContractWriteConfig<typeof auctionHouseABI, 'setExtendedDuration'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"setMinBidIncrementPercent"`.
 *
 *
 */
export function usePrepareAuctionHouseSetMinBidIncrementPercent(
  config: Omit<
    UsePrepareContractWriteConfig<typeof auctionHouseABI, 'setMinBidIncrementPercent'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: auctionHouseABI,
    address: auctionHouseAddress[31337],
    functionName: 'setMinBidIncrementPercent',
    ...config,
  } as UsePrepareContractWriteConfig<typeof auctionHouseABI, 'setMinBidIncrementPercent'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"setMinFirstBid"`.
 *
 *
 */
export function usePrepareAuctionHouseSetMinFirstBid(
  config: Omit<
    UsePrepareContractWriteConfig<typeof auctionHouseABI, 'setMinFirstBid'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: auctionHouseABI,
    address: auctionHouseAddress[31337],
    functionName: 'setMinFirstBid',
    ...config,
  } as UsePrepareContractWriteConfig<typeof auctionHouseABI, 'setMinFirstBid'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"setTreasury"`.
 *
 *
 */
export function usePrepareAuctionHouseSetTreasury(
  config: Omit<
    UsePrepareContractWriteConfig<typeof auctionHouseABI, 'setTreasury'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: auctionHouseABI,
    address: auctionHouseAddress[31337],
    functionName: 'setTreasury',
    ...config,
  } as UsePrepareContractWriteConfig<typeof auctionHouseABI, 'setTreasury'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"start"`.
 *
 *
 */
export function usePrepareAuctionHouseStart(
  config: Omit<
    UsePrepareContractWriteConfig<typeof auctionHouseABI, 'start'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: auctionHouseABI,
    address: auctionHouseAddress[31337],
    functionName: 'start',
    ...config,
  } as UsePrepareContractWriteConfig<typeof auctionHouseABI, 'start'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"transferOwnership"`.
 *
 *
 */
export function usePrepareAuctionHouseTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof auctionHouseABI, 'transferOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: auctionHouseABI,
    address: auctionHouseAddress[31337],
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof auctionHouseABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link auctionHouseABI}__.
 *
 *
 */
export function useAuctionHouseEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof auctionHouseABI, TEventName>, 'abi' | 'address'> & {
    chainId?: keyof typeof auctionHouseAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: auctionHouseABI,
    address: auctionHouseAddress[31337],
    ...config,
  } as UseContractEventConfig<typeof auctionHouseABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link auctionHouseABI}__ and `eventName` set to `"Bid"`.
 *
 *
 */
export function useAuctionHouseBidEvent(
  config: Omit<
    UseContractEventConfig<typeof auctionHouseABI, 'Bid'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  return useContractEvent({
    abi: auctionHouseABI,
    address: auctionHouseAddress[31337],
    eventName: 'Bid',
    ...config,
  } as UseContractEventConfig<typeof auctionHouseABI, 'Bid'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link auctionHouseABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 *
 */
export function useAuctionHouseOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof auctionHouseABI, 'OwnershipTransferred'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  return useContractEvent({
    abi: auctionHouseABI,
    address: auctionHouseAddress[31337],
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof auctionHouseABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link auctionHouseABI}__ and `eventName` set to `"Start"`.
 *
 *
 */
export function useAuctionHouseStartEvent(
  config: Omit<
    UseContractEventConfig<typeof auctionHouseABI, 'Start'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  return useContractEvent({
    abi: auctionHouseABI,
    address: auctionHouseAddress[31337],
    eventName: 'Start',
    ...config,
  } as UseContractEventConfig<typeof auctionHouseABI, 'Start'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link crestABI}__.
 *
 *
 */
export function useCrest(
  config: Omit<UseContractConfig, 'abi' | 'address'> & {
    chainId?: keyof typeof crestAddress
  } = {} as any,
) {
  return useContract({ abi: crestABI, address: crestAddress[31337], ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__.
 *
 *
 */
export function useCrestRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof crestABI, TFunctionName>, 'abi' | 'address'> & {
    chainId?: keyof typeof crestAddress
  } = {} as any,
) {
  return useContractRead({
    abi: crestABI,
    address: crestAddress[31337],
    ...config,
  } as UseContractReadConfig<typeof crestABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 *
 *
 */
export function useCrestDomainSeparator(
  config: Omit<
    UseContractReadConfig<typeof crestABI, 'DOMAIN_SEPARATOR'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return useContractRead({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<typeof crestABI, 'DOMAIN_SEPARATOR'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"auctionHouse"`.
 *
 *
 */
export function useCrestAuctionHouse(
  config: Omit<
    UseContractReadConfig<typeof crestABI, 'auctionHouse'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return useContractRead({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'auctionHouse',
    ...config,
  } as UseContractReadConfig<typeof crestABI, 'auctionHouse'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"balanceOf"`.
 *
 *
 */
export function useCrestBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof crestABI, 'balanceOf'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return useContractRead({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof crestABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"delegates"`.
 *
 *
 */
export function useCrestDelegates(
  config: Omit<
    UseContractReadConfig<typeof crestABI, 'delegates'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return useContractRead({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<typeof crestABI, 'delegates'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"dnaMap"`.
 *
 *
 */
export function useCrestDnaMap(
  config: Omit<
    UseContractReadConfig<typeof crestABI, 'dnaMap'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return useContractRead({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'dnaMap',
    ...config,
  } as UseContractReadConfig<typeof crestABI, 'dnaMap'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"founders"`.
 *
 *
 */
export function useCrestFounders(
  config: Omit<
    UseContractReadConfig<typeof crestABI, 'founders'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return useContractRead({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'founders',
    ...config,
  } as UseContractReadConfig<typeof crestABI, 'founders'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"getApproved"`.
 *
 *
 */
export function useCrestGetApproved(
  config: Omit<
    UseContractReadConfig<typeof crestABI, 'getApproved'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return useContractRead({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof crestABI, 'getApproved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"getPastTotalSupply"`.
 *
 *
 */
export function useCrestGetPastTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof crestABI, 'getPastTotalSupply'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return useContractRead({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<typeof crestABI, 'getPastTotalSupply'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"getPastVotes"`.
 *
 *
 */
export function useCrestGetPastVotes(
  config: Omit<
    UseContractReadConfig<typeof crestABI, 'getPastVotes'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return useContractRead({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<typeof crestABI, 'getPastVotes'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"getVotes"`.
 *
 *
 */
export function useCrestGetVotes(
  config: Omit<
    UseContractReadConfig<typeof crestABI, 'getVotes'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return useContractRead({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof crestABI, 'getVotes'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"isApprovedForAll"`.
 *
 *
 */
export function useCrestIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof crestABI, 'isApprovedForAll'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return useContractRead({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof crestABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"name"`.
 *
 *
 */
export function useCrestName(
  config: Omit<
    UseContractReadConfig<typeof crestABI, 'name'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return useContractRead({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof crestABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"nonces"`.
 *
 *
 */
export function useCrestNonces(
  config: Omit<
    UseContractReadConfig<typeof crestABI, 'nonces'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return useContractRead({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof crestABI, 'nonces'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"owner"`.
 *
 *
 */
export function useCrestOwner(
  config: Omit<
    UseContractReadConfig<typeof crestABI, 'owner'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return useContractRead({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof crestABI, 'owner'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"ownerOf"`.
 *
 *
 */
export function useCrestOwnerOf(
  config: Omit<
    UseContractReadConfig<typeof crestABI, 'ownerOf'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return useContractRead({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof crestABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"store"`.
 *
 *
 */
export function useCrestStore(
  config: Omit<
    UseContractReadConfig<typeof crestABI, 'store'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return useContractRead({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'store',
    ...config,
  } as UseContractReadConfig<typeof crestABI, 'store'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"supportsInterface"`.
 *
 *
 */
export function useCrestSupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof crestABI, 'supportsInterface'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return useContractRead({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof crestABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"symbol"`.
 *
 *
 */
export function useCrestSymbol(
  config: Omit<
    UseContractReadConfig<typeof crestABI, 'symbol'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return useContractRead({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof crestABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"tokenByIndex"`.
 *
 *
 */
export function useCrestTokenByIndex(
  config: Omit<
    UseContractReadConfig<typeof crestABI, 'tokenByIndex'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return useContractRead({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<typeof crestABI, 'tokenByIndex'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 *
 *
 */
export function useCrestTokenOfOwnerByIndex(
  config: Omit<
    UseContractReadConfig<typeof crestABI, 'tokenOfOwnerByIndex'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return useContractRead({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<typeof crestABI, 'tokenOfOwnerByIndex'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"tokenURI"`.
 *
 *
 */
export function useCrestTokenUri(
  config: Omit<
    UseContractReadConfig<typeof crestABI, 'tokenURI'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return useContractRead({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof crestABI, 'tokenURI'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"totalSupply"`.
 *
 *
 */
export function useCrestTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof crestABI, 'totalSupply'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return useContractRead({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof crestABI, 'totalSupply'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crestABI}__.
 *
 *
 */
export function useCrestWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
  TChainId extends number = keyof typeof crestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crestABI, string>['abi'],
        TFunctionName
      > & { address?: `0x${string}`; chainId?: TChainId }
    : UseContractWriteConfig<TMode, typeof crestABI, TFunctionName> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crestABI, TFunctionName>({
    abi: crestABI,
    address: crestAddress[31337],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"approve"`.
 *
 *
 */
export function useCrestApprove<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof crestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crestABI, 'approve'>['abi'],
        'approve'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof crestABI, 'approve'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crestABI, 'approve'>({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"burn"`.
 *
 *
 */
export function useCrestBurn<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof crestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crestABI, 'burn'>['abi'],
        'burn'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'burn' }
    : UseContractWriteConfig<TMode, typeof crestABI, 'burn'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crestABI, 'burn'>({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"delegate"`.
 *
 *
 */
export function useCrestDelegate<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof crestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crestABI, 'delegate'>['abi'],
        'delegate'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'delegate' }
    : UseContractWriteConfig<TMode, typeof crestABI, 'delegate'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crestABI, 'delegate'>({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"delegateBySig"`.
 *
 *
 */
export function useCrestDelegateBySig<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof crestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crestABI, 'delegateBySig'>['abi'],
        'delegateBySig'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'delegateBySig' }
    : UseContractWriteConfig<TMode, typeof crestABI, 'delegateBySig'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crestABI, 'delegateBySig'>({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"mint"`.
 *
 *
 */
export function useCrestMint<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof crestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crestABI, 'mint'>['abi'],
        'mint'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'mint' }
    : UseContractWriteConfig<TMode, typeof crestABI, 'mint'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crestABI, 'mint'>({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"mintSpecific"`.
 *
 *
 */
export function useCrestMintSpecific<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof crestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crestABI, 'mintSpecific'>['abi'],
        'mintSpecific'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'mintSpecific' }
    : UseContractWriteConfig<TMode, typeof crestABI, 'mintSpecific'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'mintSpecific'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crestABI, 'mintSpecific'>({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'mintSpecific',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 *
 */
export function useCrestRenounceOwnership<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof crestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crestABI, 'renounceOwnership'>['abi'],
        'renounceOwnership'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof crestABI, 'renounceOwnership'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crestABI, 'renounceOwnership'>({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 *
 */
export function useCrestSafeTransferFrom<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof crestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crestABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof crestABI, 'safeTransferFrom'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crestABI, 'safeTransferFrom'>({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 *
 */
export function useCrestSetApprovalForAll<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof crestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crestABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof crestABI, 'setApprovalForAll'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crestABI, 'setApprovalForAll'>({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"setAuctionHouse"`.
 *
 *
 */
export function useCrestSetAuctionHouse<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof crestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crestABI, 'setAuctionHouse'>['abi'],
        'setAuctionHouse'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'setAuctionHouse' }
    : UseContractWriteConfig<TMode, typeof crestABI, 'setAuctionHouse'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setAuctionHouse'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crestABI, 'setAuctionHouse'>({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'setAuctionHouse',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"transferFrom"`.
 *
 *
 */
export function useCrestTransferFrom<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof crestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crestABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof crestABI, 'transferFrom'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crestABI, 'transferFrom'>({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"transferOwnership"`.
 *
 *
 */
export function useCrestTransferOwnership<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof crestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crestABI, 'transferOwnership'>['abi'],
        'transferOwnership'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof crestABI, 'transferOwnership'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crestABI, 'transferOwnership'>({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crestABI}__.
 *
 *
 */
export function usePrepareCrestWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof crestABI, TFunctionName>, 'abi' | 'address'> & {
    chainId?: keyof typeof crestAddress
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: crestABI,
    address: crestAddress[31337],
    ...config,
  } as UsePrepareContractWriteConfig<typeof crestABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"approve"`.
 *
 *
 */
export function usePrepareCrestApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crestABI, 'approve'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof crestABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"burn"`.
 *
 *
 */
export function usePrepareCrestBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crestABI, 'burn'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof crestABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"delegate"`.
 *
 *
 */
export function usePrepareCrestDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crestABI, 'delegate'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof crestABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"delegateBySig"`.
 *
 *
 */
export function usePrepareCrestDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crestABI, 'delegateBySig'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof crestABI, 'delegateBySig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"mint"`.
 *
 *
 */
export function usePrepareCrestMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crestABI, 'mint'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof crestABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"mintSpecific"`.
 *
 *
 */
export function usePrepareCrestMintSpecific(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crestABI, 'mintSpecific'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'mintSpecific',
    ...config,
  } as UsePrepareContractWriteConfig<typeof crestABI, 'mintSpecific'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 *
 */
export function usePrepareCrestRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crestABI, 'renounceOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof crestABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 *
 */
export function usePrepareCrestSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crestABI, 'safeTransferFrom'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof crestABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 *
 */
export function usePrepareCrestSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crestABI, 'setApprovalForAll'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof crestABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"setAuctionHouse"`.
 *
 *
 */
export function usePrepareCrestSetAuctionHouse(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crestABI, 'setAuctionHouse'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'setAuctionHouse',
    ...config,
  } as UsePrepareContractWriteConfig<typeof crestABI, 'setAuctionHouse'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"transferFrom"`.
 *
 *
 */
export function usePrepareCrestTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crestABI, 'transferFrom'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof crestABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"transferOwnership"`.
 *
 *
 */
export function usePrepareCrestTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crestABI, 'transferOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: crestABI,
    address: crestAddress[31337],
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof crestABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crestABI}__.
 *
 *
 */
export function useCrestEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof crestABI, TEventName>, 'abi' | 'address'> & {
    chainId?: keyof typeof crestAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: crestABI,
    address: crestAddress[31337],
    ...config,
  } as UseContractEventConfig<typeof crestABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crestABI}__ and `eventName` set to `"Approval"`.
 *
 *
 */
export function useCrestApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof crestABI, 'Approval'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return useContractEvent({
    abi: crestABI,
    address: crestAddress[31337],
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof crestABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crestABI}__ and `eventName` set to `"ApprovalForAll"`.
 *
 *
 */
export function useCrestApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof crestABI, 'ApprovalForAll'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return useContractEvent({
    abi: crestABI,
    address: crestAddress[31337],
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof crestABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crestABI}__ and `eventName` set to `"DelegateChanged"`.
 *
 *
 */
export function useCrestDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof crestABI, 'DelegateChanged'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return useContractEvent({
    abi: crestABI,
    address: crestAddress[31337],
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof crestABI, 'DelegateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crestABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 *
 *
 */
export function useCrestDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof crestABI, 'DelegateVotesChanged'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return useContractEvent({
    abi: crestABI,
    address: crestAddress[31337],
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<typeof crestABI, 'DelegateVotesChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crestABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 *
 */
export function useCrestOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof crestABI, 'OwnershipTransferred'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return useContractEvent({
    abi: crestABI,
    address: crestAddress[31337],
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof crestABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crestABI}__ and `eventName` set to `"Transfer"`.
 *
 *
 */
export function useCrestTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof crestABI, 'Transfer'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  return useContractEvent({
    abi: crestABI,
    address: crestAddress[31337],
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof crestABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link partsStoreABI}__.
 *
 *
 */
export function usePartsStore(
  config: Omit<UseContractConfig, 'abi' | 'address'> & {
    chainId?: keyof typeof partsStoreAddress
  } = {} as any,
) {
  return useContract({ abi: partsStoreABI, address: partsStoreAddress[31337], ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__.
 *
 *
 */
export function usePartsStoreRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof partsStoreABI, TFunctionName>, 'abi' | 'address'> & {
    chainId?: keyof typeof partsStoreAddress
  } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"bgColors"`.
 *
 *
 */
export function usePartsStoreBgColors(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'bgColors'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'bgColors',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'bgColors'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"bgColorsCount"`.
 *
 *
 */
export function usePartsStoreBgColorsCount(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'bgColorsCount'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'bgColorsCount',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'bgColorsCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"classes"`.
 *
 *
 */
export function usePartsStoreClasses(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'classes'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'classes',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'classes'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"classesCount"`.
 *
 *
 */
export function usePartsStoreClassesCount(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'classesCount'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'classesCount',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'classesCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"crowns"`.
 *
 *
 */
export function usePartsStoreCrowns(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'crowns'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'crowns',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'crowns'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"crownsCount"`.
 *
 *
 */
export function usePartsStoreCrownsCount(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'crownsCount'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'crownsCount',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'crownsCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"doodads"`.
 *
 *
 */
export function usePartsStoreDoodads(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'doodads'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'doodads',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'doodads'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"doodadsCount"`.
 *
 *
 */
export function usePartsStoreDoodadsCount(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'doodadsCount'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'doodadsCount',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'doodadsCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"garlands"`.
 *
 *
 */
export function usePartsStoreGarlands(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'garlands'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'garlands',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'garlands'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"garlandsCount"`.
 *
 *
 */
export function usePartsStoreGarlandsCount(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'garlandsCount'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'garlandsCount',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'garlandsCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"getAllParts"`.
 *
 *
 */
export function usePartsStoreGetAllParts(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'getAllParts'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'getAllParts',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'getAllParts'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"getBgColor"`.
 *
 *
 */
export function usePartsStoreGetBgColor(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'getBgColor'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'getBgColor',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'getBgColor'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"getClass"`.
 *
 *
 */
export function usePartsStoreGetClass(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'getClass'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'getClass',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'getClass'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"getCrown"`.
 *
 *
 */
export function usePartsStoreGetCrown(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'getCrown'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'getCrown',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'getCrown'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"getDoodad"`.
 *
 *
 */
export function usePartsStoreGetDoodad(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'getDoodad'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'getDoodad',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'getDoodad'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"getGarland"`.
 *
 *
 */
export function usePartsStoreGetGarland(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'getGarland'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'getGarland',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'getGarland'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"getNogglesColor"`.
 *
 *
 */
export function usePartsStoreGetNogglesColor(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'getNogglesColor'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'getNogglesColor',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'getNogglesColor'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"getQuadrantPalette"`.
 *
 *
 */
export function usePartsStoreGetQuadrantPalette(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'getQuadrantPalette'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'getQuadrantPalette',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'getQuadrantPalette'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"getRep"`.
 *
 *
 */
export function usePartsStoreGetRep(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'getRep'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'getRep',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'getRep'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"getShield"`.
 *
 *
 */
export function usePartsStoreGetShield(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'getShield'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'getShield',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'getShield'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"getSkill"`.
 *
 *
 */
export function usePartsStoreGetSkill(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'getSkill'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'getSkill',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'getSkill'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"getTrait"`.
 *
 *
 */
export function usePartsStoreGetTrait(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'getTrait'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'getTrait',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'getTrait'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"nogglesColors"`.
 *
 *
 */
export function usePartsStoreNogglesColors(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'nogglesColors'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'nogglesColors',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'nogglesColors'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"nogglesColorsCount"`.
 *
 *
 */
export function usePartsStoreNogglesColorsCount(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'nogglesColorsCount'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'nogglesColorsCount',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'nogglesColorsCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"owner"`.
 *
 *
 */
export function usePartsStoreOwner(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'owner'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'owner'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"quadrantPalettes"`.
 *
 *
 */
export function usePartsStoreQuadrantPalettes(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'quadrantPalettes'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'quadrantPalettes',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'quadrantPalettes'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"quadrantPalettesCount"`.
 *
 *
 */
export function usePartsStoreQuadrantPalettesCount(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'quadrantPalettesCount'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'quadrantPalettesCount',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'quadrantPalettesCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"reps"`.
 *
 *
 */
export function usePartsStoreReps(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'reps'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'reps',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'reps'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"repsCount"`.
 *
 *
 */
export function usePartsStoreRepsCount(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'repsCount'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'repsCount',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'repsCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"shields"`.
 *
 *
 */
export function usePartsStoreShields(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'shields'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'shields',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'shields'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"shieldsCount"`.
 *
 *
 */
export function usePartsStoreShieldsCount(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'shieldsCount'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'shieldsCount',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'shieldsCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"skills"`.
 *
 *
 */
export function usePartsStoreSkills(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'skills'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'skills',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'skills'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"skillsCount"`.
 *
 *
 */
export function usePartsStoreSkillsCount(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'skillsCount'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'skillsCount',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'skillsCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"traits"`.
 *
 *
 */
export function usePartsStoreTraits(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'traits'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'traits',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'traits'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"traitsCount"`.
 *
 *
 */
export function usePartsStoreTraitsCount(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, 'traitsCount'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'traitsCount',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, 'traitsCount'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link partsStoreABI}__.
 *
 *
 */
export function usePartsStoreWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
  TChainId extends number = keyof typeof partsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof partsStoreABI, string>['abi'],
        TFunctionName
      > & { address?: `0x${string}`; chainId?: TChainId }
    : UseContractWriteConfig<TMode, typeof partsStoreABI, TFunctionName> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<TMode, typeof partsStoreABI, TFunctionName>({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addBgColor"`.
 *
 *
 */
export function usePartsStoreAddBgColor<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof partsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof partsStoreABI, 'addBgColor'>['abi'],
        'addBgColor'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'addBgColor' }
    : UseContractWriteConfig<TMode, typeof partsStoreABI, 'addBgColor'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addBgColor'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof partsStoreABI, 'addBgColor'>({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'addBgColor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addClass"`.
 *
 *
 */
export function usePartsStoreAddClass<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof partsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof partsStoreABI, 'addClass'>['abi'],
        'addClass'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'addClass' }
    : UseContractWriteConfig<TMode, typeof partsStoreABI, 'addClass'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addClass'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof partsStoreABI, 'addClass'>({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'addClass',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addCrown"`.
 *
 *
 */
export function usePartsStoreAddCrown<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof partsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof partsStoreABI, 'addCrown'>['abi'],
        'addCrown'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'addCrown' }
    : UseContractWriteConfig<TMode, typeof partsStoreABI, 'addCrown'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addCrown'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof partsStoreABI, 'addCrown'>({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'addCrown',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addDoodad"`.
 *
 *
 */
export function usePartsStoreAddDoodad<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof partsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof partsStoreABI, 'addDoodad'>['abi'],
        'addDoodad'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'addDoodad' }
    : UseContractWriteConfig<TMode, typeof partsStoreABI, 'addDoodad'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addDoodad'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof partsStoreABI, 'addDoodad'>({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'addDoodad',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addGarland"`.
 *
 *
 */
export function usePartsStoreAddGarland<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof partsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof partsStoreABI, 'addGarland'>['abi'],
        'addGarland'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'addGarland' }
    : UseContractWriteConfig<TMode, typeof partsStoreABI, 'addGarland'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addGarland'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof partsStoreABI, 'addGarland'>({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'addGarland',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addNogglesColor"`.
 *
 *
 */
export function usePartsStoreAddNogglesColor<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof partsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof partsStoreABI, 'addNogglesColor'>['abi'],
        'addNogglesColor'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'addNogglesColor' }
    : UseContractWriteConfig<TMode, typeof partsStoreABI, 'addNogglesColor'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addNogglesColor'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof partsStoreABI, 'addNogglesColor'>({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'addNogglesColor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addQuadrantPalette"`.
 *
 *
 */
export function usePartsStoreAddQuadrantPalette<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof partsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof partsStoreABI, 'addQuadrantPalette'>['abi'],
        'addQuadrantPalette'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'addQuadrantPalette' }
    : UseContractWriteConfig<TMode, typeof partsStoreABI, 'addQuadrantPalette'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addQuadrantPalette'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof partsStoreABI, 'addQuadrantPalette'>({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'addQuadrantPalette',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addRep"`.
 *
 *
 */
export function usePartsStoreAddRep<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof partsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof partsStoreABI, 'addRep'>['abi'],
        'addRep'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'addRep' }
    : UseContractWriteConfig<TMode, typeof partsStoreABI, 'addRep'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addRep'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof partsStoreABI, 'addRep'>({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'addRep',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addShield"`.
 *
 *
 */
export function usePartsStoreAddShield<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof partsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof partsStoreABI, 'addShield'>['abi'],
        'addShield'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'addShield' }
    : UseContractWriteConfig<TMode, typeof partsStoreABI, 'addShield'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addShield'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof partsStoreABI, 'addShield'>({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'addShield',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addSkill"`.
 *
 *
 */
export function usePartsStoreAddSkill<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof partsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof partsStoreABI, 'addSkill'>['abi'],
        'addSkill'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'addSkill' }
    : UseContractWriteConfig<TMode, typeof partsStoreABI, 'addSkill'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addSkill'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof partsStoreABI, 'addSkill'>({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'addSkill',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addTrait"`.
 *
 *
 */
export function usePartsStoreAddTrait<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof partsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof partsStoreABI, 'addTrait'>['abi'],
        'addTrait'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'addTrait' }
    : UseContractWriteConfig<TMode, typeof partsStoreABI, 'addTrait'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addTrait'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof partsStoreABI, 'addTrait'>({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'addTrait',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 *
 */
export function usePartsStoreRenounceOwnership<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof partsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof partsStoreABI, 'renounceOwnership'>['abi'],
        'renounceOwnership'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof partsStoreABI, 'renounceOwnership'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof partsStoreABI, 'renounceOwnership'>({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"transferOwnership"`.
 *
 *
 */
export function usePartsStoreTransferOwnership<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof partsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof partsStoreABI, 'transferOwnership'>['abi'],
        'transferOwnership'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof partsStoreABI, 'transferOwnership'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof partsStoreABI, 'transferOwnership'>({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link partsStoreABI}__.
 *
 *
 */
export function usePreparePartsStoreWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof partsStoreABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    ...config,
  } as UsePrepareContractWriteConfig<typeof partsStoreABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addBgColor"`.
 *
 *
 */
export function usePreparePartsStoreAddBgColor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof partsStoreABI, 'addBgColor'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'addBgColor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof partsStoreABI, 'addBgColor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addClass"`.
 *
 *
 */
export function usePreparePartsStoreAddClass(
  config: Omit<
    UsePrepareContractWriteConfig<typeof partsStoreABI, 'addClass'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'addClass',
    ...config,
  } as UsePrepareContractWriteConfig<typeof partsStoreABI, 'addClass'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addCrown"`.
 *
 *
 */
export function usePreparePartsStoreAddCrown(
  config: Omit<
    UsePrepareContractWriteConfig<typeof partsStoreABI, 'addCrown'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'addCrown',
    ...config,
  } as UsePrepareContractWriteConfig<typeof partsStoreABI, 'addCrown'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addDoodad"`.
 *
 *
 */
export function usePreparePartsStoreAddDoodad(
  config: Omit<
    UsePrepareContractWriteConfig<typeof partsStoreABI, 'addDoodad'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'addDoodad',
    ...config,
  } as UsePrepareContractWriteConfig<typeof partsStoreABI, 'addDoodad'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addGarland"`.
 *
 *
 */
export function usePreparePartsStoreAddGarland(
  config: Omit<
    UsePrepareContractWriteConfig<typeof partsStoreABI, 'addGarland'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'addGarland',
    ...config,
  } as UsePrepareContractWriteConfig<typeof partsStoreABI, 'addGarland'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addNogglesColor"`.
 *
 *
 */
export function usePreparePartsStoreAddNogglesColor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof partsStoreABI, 'addNogglesColor'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'addNogglesColor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof partsStoreABI, 'addNogglesColor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addQuadrantPalette"`.
 *
 *
 */
export function usePreparePartsStoreAddQuadrantPalette(
  config: Omit<
    UsePrepareContractWriteConfig<typeof partsStoreABI, 'addQuadrantPalette'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'addQuadrantPalette',
    ...config,
  } as UsePrepareContractWriteConfig<typeof partsStoreABI, 'addQuadrantPalette'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addRep"`.
 *
 *
 */
export function usePreparePartsStoreAddRep(
  config: Omit<
    UsePrepareContractWriteConfig<typeof partsStoreABI, 'addRep'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'addRep',
    ...config,
  } as UsePrepareContractWriteConfig<typeof partsStoreABI, 'addRep'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addShield"`.
 *
 *
 */
export function usePreparePartsStoreAddShield(
  config: Omit<
    UsePrepareContractWriteConfig<typeof partsStoreABI, 'addShield'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'addShield',
    ...config,
  } as UsePrepareContractWriteConfig<typeof partsStoreABI, 'addShield'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addSkill"`.
 *
 *
 */
export function usePreparePartsStoreAddSkill(
  config: Omit<
    UsePrepareContractWriteConfig<typeof partsStoreABI, 'addSkill'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'addSkill',
    ...config,
  } as UsePrepareContractWriteConfig<typeof partsStoreABI, 'addSkill'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addTrait"`.
 *
 *
 */
export function usePreparePartsStoreAddTrait(
  config: Omit<
    UsePrepareContractWriteConfig<typeof partsStoreABI, 'addTrait'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'addTrait',
    ...config,
  } as UsePrepareContractWriteConfig<typeof partsStoreABI, 'addTrait'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 *
 */
export function usePreparePartsStoreRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof partsStoreABI, 'renounceOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof partsStoreABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"transferOwnership"`.
 *
 *
 */
export function usePreparePartsStoreTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof partsStoreABI, 'transferOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof partsStoreABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link partsStoreABI}__.
 *
 *
 */
export function usePartsStoreEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof partsStoreABI, TEventName>, 'abi' | 'address'> & {
    chainId?: keyof typeof partsStoreAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    ...config,
  } as UseContractEventConfig<typeof partsStoreABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link partsStoreABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 *
 */
export function usePartsStoreOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof partsStoreABI, 'OwnershipTransferred'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  return useContractEvent({
    abi: partsStoreABI,
    address: partsStoreAddress[31337],
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof partsStoreABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iCrestABI}__.
 */
export function useICrest(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: iCrestABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCrestABI}__.
 */
export function useICrestRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof iCrestABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: iCrestABI, ...config } as UseContractReadConfig<
    typeof iCrestABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useICrestBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof iCrestABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCrestABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof iCrestABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"getApproved"`.
 */
export function useICrestGetApproved(
  config: Omit<
    UseContractReadConfig<typeof iCrestABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCrestABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof iCrestABI, 'getApproved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useICrestIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof iCrestABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCrestABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof iCrestABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useICrestOwnerOf(
  config: Omit<
    UseContractReadConfig<typeof iCrestABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCrestABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof iCrestABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useICrestSupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof iCrestABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCrestABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof iCrestABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useICrestTokenByIndex(
  config: Omit<
    UseContractReadConfig<typeof iCrestABI, 'tokenByIndex'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCrestABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<typeof iCrestABI, 'tokenByIndex'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function useICrestTokenOfOwnerByIndex(
  config: Omit<
    UseContractReadConfig<typeof iCrestABI, 'tokenOfOwnerByIndex'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCrestABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<typeof iCrestABI, 'tokenOfOwnerByIndex'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useICrestTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof iCrestABI, 'totalSupply'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCrestABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof iCrestABI, 'totalSupply'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCrestABI}__.
 */
export function useICrestWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iCrestABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iCrestABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iCrestABI, TFunctionName>({
    abi: iCrestABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"approve"`.
 */
export function useICrestApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iCrestABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof iCrestABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iCrestABI, 'approve'>({
    abi: iCrestABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"burn"`.
 */
export function useICrestBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iCrestABI, 'burn'>['abi'],
        'burn'
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<TMode, typeof iCrestABI, 'burn'> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iCrestABI, 'burn'>({
    abi: iCrestABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"mint"`.
 */
export function useICrestMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iCrestABI, 'mint'>['abi'],
        'mint'
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<TMode, typeof iCrestABI, 'mint'> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iCrestABI, 'mint'>({
    abi: iCrestABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"mintSpecific"`.
 */
export function useICrestMintSpecific<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iCrestABI, 'mintSpecific'>['abi'],
        'mintSpecific'
      > & { functionName?: 'mintSpecific' }
    : UseContractWriteConfig<TMode, typeof iCrestABI, 'mintSpecific'> & {
        abi?: never
        functionName?: 'mintSpecific'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iCrestABI, 'mintSpecific'>({
    abi: iCrestABI,
    functionName: 'mintSpecific',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useICrestSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iCrestABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof iCrestABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iCrestABI, 'safeTransferFrom'>({
    abi: iCrestABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useICrestSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iCrestABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof iCrestABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iCrestABI, 'setApprovalForAll'>({
    abi: iCrestABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useICrestTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iCrestABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof iCrestABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iCrestABI, 'transferFrom'>({
    abi: iCrestABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCrestABI}__.
 */
export function usePrepareICrestWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof iCrestABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: iCrestABI, ...config } as UsePrepareContractWriteConfig<
    typeof iCrestABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareICrestApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCrestABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCrestABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iCrestABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareICrestBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCrestABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCrestABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iCrestABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareICrestMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCrestABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCrestABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iCrestABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"mintSpecific"`.
 */
export function usePrepareICrestMintSpecific(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCrestABI, 'mintSpecific'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCrestABI,
    functionName: 'mintSpecific',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iCrestABI, 'mintSpecific'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareICrestSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCrestABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCrestABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iCrestABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareICrestSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCrestABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCrestABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iCrestABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareICrestTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCrestABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCrestABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iCrestABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCrestABI}__.
 */
export function useICrestEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iCrestABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: iCrestABI, ...config } as UseContractEventConfig<
    typeof iCrestABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCrestABI}__ and `eventName` set to `"Approval"`.
 */
export function useICrestApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof iCrestABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iCrestABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof iCrestABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCrestABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useICrestApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof iCrestABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iCrestABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof iCrestABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCrestABI}__ and `eventName` set to `"Transfer"`.
 */
export function useICrestTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof iCrestABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iCrestABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof iCrestABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iPartsStoreABI}__.
 */
export function useIPartsStore(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: iPartsStoreABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__.
 */
export function useIPartsStoreRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof iPartsStoreABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: iPartsStoreABI, ...config } as UseContractReadConfig<
    typeof iPartsStoreABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"bgColorsCount"`.
 */
export function useIPartsStoreBgColorsCount(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, 'bgColorsCount'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'bgColorsCount',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, 'bgColorsCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"classesCount"`.
 */
export function useIPartsStoreClassesCount(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, 'classesCount'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'classesCount',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, 'classesCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"crownsCount"`.
 */
export function useIPartsStoreCrownsCount(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, 'crownsCount'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'crownsCount',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, 'crownsCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"doodadsCount"`.
 */
export function useIPartsStoreDoodadsCount(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, 'doodadsCount'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'doodadsCount',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, 'doodadsCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"garlandsCount"`.
 */
export function useIPartsStoreGarlandsCount(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, 'garlandsCount'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'garlandsCount',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, 'garlandsCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"getBgColor"`.
 */
export function useIPartsStoreGetBgColor(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, 'getBgColor'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'getBgColor',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, 'getBgColor'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"getClass"`.
 */
export function useIPartsStoreGetClass(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, 'getClass'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'getClass',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, 'getClass'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"getCrown"`.
 */
export function useIPartsStoreGetCrown(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, 'getCrown'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'getCrown',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, 'getCrown'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"getDoodad"`.
 */
export function useIPartsStoreGetDoodad(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, 'getDoodad'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'getDoodad',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, 'getDoodad'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"getGarland"`.
 */
export function useIPartsStoreGetGarland(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, 'getGarland'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'getGarland',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, 'getGarland'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"getNogglesColor"`.
 */
export function useIPartsStoreGetNogglesColor(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, 'getNogglesColor'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'getNogglesColor',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, 'getNogglesColor'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"getQuadrantPalette"`.
 */
export function useIPartsStoreGetQuadrantPalette(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, 'getQuadrantPalette'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'getQuadrantPalette',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, 'getQuadrantPalette'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"getRep"`.
 */
export function useIPartsStoreGetRep(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, 'getRep'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'getRep',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, 'getRep'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"getShield"`.
 */
export function useIPartsStoreGetShield(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, 'getShield'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'getShield',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, 'getShield'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"getSkill"`.
 */
export function useIPartsStoreGetSkill(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, 'getSkill'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'getSkill',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, 'getSkill'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"getTrait"`.
 */
export function useIPartsStoreGetTrait(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, 'getTrait'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'getTrait',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, 'getTrait'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"nogglesColorsCount"`.
 */
export function useIPartsStoreNogglesColorsCount(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, 'nogglesColorsCount'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'nogglesColorsCount',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, 'nogglesColorsCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"quadrantPalettesCount"`.
 */
export function useIPartsStoreQuadrantPalettesCount(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, 'quadrantPalettesCount'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'quadrantPalettesCount',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, 'quadrantPalettesCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"repsCount"`.
 */
export function useIPartsStoreRepsCount(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, 'repsCount'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'repsCount',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, 'repsCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"shieldsCount"`.
 */
export function useIPartsStoreShieldsCount(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, 'shieldsCount'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'shieldsCount',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, 'shieldsCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"skillsCount"`.
 */
export function useIPartsStoreSkillsCount(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, 'skillsCount'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'skillsCount',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, 'skillsCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"traitsCount"`.
 */
export function useIPartsStoreTraitsCount(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, 'traitsCount'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'traitsCount',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, 'traitsCount'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__.
 */
export function useIPartsStoreWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iPartsStoreABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iPartsStoreABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iPartsStoreABI, TFunctionName>({
    abi: iPartsStoreABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addBgColor"`.
 */
export function useIPartsStoreAddBgColor<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iPartsStoreABI, 'addBgColor'>['abi'],
        'addBgColor'
      > & { functionName?: 'addBgColor' }
    : UseContractWriteConfig<TMode, typeof iPartsStoreABI, 'addBgColor'> & {
        abi?: never
        functionName?: 'addBgColor'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iPartsStoreABI, 'addBgColor'>({
    abi: iPartsStoreABI,
    functionName: 'addBgColor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addClass"`.
 */
export function useIPartsStoreAddClass<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iPartsStoreABI, 'addClass'>['abi'],
        'addClass'
      > & { functionName?: 'addClass' }
    : UseContractWriteConfig<TMode, typeof iPartsStoreABI, 'addClass'> & {
        abi?: never
        functionName?: 'addClass'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iPartsStoreABI, 'addClass'>({
    abi: iPartsStoreABI,
    functionName: 'addClass',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addCrown"`.
 */
export function useIPartsStoreAddCrown<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iPartsStoreABI, 'addCrown'>['abi'],
        'addCrown'
      > & { functionName?: 'addCrown' }
    : UseContractWriteConfig<TMode, typeof iPartsStoreABI, 'addCrown'> & {
        abi?: never
        functionName?: 'addCrown'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iPartsStoreABI, 'addCrown'>({
    abi: iPartsStoreABI,
    functionName: 'addCrown',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addDoodad"`.
 */
export function useIPartsStoreAddDoodad<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iPartsStoreABI, 'addDoodad'>['abi'],
        'addDoodad'
      > & { functionName?: 'addDoodad' }
    : UseContractWriteConfig<TMode, typeof iPartsStoreABI, 'addDoodad'> & {
        abi?: never
        functionName?: 'addDoodad'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iPartsStoreABI, 'addDoodad'>({
    abi: iPartsStoreABI,
    functionName: 'addDoodad',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addGarland"`.
 */
export function useIPartsStoreAddGarland<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iPartsStoreABI, 'addGarland'>['abi'],
        'addGarland'
      > & { functionName?: 'addGarland' }
    : UseContractWriteConfig<TMode, typeof iPartsStoreABI, 'addGarland'> & {
        abi?: never
        functionName?: 'addGarland'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iPartsStoreABI, 'addGarland'>({
    abi: iPartsStoreABI,
    functionName: 'addGarland',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addNogglesColor"`.
 */
export function useIPartsStoreAddNogglesColor<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iPartsStoreABI, 'addNogglesColor'>['abi'],
        'addNogglesColor'
      > & { functionName?: 'addNogglesColor' }
    : UseContractWriteConfig<TMode, typeof iPartsStoreABI, 'addNogglesColor'> & {
        abi?: never
        functionName?: 'addNogglesColor'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iPartsStoreABI, 'addNogglesColor'>({
    abi: iPartsStoreABI,
    functionName: 'addNogglesColor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addQuadrantPalette"`.
 */
export function useIPartsStoreAddQuadrantPalette<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iPartsStoreABI, 'addQuadrantPalette'>['abi'],
        'addQuadrantPalette'
      > & { functionName?: 'addQuadrantPalette' }
    : UseContractWriteConfig<TMode, typeof iPartsStoreABI, 'addQuadrantPalette'> & {
        abi?: never
        functionName?: 'addQuadrantPalette'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iPartsStoreABI, 'addQuadrantPalette'>({
    abi: iPartsStoreABI,
    functionName: 'addQuadrantPalette',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addRep"`.
 */
export function useIPartsStoreAddRep<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iPartsStoreABI, 'addRep'>['abi'],
        'addRep'
      > & { functionName?: 'addRep' }
    : UseContractWriteConfig<TMode, typeof iPartsStoreABI, 'addRep'> & {
        abi?: never
        functionName?: 'addRep'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iPartsStoreABI, 'addRep'>({
    abi: iPartsStoreABI,
    functionName: 'addRep',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addShield"`.
 */
export function useIPartsStoreAddShield<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iPartsStoreABI, 'addShield'>['abi'],
        'addShield'
      > & { functionName?: 'addShield' }
    : UseContractWriteConfig<TMode, typeof iPartsStoreABI, 'addShield'> & {
        abi?: never
        functionName?: 'addShield'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iPartsStoreABI, 'addShield'>({
    abi: iPartsStoreABI,
    functionName: 'addShield',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addSkill"`.
 */
export function useIPartsStoreAddSkill<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iPartsStoreABI, 'addSkill'>['abi'],
        'addSkill'
      > & { functionName?: 'addSkill' }
    : UseContractWriteConfig<TMode, typeof iPartsStoreABI, 'addSkill'> & {
        abi?: never
        functionName?: 'addSkill'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iPartsStoreABI, 'addSkill'>({
    abi: iPartsStoreABI,
    functionName: 'addSkill',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addTrait"`.
 */
export function useIPartsStoreAddTrait<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iPartsStoreABI, 'addTrait'>['abi'],
        'addTrait'
      > & { functionName?: 'addTrait' }
    : UseContractWriteConfig<TMode, typeof iPartsStoreABI, 'addTrait'> & {
        abi?: never
        functionName?: 'addTrait'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iPartsStoreABI, 'addTrait'>({
    abi: iPartsStoreABI,
    functionName: 'addTrait',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"getAllParts"`.
 */
export function useIPartsStoreGetAllParts<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iPartsStoreABI, 'getAllParts'>['abi'],
        'getAllParts'
      > & { functionName?: 'getAllParts' }
    : UseContractWriteConfig<TMode, typeof iPartsStoreABI, 'getAllParts'> & {
        abi?: never
        functionName?: 'getAllParts'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iPartsStoreABI, 'getAllParts'>({
    abi: iPartsStoreABI,
    functionName: 'getAllParts',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__.
 */
export function usePrepareIPartsStoreWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPartsStoreABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPartsStoreABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPartsStoreABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addBgColor"`.
 */
export function usePrepareIPartsStoreAddBgColor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addBgColor'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPartsStoreABI,
    functionName: 'addBgColor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addBgColor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addClass"`.
 */
export function usePrepareIPartsStoreAddClass(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addClass'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPartsStoreABI,
    functionName: 'addClass',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addClass'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addCrown"`.
 */
export function usePrepareIPartsStoreAddCrown(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addCrown'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPartsStoreABI,
    functionName: 'addCrown',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addCrown'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addDoodad"`.
 */
export function usePrepareIPartsStoreAddDoodad(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addDoodad'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPartsStoreABI,
    functionName: 'addDoodad',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addDoodad'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addGarland"`.
 */
export function usePrepareIPartsStoreAddGarland(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addGarland'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPartsStoreABI,
    functionName: 'addGarland',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addGarland'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addNogglesColor"`.
 */
export function usePrepareIPartsStoreAddNogglesColor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addNogglesColor'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPartsStoreABI,
    functionName: 'addNogglesColor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addNogglesColor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addQuadrantPalette"`.
 */
export function usePrepareIPartsStoreAddQuadrantPalette(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addQuadrantPalette'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPartsStoreABI,
    functionName: 'addQuadrantPalette',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addQuadrantPalette'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addRep"`.
 */
export function usePrepareIPartsStoreAddRep(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addRep'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPartsStoreABI,
    functionName: 'addRep',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addRep'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addShield"`.
 */
export function usePrepareIPartsStoreAddShield(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addShield'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPartsStoreABI,
    functionName: 'addShield',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addShield'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addSkill"`.
 */
export function usePrepareIPartsStoreAddSkill(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addSkill'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPartsStoreABI,
    functionName: 'addSkill',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addSkill'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addTrait"`.
 */
export function usePrepareIPartsStoreAddTrait(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addTrait'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPartsStoreABI,
    functionName: 'addTrait',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addTrait'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"getAllParts"`.
 */
export function usePrepareIPartsStoreGetAllParts(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'getAllParts'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPartsStoreABI,
    functionName: 'getAllParts',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'getAllParts'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link dnaManagerABI}__.
 *
 *
 */
export function useDnaManager(
  config: Omit<UseContractConfig, 'abi' | 'address'> & {
    chainId?: keyof typeof dnaManagerAddress
  } = {} as any,
) {
  return useContract({ abi: dnaManagerABI, address: dnaManagerAddress[31337], ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dnaManagerABI}__.
 *
 *
 */
export function useDnaManagerRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof dnaManagerABI, TFunctionName>, 'abi' | 'address'> & {
    chainId?: keyof typeof dnaManagerAddress
  } = {} as any,
) {
  return useContractRead({
    abi: dnaManagerABI,
    address: dnaManagerAddress[31337],
    ...config,
  } as UseContractReadConfig<typeof dnaManagerABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dnaManagerABI}__ and `functionName` set to `"generateDna"`.
 *
 *
 */
export function useDnaManagerGenerateDna(
  config: Omit<
    UseContractReadConfig<typeof dnaManagerABI, 'generateDna'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof dnaManagerAddress } = {} as any,
) {
  return useContractRead({
    abi: dnaManagerABI,
    address: dnaManagerAddress[31337],
    functionName: 'generateDna',
    ...config,
  } as UseContractReadConfig<typeof dnaManagerABI, 'generateDna'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dnaManagerABI}__ and `functionName` set to `"getDnaFromImage"`.
 *
 *
 */
export function useDnaManagerGetDnaFromImage(
  config: Omit<
    UseContractReadConfig<typeof dnaManagerABI, 'getDnaFromImage'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof dnaManagerAddress } = {} as any,
) {
  return useContractRead({
    abi: dnaManagerABI,
    address: dnaManagerAddress[31337],
    functionName: 'getDnaFromImage',
    ...config,
  } as UseContractReadConfig<typeof dnaManagerABI, 'getDnaFromImage'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dnaManagerABI}__ and `functionName` set to `"getImageFromDna"`.
 *
 *
 */
export function useDnaManagerGetImageFromDna(
  config: Omit<
    UseContractReadConfig<typeof dnaManagerABI, 'getImageFromDna'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof dnaManagerAddress } = {} as any,
) {
  return useContractRead({
    abi: dnaManagerABI,
    address: dnaManagerAddress[31337],
    functionName: 'getImageFromDna',
    ...config,
  } as UseContractReadConfig<typeof dnaManagerABI, 'getImageFromDna'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link tokenGeneratorABI}__.
 *
 *
 */
export function useTokenGenerator(
  config: Omit<UseContractConfig, 'abi' | 'address'> & {
    chainId?: keyof typeof tokenGeneratorAddress
  } = {} as any,
) {
  return useContract({ abi: tokenGeneratorABI, address: tokenGeneratorAddress[31337], ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenGeneratorABI}__.
 *
 *
 */
export function useTokenGeneratorRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof tokenGeneratorABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof tokenGeneratorAddress } = {} as any,
) {
  return useContractRead({
    abi: tokenGeneratorABI,
    address: tokenGeneratorAddress[31337],
    ...config,
  } as UseContractReadConfig<typeof tokenGeneratorABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenGeneratorABI}__ and `functionName` set to `"generateTokenURI"`.
 *
 *
 */
export function useTokenGeneratorGenerateTokenUri(
  config: Omit<
    UseContractReadConfig<typeof tokenGeneratorABI, 'generateTokenURI'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenGeneratorAddress } = {} as any,
) {
  return useContractRead({
    abi: tokenGeneratorABI,
    address: tokenGeneratorAddress[31337],
    functionName: 'generateTokenURI',
    ...config,
  } as UseContractReadConfig<typeof tokenGeneratorABI, 'generateTokenURI'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenGeneratorABI}__ and `functionName` set to `"getImageParts"`.
 *
 *
 */
export function useTokenGeneratorGetImageParts(
  config: Omit<
    UseContractReadConfig<typeof tokenGeneratorABI, 'getImageParts'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenGeneratorAddress } = {} as any,
) {
  return useContractRead({
    abi: tokenGeneratorABI,
    address: tokenGeneratorAddress[31337],
    functionName: 'getImageParts',
    ...config,
  } as UseContractReadConfig<typeof tokenGeneratorABI, 'getImageParts'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ownableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof ownableABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: ownableABI, ...config } as UseContractReadConfig<
    typeof ownableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableOwner(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, 'owner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof ownableABI, 'owner'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ownableABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ownableABI, TFunctionName>({
    abi: ownableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownableABI, 'renounceOwnership'>['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof ownableABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ownableABI, 'renounceOwnership'>({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownableABI, 'transferOwnership'>['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof ownableABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ownableABI, 'transferOwnership'>({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function usePrepareOwnableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ownableABI, ...config } as UsePrepareContractWriteConfig<
    typeof ownableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ownableABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ownableABI, ...config } as UseContractEventConfig<
    typeof ownableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iVotesABI}__.
 */
export function useIVotes(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: iVotesABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesABI}__.
 */
export function useIVotesRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof iVotesABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: iVotesABI, ...config } as UseContractReadConfig<
    typeof iVotesABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"delegates"`.
 */
export function useIVotesDelegates(
  config: Omit<
    UseContractReadConfig<typeof iVotesABI, 'delegates'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVotesABI,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<typeof iVotesABI, 'delegates'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useIVotesGetPastTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof iVotesABI, 'getPastTotalSupply'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVotesABI,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<typeof iVotesABI, 'getPastTotalSupply'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useIVotesGetPastVotes(
  config: Omit<
    UseContractReadConfig<typeof iVotesABI, 'getPastVotes'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVotesABI,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<typeof iVotesABI, 'getPastVotes'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"getVotes"`.
 */
export function useIVotesGetVotes(
  config: Omit<
    UseContractReadConfig<typeof iVotesABI, 'getVotes'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVotesABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof iVotesABI, 'getVotes'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotesABI}__.
 */
export function useIVotesWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVotesABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iVotesABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVotesABI, TFunctionName>({
    abi: iVotesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"delegate"`.
 */
export function useIVotesDelegate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVotesABI, 'delegate'>['abi'],
        'delegate'
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<TMode, typeof iVotesABI, 'delegate'> & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVotesABI, 'delegate'>({
    abi: iVotesABI,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useIVotesDelegateBySig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVotesABI, 'delegateBySig'>['abi'],
        'delegateBySig'
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<TMode, typeof iVotesABI, 'delegateBySig'> & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVotesABI, 'delegateBySig'>({
    abi: iVotesABI,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotesABI}__.
 */
export function usePrepareIVotesWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof iVotesABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: iVotesABI, ...config } as UsePrepareContractWriteConfig<
    typeof iVotesABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareIVotesDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotesABI, 'delegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotesABI,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotesABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareIVotesDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotesABI, 'delegateBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotesABI,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotesABI, 'delegateBySig'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVotesABI}__.
 */
export function useIVotesEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iVotesABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: iVotesABI, ...config } as UseContractEventConfig<
    typeof iVotesABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVotesABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useIVotesDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iVotesABI, 'DelegateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iVotesABI,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof iVotesABI, 'DelegateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVotesABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useIVotesDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iVotesABI, 'DelegateVotesChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iVotesABI,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<typeof iVotesABI, 'DelegateVotesChanged'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link votesABI}__.
 */
export function useVotes(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: votesABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link votesABI}__.
 */
export function useVotesRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof votesABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: votesABI, ...config } as UseContractReadConfig<
    typeof votesABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useVotesDomainSeparator(
  config: Omit<
    UseContractReadConfig<typeof votesABI, 'DOMAIN_SEPARATOR'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: votesABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<typeof votesABI, 'DOMAIN_SEPARATOR'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"delegates"`.
 */
export function useVotesDelegates(
  config: Omit<
    UseContractReadConfig<typeof votesABI, 'delegates'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: votesABI,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<typeof votesABI, 'delegates'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useVotesGetPastTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof votesABI, 'getPastTotalSupply'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: votesABI,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<typeof votesABI, 'getPastTotalSupply'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useVotesGetPastVotes(
  config: Omit<
    UseContractReadConfig<typeof votesABI, 'getPastVotes'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: votesABI,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<typeof votesABI, 'getPastVotes'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"getVotes"`.
 */
export function useVotesGetVotes(
  config: Omit<
    UseContractReadConfig<typeof votesABI, 'getVotes'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: votesABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof votesABI, 'getVotes'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"nonces"`.
 */
export function useVotesNonces(
  config: Omit<
    UseContractReadConfig<typeof votesABI, 'nonces'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: votesABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof votesABI, 'nonces'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link votesABI}__.
 */
export function useVotesWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof votesABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof votesABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof votesABI, TFunctionName>({
    abi: votesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"delegate"`.
 */
export function useVotesDelegate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof votesABI, 'delegate'>['abi'],
        'delegate'
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<TMode, typeof votesABI, 'delegate'> & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof votesABI, 'delegate'>({
    abi: votesABI,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useVotesDelegateBySig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof votesABI, 'delegateBySig'>['abi'],
        'delegateBySig'
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<TMode, typeof votesABI, 'delegateBySig'> & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof votesABI, 'delegateBySig'>({
    abi: votesABI,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link votesABI}__.
 */
export function usePrepareVotesWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof votesABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: votesABI, ...config } as UsePrepareContractWriteConfig<
    typeof votesABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareVotesDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof votesABI, 'delegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: votesABI,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof votesABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareVotesDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof votesABI, 'delegateBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: votesABI,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof votesABI, 'delegateBySig'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link votesABI}__.
 */
export function useVotesEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof votesABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: votesABI, ...config } as UseContractEventConfig<
    typeof votesABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link votesABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useVotesDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof votesABI, 'DelegateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: votesABI,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof votesABI, 'DelegateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link votesABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useVotesDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof votesABI, 'DelegateVotesChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: votesABI,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<typeof votesABI, 'DelegateVotesChanged'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc721ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Read<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof erc721ABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: erc721ABI, ...config } as UseContractReadConfig<
    typeof erc721ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721BalanceOf(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721GetApproved(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'getApproved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721IsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"name"`.
 */
export function useErc721Name(
  config: Omit<UseContractReadConfig<typeof erc721ABI, 'name'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721OwnerOf(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721SupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721Symbol(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721TokenUri(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'tokenURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'tokenURI'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Write<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc721ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, TFunctionName>({
    abi: erc721ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'approve'>({
    abi: erc721ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'safeTransferFrom'>({
    abi: erc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721SetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'setApprovalForAll'>({
    abi: erc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'transferFrom'>({
    abi: erc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function usePrepareErc721Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: erc721ABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc721ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc721ABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: erc721ABI, ...config } as UseContractEventConfig<
    typeof erc721ABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc721ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Read<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof ierc721ABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: ierc721ABI, ...config } as UseContractReadConfig<
    typeof ierc721ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721BalanceOf(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721GetApproved(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, 'getApproved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721IsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721OwnerOf(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721SupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Write<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc721ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, TFunctionName>({
    abi: ierc721ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'approve'>({
    abi: ierc721ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'safeTransferFrom'>({
    abi: ierc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721SetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'setApprovalForAll'>({
    abi: ierc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'transferFrom'>({
    abi: ierc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function usePrepareIerc721Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc721ABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ierc721ABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc721ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc721ABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ierc721ABI, ...config } as UseContractEventConfig<
    typeof ierc721ABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function useIerc721Receiver(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc721ReceiverABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function useIerc721ReceiverWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ReceiverABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc721ReceiverABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ReceiverABI, TFunctionName>({
    abi: ierc721ReceiverABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useIerc721ReceiverOnErc721Received<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ReceiverABI, 'onERC721Received'>['abi'],
        'onERC721Received'
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<TMode, typeof ierc721ReceiverABI, 'onERC721Received'> & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ReceiverABI, 'onERC721Received'>({
    abi: ierc721ReceiverABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function usePrepareIerc721ReceiverWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ReceiverABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ReceiverABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareIerc721ReceiverOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ReceiverABI, 'onERC721Received'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ReceiverABI, 'onERC721Received'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc165ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165Read<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof erc165ABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: erc165ABI, ...config } as UseContractReadConfig<
    typeof erc165ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165SupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof erc165ABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc165ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc165ABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc165ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165Read<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof ierc165ABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: ierc165ABI, ...config } as UseContractReadConfig<
    typeof ierc165ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165SupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ierc165ABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function useErc721Burnable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc721BurnableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function useErc721BurnableRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof erc721BurnableABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: erc721BurnableABI, ...config } as UseContractReadConfig<
    typeof erc721BurnableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721BurnableBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721BurnableGetApproved(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, 'getApproved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721BurnableIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"name"`.
 */
export function useErc721BurnableName(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721BurnableOwnerOf(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721BurnableSupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721BurnableSymbol(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721BurnableTokenUri(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'tokenURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, 'tokenURI'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function useErc721BurnableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721BurnableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc721BurnableABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721BurnableABI, TFunctionName>({
    abi: erc721BurnableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721BurnableApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721BurnableABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc721BurnableABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721BurnableABI, 'approve'>({
    abi: erc721BurnableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"burn"`.
 */
export function useErc721BurnableBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721BurnableABI, 'burn'>['abi'],
        'burn'
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<TMode, typeof erc721BurnableABI, 'burn'> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721BurnableABI, 'burn'>({
    abi: erc721BurnableABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721BurnableSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721BurnableABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721BurnableABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721BurnableABI, 'safeTransferFrom'>({
    abi: erc721BurnableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721BurnableSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721BurnableABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof erc721BurnableABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721BurnableABI, 'setApprovalForAll'>({
    abi: erc721BurnableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721BurnableTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721BurnableABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721BurnableABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721BurnableABI, 'transferFrom'>({
    abi: erc721BurnableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function usePrepareErc721BurnableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BurnableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BurnableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721BurnableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareErc721BurnableBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721BurnableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721BurnableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721BurnableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function useErc721BurnableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc721BurnableABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: erc721BurnableABI, ...config } as UseContractEventConfig<
    typeof erc721BurnableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721BurnableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721BurnableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BurnableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721BurnableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721BurnableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721BurnableABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BurnableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721BurnableABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721BurnableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721BurnableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BurnableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721BurnableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721EnumerableABI}__.
 */
export function useErc721Enumerable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc721EnumerableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__.
 */
export function useErc721EnumerableRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof erc721EnumerableABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: erc721EnumerableABI, ...config } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721EnumerableBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721EnumerableGetApproved(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, 'getApproved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721EnumerableIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"name"`.
 */
export function useErc721EnumerableName(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721EnumerableOwnerOf(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721EnumerableSupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721EnumerableSymbol(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useErc721EnumerableTokenByIndex(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'tokenByIndex'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, 'tokenByIndex'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function useErc721EnumerableTokenOfOwnerByIndex(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'tokenOfOwnerByIndex'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, 'tokenOfOwnerByIndex'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721EnumerableTokenUri(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'tokenURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, 'tokenURI'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc721EnumerableTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'totalSupply'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, 'totalSupply'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__.
 */
export function useErc721EnumerableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721EnumerableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc721EnumerableABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721EnumerableABI, TFunctionName>({
    abi: erc721EnumerableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721EnumerableApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721EnumerableABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc721EnumerableABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721EnumerableABI, 'approve'>({
    abi: erc721EnumerableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721EnumerableSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721EnumerableABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721EnumerableABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721EnumerableABI, 'safeTransferFrom'>({
    abi: erc721EnumerableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721EnumerableSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721EnumerableABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof erc721EnumerableABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721EnumerableABI, 'setApprovalForAll'>({
    abi: erc721EnumerableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721EnumerableTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721EnumerableABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721EnumerableABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721EnumerableABI, 'transferFrom'>({
    abi: erc721EnumerableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__.
 */
export function usePrepareErc721EnumerableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721EnumerableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721EnumerableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721EnumerableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721EnumerableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721EnumerableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721EnumerableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721EnumerableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721EnumerableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721EnumerableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721EnumerableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721EnumerableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721EnumerableABI}__.
 */
export function useErc721EnumerableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc721EnumerableABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: erc721EnumerableABI, ...config } as UseContractEventConfig<
    typeof erc721EnumerableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721EnumerableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721EnumerableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721EnumerableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721EnumerableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721EnumerableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721EnumerableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721EnumerableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721EnumerableABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721EnumerableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721EnumerableABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721EnumerableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721EnumerableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721EnumerableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721EnumerableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721EnumerableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721VotesABI}__.
 */
export function useErc721Votes(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc721VotesABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__.
 */
export function useErc721VotesRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof erc721VotesABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: erc721VotesABI, ...config } as UseContractReadConfig<
    typeof erc721VotesABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useErc721VotesDomainSeparator(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'DOMAIN_SEPARATOR'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'DOMAIN_SEPARATOR'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721VotesBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"delegates"`.
 */
export function useErc721VotesDelegates(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'delegates'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'delegates'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721VotesGetApproved(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'getApproved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useErc721VotesGetPastTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'getPastTotalSupply'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'getPastTotalSupply'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useErc721VotesGetPastVotes(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'getPastVotes'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'getPastVotes'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"getVotes"`.
 */
export function useErc721VotesGetVotes(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'getVotes'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'getVotes'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721VotesIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"name"`.
 */
export function useErc721VotesName(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"nonces"`.
 */
export function useErc721VotesNonces(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'nonces'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'nonces'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721VotesOwnerOf(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721VotesSupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721VotesSymbol(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721VotesTokenUri(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'tokenURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'tokenURI'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721VotesABI}__.
 */
export function useErc721VotesWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721VotesABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc721VotesABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721VotesABI, TFunctionName>({
    abi: erc721VotesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721VotesApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721VotesABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc721VotesABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721VotesABI, 'approve'>({
    abi: erc721VotesABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"delegate"`.
 */
export function useErc721VotesDelegate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721VotesABI, 'delegate'>['abi'],
        'delegate'
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<TMode, typeof erc721VotesABI, 'delegate'> & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721VotesABI, 'delegate'>({
    abi: erc721VotesABI,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useErc721VotesDelegateBySig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721VotesABI, 'delegateBySig'>['abi'],
        'delegateBySig'
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<TMode, typeof erc721VotesABI, 'delegateBySig'> & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721VotesABI, 'delegateBySig'>({
    abi: erc721VotesABI,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721VotesSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721VotesABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721VotesABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721VotesABI, 'safeTransferFrom'>({
    abi: erc721VotesABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721VotesSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721VotesABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof erc721VotesABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721VotesABI, 'setApprovalForAll'>({
    abi: erc721VotesABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721VotesTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721VotesABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721VotesABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721VotesABI, 'transferFrom'>({
    abi: erc721VotesABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721VotesABI}__.
 */
export function usePrepareErc721VotesWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721VotesABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721VotesABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721VotesABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721VotesApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721VotesABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721VotesABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721VotesABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareErc721VotesDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721VotesABI, 'delegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721VotesABI,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721VotesABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareErc721VotesDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721VotesABI, 'delegateBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721VotesABI,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721VotesABI, 'delegateBySig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721VotesSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721VotesABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721VotesABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721VotesABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721VotesSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721VotesABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721VotesABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721VotesABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721VotesTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721VotesABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721VotesABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721VotesABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721VotesABI}__.
 */
export function useErc721VotesEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc721VotesABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: erc721VotesABI, ...config } as UseContractEventConfig<
    typeof erc721VotesABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721VotesABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721VotesApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721VotesABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721VotesABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721VotesABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721VotesABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721VotesApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721VotesABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721VotesABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721VotesABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721VotesABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useErc721VotesDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721VotesABI, 'DelegateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721VotesABI,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof erc721VotesABI, 'DelegateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721VotesABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useErc721VotesDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721VotesABI, 'DelegateVotesChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721VotesABI,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<typeof erc721VotesABI, 'DelegateVotesChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721VotesABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721VotesTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721VotesABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721VotesABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721VotesABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721EnumerableABI}__.
 */
export function useIerc721Enumerable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc721EnumerableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__.
 */
export function useIerc721EnumerableRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: ierc721EnumerableABI, ...config } as UseContractReadConfig<
    typeof ierc721EnumerableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721EnumerableBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721EnumerableABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721EnumerableGetApproved(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof ierc721EnumerableABI, 'getApproved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721EnumerableIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof ierc721EnumerableABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721EnumerableOwnerOf(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721EnumerableABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721EnumerableSupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ierc721EnumerableABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useIerc721EnumerableTokenByIndex(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, 'tokenByIndex'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<typeof ierc721EnumerableABI, 'tokenByIndex'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function useIerc721EnumerableTokenOfOwnerByIndex(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, 'tokenOfOwnerByIndex'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<typeof ierc721EnumerableABI, 'tokenOfOwnerByIndex'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc721EnumerableTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, 'totalSupply'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof ierc721EnumerableABI, 'totalSupply'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__.
 */
export function useIerc721EnumerableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721EnumerableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc721EnumerableABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721EnumerableABI, TFunctionName>({
    abi: ierc721EnumerableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721EnumerableApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721EnumerableABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc721EnumerableABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721EnumerableABI, 'approve'>({
    abi: ierc721EnumerableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721EnumerableSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721EnumerableABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721EnumerableABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721EnumerableABI, 'safeTransferFrom'>({
    abi: ierc721EnumerableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721EnumerableSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721EnumerableABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof ierc721EnumerableABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721EnumerableABI, 'setApprovalForAll'>({
    abi: ierc721EnumerableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721EnumerableTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721EnumerableABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721EnumerableABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721EnumerableABI, 'transferFrom'>({
    abi: ierc721EnumerableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__.
 */
export function usePrepareIerc721EnumerableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721EnumerableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721EnumerableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721EnumerableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721EnumerableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721EnumerableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721EnumerableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721EnumerableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721EnumerableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721EnumerableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721EnumerableABI}__.
 */
export function useIerc721EnumerableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc721EnumerableABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ierc721EnumerableABI, ...config } as UseContractEventConfig<
    typeof ierc721EnumerableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721EnumerableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721EnumerableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721EnumerableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc721EnumerableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721EnumerableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721EnumerableABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721EnumerableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc721EnumerableABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721EnumerableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721EnumerableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721EnumerableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc721EnumerableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721Metadata(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc721MetadataABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof ierc721MetadataABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: ierc721MetadataABI, ...config } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721MetadataBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721MetadataGetApproved(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'getApproved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721MetadataIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"name"`.
 */
export function useIerc721MetadataName(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721MetadataOwnerOf(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721MetadataSupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc721MetadataSymbol(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useIerc721MetadataTokenUri(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'tokenURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'tokenURI'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721MetadataABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc721MetadataABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721MetadataABI, TFunctionName>({
    abi: ierc721MetadataABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721MetadataApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721MetadataABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc721MetadataABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721MetadataABI, 'approve'>({
    abi: ierc721MetadataABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721MetadataSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721MetadataABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721MetadataABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721MetadataABI, 'safeTransferFrom'>({
    abi: ierc721MetadataABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721MetadataSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721MetadataABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof ierc721MetadataABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721MetadataABI, 'setApprovalForAll'>({
    abi: ierc721MetadataABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721MetadataTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721MetadataABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721MetadataABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721MetadataABI, 'transferFrom'>({
    abi: ierc721MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function usePrepareIerc721MetadataWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721MetadataApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721MetadataSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721MetadataSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721MetadataTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc721MetadataABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ierc721MetadataABI, ...config } as UseContractEventConfig<
    typeof ierc721MetadataABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721MetadataApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721MetadataApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721MetadataTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataABI, 'Transfer'>)
}
