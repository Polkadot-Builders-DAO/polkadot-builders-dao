// Generated by @wagmi/cli@0.1.5 on 05/02/2023 at 09:04:28
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import { WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PBAuctionHouse
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pbAuctionHouseABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_token', internalType: 'contract IPBToken', type: 'address' },
      { name: '_treasury', internalType: 'address', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'bidder', internalType: 'address', type: 'address', indexed: false },
      { name: 'bid', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Bid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'Start',
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'bid', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAuction',
    outputs: [
      {
        name: '',
        internalType: 'struct PBAuctionHouse.AuctionState',
        type: 'tuple',
        components: [
          { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
          { name: 'startTime', internalType: 'uint256', type: 'uint256' },
          { name: 'endTime', internalType: 'uint256', type: 'uint256' },
          { name: 'currentBid', internalType: 'uint256', type: 'uint256' },
          { name: 'bidder', internalType: 'address', type: 'address' },
          { name: 'minBid', internalType: 'uint256', type: 'uint256' },
          { name: 'isFinished', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getConfig',
    outputs: [
      {
        name: '',
        internalType: 'struct PBAuctionHouse.AuctionConfig',
        type: 'tuple',
        components: [
          { name: 'treasury', internalType: 'address', type: 'address' },
          { name: 'token', internalType: 'address', type: 'address' },
          { name: 'duration', internalType: 'uint256', type: 'uint256' },
          { name: 'extendedDuration', internalType: 'uint256', type: 'uint256' },
          { name: 'minFirstBid', internalType: 'uint256', type: 'uint256' },
          { name: 'minBidIncrementPercent', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_duration', internalType: 'uint256', type: 'uint256' }],
    name: 'setDuration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_extendedDuration', internalType: 'uint256', type: 'uint256' }],
    name: 'setExtendedDuration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_minBidIncrementPercent', internalType: 'uint256', type: 'uint256' }],
    name: 'setMinBidIncrementPercent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_minFirstBid', internalType: 'uint256', type: 'uint256' }],
    name: 'setMinFirstBid',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_treasury', internalType: 'address', type: 'address' }],
    name: 'setTreasury',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'start', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

export const pbAuctionHouseAddress = '0xDC11f7E700A4c898AE5CAddB1082cFfa76512aDD' as const

export const pbAuctionHouseConfig = {
  address: pbAuctionHouseAddress,
  abi: pbAuctionHouseABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PBToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pbTokenABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_store', internalType: 'contract IPBTokenPartsStore', type: 'address' },
      { name: '_auctionHouse', internalType: 'address', type: 'address' },
      { name: '_founders', internalType: 'address', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'delegator', internalType: 'address', type: 'address', indexed: true },
      { name: 'fromDelegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'toDelegate', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'delegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'previousBalance', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'newBalance', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'auctionHouse',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'dnaMap',
    outputs: [{ name: '', internalType: 'uint96', type: 'uint96' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'founders',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'mint', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_auctionHouse', internalType: 'address', type: 'address' }],
    name: 'setAuctionHouse',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'store',
    outputs: [{ name: '', internalType: 'contract IPBTokenPartsStore', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

export const pbTokenAddress = '0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9' as const

export const pbTokenConfig = { address: pbTokenAddress, abi: pbTokenABI } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PBTokenPartsStore
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pbTokenPartsStoreABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'color',
        internalType: 'struct IPBTokenPartsStore.Color',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'color', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addBgColor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addCrown',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addDecoration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addGarland',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'color',
        internalType: 'struct IPBTokenPartsStore.Color',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'color', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addGooglesColor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addLogo1',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addLogo2',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addLogo3',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addLogo4',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'palette',
        internalType: 'struct IPBTokenPartsStore.Palette',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'primary', internalType: 'string', type: 'string' },
          { name: 'secondary', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addLogoPalette',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addShield',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'bgColors',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'color', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'bgColorsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'crowns',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'crownsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'decorations',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decorationsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'garlands',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'garlandsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getBgColor',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.Color',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'color', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getCrown',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getDecoration',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getGarland',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getGooglesColor',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.Color',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'color', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getLogo1',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getLogo2',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getLogo3',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getLogo4',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getLogoPalette',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.Palette',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'primary', internalType: 'string', type: 'string' },
          { name: 'secondary', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getShield',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'googlesColors',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'color', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'googlesColorsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'logoPalettes',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'primary', internalType: 'string', type: 'string' },
      { name: 'secondary', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'logoPalettesCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'logos1',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'logos1Count',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'logos2',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'logos2Count',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'logos3',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'logos3Count',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'logos4',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'logos4Count',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'shields',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'shieldsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

export const pbTokenPartsStoreAddress = '0x5FbDB2315678afecb367f032d93F642f64180aa3' as const

export const pbTokenPartsStoreConfig = {
  address: pbTokenPartsStoreAddress,
  abi: pbTokenPartsStoreABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link pbAuctionHouseABI}__.
 */
export function usePbAuctionHouse(config: Omit<UseContractConfig, 'abi' | 'address'> = {} as any) {
  return useContract({ abi: pbAuctionHouseABI, address: pbAuctionHouseAddress, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbAuctionHouseABI}__.
 */
export function usePbAuctionHouseRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof pbAuctionHouseABI, TFunctionName>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractRead({
    abi: pbAuctionHouseABI,
    address: pbAuctionHouseAddress,
    ...config,
  } as UseContractReadConfig<typeof pbAuctionHouseABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"getAuction"`.
 */
export function usePbAuctionHouseGetAuction(
  config: Omit<
    UseContractReadConfig<typeof pbAuctionHouseABI, 'getAuction'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbAuctionHouseABI,
    address: pbAuctionHouseAddress,
    functionName: 'getAuction',
    ...config,
  } as UseContractReadConfig<typeof pbAuctionHouseABI, 'getAuction'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"getConfig"`.
 */
export function usePbAuctionHouseGetConfig(
  config: Omit<
    UseContractReadConfig<typeof pbAuctionHouseABI, 'getConfig'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbAuctionHouseABI,
    address: pbAuctionHouseAddress,
    functionName: 'getConfig',
    ...config,
  } as UseContractReadConfig<typeof pbAuctionHouseABI, 'getConfig'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePbAuctionHouseOnErc721Received(
  config: Omit<
    UseContractReadConfig<typeof pbAuctionHouseABI, 'onERC721Received'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbAuctionHouseABI,
    address: pbAuctionHouseAddress,
    functionName: 'onERC721Received',
    ...config,
  } as UseContractReadConfig<typeof pbAuctionHouseABI, 'onERC721Received'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"owner"`.
 */
export function usePbAuctionHouseOwner(
  config: Omit<
    UseContractReadConfig<typeof pbAuctionHouseABI, 'owner'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbAuctionHouseABI,
    address: pbAuctionHouseAddress,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof pbAuctionHouseABI, 'owner'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__.
 */
export function usePbAuctionHouseWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbAuctionHouseABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof pbAuctionHouseABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbAuctionHouseABI, TFunctionName>({
    abi: pbAuctionHouseABI,
    address: pbAuctionHouseAddress,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"bid"`.
 */
export function usePbAuctionHouseBid<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbAuctionHouseABI, 'bid'>['abi'],
        'bid'
      > & { functionName?: 'bid' }
    : UseContractWriteConfig<TMode, typeof pbAuctionHouseABI, 'bid'> & {
        abi?: never
        functionName?: 'bid'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbAuctionHouseABI, 'bid'>({
    abi: pbAuctionHouseABI,
    address: pbAuctionHouseAddress,
    functionName: 'bid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePbAuctionHouseRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbAuctionHouseABI, 'renounceOwnership'>['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof pbAuctionHouseABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbAuctionHouseABI, 'renounceOwnership'>({
    abi: pbAuctionHouseABI,
    address: pbAuctionHouseAddress,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"setDuration"`.
 */
export function usePbAuctionHouseSetDuration<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbAuctionHouseABI, 'setDuration'>['abi'],
        'setDuration'
      > & { functionName?: 'setDuration' }
    : UseContractWriteConfig<TMode, typeof pbAuctionHouseABI, 'setDuration'> & {
        abi?: never
        functionName?: 'setDuration'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbAuctionHouseABI, 'setDuration'>({
    abi: pbAuctionHouseABI,
    address: pbAuctionHouseAddress,
    functionName: 'setDuration',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"setExtendedDuration"`.
 */
export function usePbAuctionHouseSetExtendedDuration<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbAuctionHouseABI, 'setExtendedDuration'>['abi'],
        'setExtendedDuration'
      > & { functionName?: 'setExtendedDuration' }
    : UseContractWriteConfig<TMode, typeof pbAuctionHouseABI, 'setExtendedDuration'> & {
        abi?: never
        functionName?: 'setExtendedDuration'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbAuctionHouseABI, 'setExtendedDuration'>({
    abi: pbAuctionHouseABI,
    address: pbAuctionHouseAddress,
    functionName: 'setExtendedDuration',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"setMinBidIncrementPercent"`.
 */
export function usePbAuctionHouseSetMinBidIncrementPercent<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbAuctionHouseABI, 'setMinBidIncrementPercent'>['abi'],
        'setMinBidIncrementPercent'
      > & { functionName?: 'setMinBidIncrementPercent' }
    : UseContractWriteConfig<TMode, typeof pbAuctionHouseABI, 'setMinBidIncrementPercent'> & {
        abi?: never
        functionName?: 'setMinBidIncrementPercent'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbAuctionHouseABI, 'setMinBidIncrementPercent'>({
    abi: pbAuctionHouseABI,
    address: pbAuctionHouseAddress,
    functionName: 'setMinBidIncrementPercent',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"setMinFirstBid"`.
 */
export function usePbAuctionHouseSetMinFirstBid<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbAuctionHouseABI, 'setMinFirstBid'>['abi'],
        'setMinFirstBid'
      > & { functionName?: 'setMinFirstBid' }
    : UseContractWriteConfig<TMode, typeof pbAuctionHouseABI, 'setMinFirstBid'> & {
        abi?: never
        functionName?: 'setMinFirstBid'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbAuctionHouseABI, 'setMinFirstBid'>({
    abi: pbAuctionHouseABI,
    address: pbAuctionHouseAddress,
    functionName: 'setMinFirstBid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"setTreasury"`.
 */
export function usePbAuctionHouseSetTreasury<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbAuctionHouseABI, 'setTreasury'>['abi'],
        'setTreasury'
      > & { functionName?: 'setTreasury' }
    : UseContractWriteConfig<TMode, typeof pbAuctionHouseABI, 'setTreasury'> & {
        abi?: never
        functionName?: 'setTreasury'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbAuctionHouseABI, 'setTreasury'>({
    abi: pbAuctionHouseABI,
    address: pbAuctionHouseAddress,
    functionName: 'setTreasury',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"start"`.
 */
export function usePbAuctionHouseStart<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbAuctionHouseABI, 'start'>['abi'],
        'start'
      > & { functionName?: 'start' }
    : UseContractWriteConfig<TMode, typeof pbAuctionHouseABI, 'start'> & {
        abi?: never
        functionName?: 'start'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbAuctionHouseABI, 'start'>({
    abi: pbAuctionHouseABI,
    address: pbAuctionHouseAddress,
    functionName: 'start',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePbAuctionHouseTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbAuctionHouseABI, 'transferOwnership'>['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof pbAuctionHouseABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbAuctionHouseABI, 'transferOwnership'>({
    abi: pbAuctionHouseABI,
    address: pbAuctionHouseAddress,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__.
 */
export function usePreparePbAuctionHouseWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, TFunctionName>,
    'abi' | 'address'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbAuctionHouseABI,
    address: pbAuctionHouseAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"bid"`.
 */
export function usePreparePbAuctionHouseBid(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'bid'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbAuctionHouseABI,
    address: pbAuctionHouseAddress,
    functionName: 'bid',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'bid'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePreparePbAuctionHouseRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'renounceOwnership'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbAuctionHouseABI,
    address: pbAuctionHouseAddress,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"setDuration"`.
 */
export function usePreparePbAuctionHouseSetDuration(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'setDuration'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbAuctionHouseABI,
    address: pbAuctionHouseAddress,
    functionName: 'setDuration',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'setDuration'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"setExtendedDuration"`.
 */
export function usePreparePbAuctionHouseSetExtendedDuration(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'setExtendedDuration'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbAuctionHouseABI,
    address: pbAuctionHouseAddress,
    functionName: 'setExtendedDuration',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'setExtendedDuration'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"setMinBidIncrementPercent"`.
 */
export function usePreparePbAuctionHouseSetMinBidIncrementPercent(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'setMinBidIncrementPercent'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbAuctionHouseABI,
    address: pbAuctionHouseAddress,
    functionName: 'setMinBidIncrementPercent',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'setMinBidIncrementPercent'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"setMinFirstBid"`.
 */
export function usePreparePbAuctionHouseSetMinFirstBid(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'setMinFirstBid'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbAuctionHouseABI,
    address: pbAuctionHouseAddress,
    functionName: 'setMinFirstBid',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'setMinFirstBid'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"setTreasury"`.
 */
export function usePreparePbAuctionHouseSetTreasury(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'setTreasury'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbAuctionHouseABI,
    address: pbAuctionHouseAddress,
    functionName: 'setTreasury',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'setTreasury'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"start"`.
 */
export function usePreparePbAuctionHouseStart(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'start'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbAuctionHouseABI,
    address: pbAuctionHouseAddress,
    functionName: 'start',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'start'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePreparePbAuctionHouseTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'transferOwnership'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbAuctionHouseABI,
    address: pbAuctionHouseAddress,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pbAuctionHouseABI}__.
 */
export function usePbAuctionHouseEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof pbAuctionHouseABI, TEventName>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractEvent({
    abi: pbAuctionHouseABI,
    address: pbAuctionHouseAddress,
    ...config,
  } as UseContractEventConfig<typeof pbAuctionHouseABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `eventName` set to `"Bid"`.
 */
export function usePbAuctionHouseBidEvent(
  config: Omit<
    UseContractEventConfig<typeof pbAuctionHouseABI, 'Bid'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pbAuctionHouseABI,
    address: pbAuctionHouseAddress,
    eventName: 'Bid',
    ...config,
  } as UseContractEventConfig<typeof pbAuctionHouseABI, 'Bid'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function usePbAuctionHouseOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof pbAuctionHouseABI, 'OwnershipTransferred'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pbAuctionHouseABI,
    address: pbAuctionHouseAddress,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof pbAuctionHouseABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `eventName` set to `"Start"`.
 */
export function usePbAuctionHouseStartEvent(
  config: Omit<
    UseContractEventConfig<typeof pbAuctionHouseABI, 'Start'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pbAuctionHouseABI,
    address: pbAuctionHouseAddress,
    eventName: 'Start',
    ...config,
  } as UseContractEventConfig<typeof pbAuctionHouseABI, 'Start'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link pbTokenABI}__.
 */
export function usePbToken(config: Omit<UseContractConfig, 'abi' | 'address'> = {} as any) {
  return useContract({ abi: pbTokenABI, address: pbTokenAddress, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__.
 */
export function usePbTokenRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, TFunctionName>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    address: pbTokenAddress,
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function usePbTokenDomainSeparator(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'DOMAIN_SEPARATOR'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'DOMAIN_SEPARATOR'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"auctionHouse"`.
 */
export function usePbTokenAuctionHouse(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'auctionHouse'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'auctionHouse',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'auctionHouse'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function usePbTokenBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'balanceOf'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"delegates"`.
 */
export function usePbTokenDelegates(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'delegates'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'delegates'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"dnaMap"`.
 */
export function usePbTokenDnaMap(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'dnaMap'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'dnaMap',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'dnaMap'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"founders"`.
 */
export function usePbTokenFounders(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'founders'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'founders',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'founders'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"getApproved"`.
 */
export function usePbTokenGetApproved(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'getApproved'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'getApproved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function usePbTokenGetPastTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'getPastTotalSupply'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'getPastTotalSupply'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function usePbTokenGetPastVotes(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'getPastVotes'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'getPastVotes'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"getVotes"`.
 */
export function usePbTokenGetVotes(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'getVotes'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'getVotes'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function usePbTokenIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'isApprovedForAll'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"name"`.
 */
export function usePbTokenName(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'name'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"nonces"`.
 */
export function usePbTokenNonces(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'nonces'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'nonces'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"owner"`.
 */
export function usePbTokenOwner(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'owner'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'owner'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"ownerOf"`.
 */
export function usePbTokenOwnerOf(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'ownerOf'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"store"`.
 */
export function usePbTokenStore(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'store'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'store',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'store'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function usePbTokenSupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'supportsInterface'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function usePbTokenSymbol(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'symbol'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function usePbTokenTokenByIndex(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'tokenByIndex'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'tokenByIndex'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function usePbTokenTokenOfOwnerByIndex(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'tokenOfOwnerByIndex'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'tokenOfOwnerByIndex'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"tokenURI"`.
 */
export function usePbTokenTokenUri(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'tokenURI'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'tokenURI'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function usePbTokenTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'totalSupply'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'totalSupply'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenABI}__.
 */
export function usePbTokenWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof pbTokenABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenABI, TFunctionName>({
    abi: pbTokenABI,
    address: pbTokenAddress,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePbTokenApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof pbTokenABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenABI, 'approve'>({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"burn"`.
 */
export function usePbTokenBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenABI, 'burn'>['abi'],
        'burn'
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<TMode, typeof pbTokenABI, 'burn'> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenABI, 'burn'>({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"delegate"`.
 */
export function usePbTokenDelegate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenABI, 'delegate'>['abi'],
        'delegate'
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<TMode, typeof pbTokenABI, 'delegate'> & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenABI, 'delegate'>({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePbTokenDelegateBySig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenABI, 'delegateBySig'>['abi'],
        'delegateBySig'
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<TMode, typeof pbTokenABI, 'delegateBySig'> & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenABI, 'delegateBySig'>({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"mint"`.
 */
export function usePbTokenMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenABI, 'mint'>['abi'],
        'mint'
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<TMode, typeof pbTokenABI, 'mint'> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenABI, 'mint'>({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePbTokenRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenABI, 'renounceOwnership'>['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof pbTokenABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenABI, 'renounceOwnership'>({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePbTokenSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof pbTokenABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenABI, 'safeTransferFrom'>({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePbTokenSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof pbTokenABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenABI, 'setApprovalForAll'>({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"setAuctionHouse"`.
 */
export function usePbTokenSetAuctionHouse<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenABI, 'setAuctionHouse'>['abi'],
        'setAuctionHouse'
      > & { functionName?: 'setAuctionHouse' }
    : UseContractWriteConfig<TMode, typeof pbTokenABI, 'setAuctionHouse'> & {
        abi?: never
        functionName?: 'setAuctionHouse'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenABI, 'setAuctionHouse'>({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'setAuctionHouse',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePbTokenTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof pbTokenABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenABI, 'transferFrom'>({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePbTokenTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenABI, 'transferOwnership'>['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof pbTokenABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenABI, 'transferOwnership'>({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenABI}__.
 */
export function usePreparePbTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenABI, TFunctionName>,
    'abi' | 'address'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenABI,
    address: pbTokenAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePreparePbTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenABI, 'approve'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"burn"`.
 */
export function usePreparePbTokenBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenABI, 'burn'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"delegate"`.
 */
export function usePreparePbTokenDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenABI, 'delegate'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePreparePbTokenDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenABI, 'delegateBySig'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenABI, 'delegateBySig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"mint"`.
 */
export function usePreparePbTokenMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenABI, 'mint'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePreparePbTokenRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenABI, 'renounceOwnership'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePreparePbTokenSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenABI, 'safeTransferFrom'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePreparePbTokenSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenABI, 'setApprovalForAll'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"setAuctionHouse"`.
 */
export function usePreparePbTokenSetAuctionHouse(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenABI, 'setAuctionHouse'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'setAuctionHouse',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenABI, 'setAuctionHouse'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePreparePbTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenABI, 'transferFrom'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePreparePbTokenTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenABI, 'transferOwnership'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenABI,
    address: pbTokenAddress,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pbTokenABI}__.
 */
export function usePbTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof pbTokenABI, TEventName>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractEvent({
    abi: pbTokenABI,
    address: pbTokenAddress,
    ...config,
  } as UseContractEventConfig<typeof pbTokenABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pbTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function usePbTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof pbTokenABI, 'Approval'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pbTokenABI,
    address: pbTokenAddress,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof pbTokenABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pbTokenABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function usePbTokenApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof pbTokenABI, 'ApprovalForAll'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pbTokenABI,
    address: pbTokenAddress,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof pbTokenABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pbTokenABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function usePbTokenDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof pbTokenABI, 'DelegateChanged'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pbTokenABI,
    address: pbTokenAddress,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof pbTokenABI, 'DelegateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pbTokenABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function usePbTokenDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof pbTokenABI, 'DelegateVotesChanged'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pbTokenABI,
    address: pbTokenAddress,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<typeof pbTokenABI, 'DelegateVotesChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pbTokenABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function usePbTokenOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof pbTokenABI, 'OwnershipTransferred'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pbTokenABI,
    address: pbTokenAddress,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof pbTokenABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pbTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function usePbTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof pbTokenABI, 'Transfer'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pbTokenABI,
    address: pbTokenAddress,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof pbTokenABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link pbTokenPartsStoreABI}__.
 */
export function usePbTokenPartsStore(
  config: Omit<UseContractConfig, 'abi' | 'address'> = {} as any,
) {
  return useContract({ abi: pbTokenPartsStoreABI, address: pbTokenPartsStoreAddress, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__.
 */
export function usePbTokenPartsStoreRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, TFunctionName>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"bgColors"`.
 */
export function usePbTokenPartsStoreBgColors(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'bgColors'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'bgColors',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'bgColors'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"bgColorsCount"`.
 */
export function usePbTokenPartsStoreBgColorsCount(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'bgColorsCount'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'bgColorsCount',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'bgColorsCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"crowns"`.
 */
export function usePbTokenPartsStoreCrowns(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'crowns'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'crowns',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'crowns'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"crownsCount"`.
 */
export function usePbTokenPartsStoreCrownsCount(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'crownsCount'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'crownsCount',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'crownsCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"decorations"`.
 */
export function usePbTokenPartsStoreDecorations(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'decorations'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'decorations',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'decorations'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"decorationsCount"`.
 */
export function usePbTokenPartsStoreDecorationsCount(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'decorationsCount'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'decorationsCount',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'decorationsCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"garlands"`.
 */
export function usePbTokenPartsStoreGarlands(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'garlands'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'garlands',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'garlands'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"garlandsCount"`.
 */
export function usePbTokenPartsStoreGarlandsCount(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'garlandsCount'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'garlandsCount',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'garlandsCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"getBgColor"`.
 */
export function usePbTokenPartsStoreGetBgColor(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getBgColor'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'getBgColor',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getBgColor'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"getCrown"`.
 */
export function usePbTokenPartsStoreGetCrown(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getCrown'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'getCrown',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getCrown'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"getDecoration"`.
 */
export function usePbTokenPartsStoreGetDecoration(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getDecoration'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'getDecoration',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getDecoration'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"getGarland"`.
 */
export function usePbTokenPartsStoreGetGarland(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getGarland'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'getGarland',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getGarland'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"getGooglesColor"`.
 */
export function usePbTokenPartsStoreGetGooglesColor(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getGooglesColor'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'getGooglesColor',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getGooglesColor'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"getLogo1"`.
 */
export function usePbTokenPartsStoreGetLogo1(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getLogo1'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'getLogo1',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getLogo1'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"getLogo2"`.
 */
export function usePbTokenPartsStoreGetLogo2(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getLogo2'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'getLogo2',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getLogo2'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"getLogo3"`.
 */
export function usePbTokenPartsStoreGetLogo3(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getLogo3'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'getLogo3',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getLogo3'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"getLogo4"`.
 */
export function usePbTokenPartsStoreGetLogo4(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getLogo4'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'getLogo4',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getLogo4'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"getLogoPalette"`.
 */
export function usePbTokenPartsStoreGetLogoPalette(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getLogoPalette'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'getLogoPalette',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getLogoPalette'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"getShield"`.
 */
export function usePbTokenPartsStoreGetShield(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getShield'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'getShield',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getShield'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"googlesColors"`.
 */
export function usePbTokenPartsStoreGooglesColors(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'googlesColors'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'googlesColors',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'googlesColors'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"googlesColorsCount"`.
 */
export function usePbTokenPartsStoreGooglesColorsCount(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'googlesColorsCount'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'googlesColorsCount',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'googlesColorsCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"logoPalettes"`.
 */
export function usePbTokenPartsStoreLogoPalettes(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logoPalettes'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'logoPalettes',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logoPalettes'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"logoPalettesCount"`.
 */
export function usePbTokenPartsStoreLogoPalettesCount(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logoPalettesCount'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'logoPalettesCount',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logoPalettesCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"logos1"`.
 */
export function usePbTokenPartsStoreLogos1(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logos1'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'logos1',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logos1'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"logos1Count"`.
 */
export function usePbTokenPartsStoreLogos1Count(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logos1Count'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'logos1Count',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logos1Count'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"logos2"`.
 */
export function usePbTokenPartsStoreLogos2(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logos2'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'logos2',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logos2'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"logos2Count"`.
 */
export function usePbTokenPartsStoreLogos2Count(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logos2Count'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'logos2Count',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logos2Count'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"logos3"`.
 */
export function usePbTokenPartsStoreLogos3(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logos3'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'logos3',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logos3'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"logos3Count"`.
 */
export function usePbTokenPartsStoreLogos3Count(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logos3Count'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'logos3Count',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logos3Count'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"logos4"`.
 */
export function usePbTokenPartsStoreLogos4(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logos4'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'logos4',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logos4'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"logos4Count"`.
 */
export function usePbTokenPartsStoreLogos4Count(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logos4Count'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'logos4Count',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logos4Count'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"owner"`.
 */
export function usePbTokenPartsStoreOwner(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'owner'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'owner'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"shields"`.
 */
export function usePbTokenPartsStoreShields(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'shields'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'shields',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'shields'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"shieldsCount"`.
 */
export function usePbTokenPartsStoreShieldsCount(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'shieldsCount'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'shieldsCount',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'shieldsCount'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__.
 */
export function usePbTokenPartsStoreWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenPartsStoreABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof pbTokenPartsStoreABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenPartsStoreABI, TFunctionName>({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addBgColor"`.
 */
export function usePbTokenPartsStoreAddBgColor<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenPartsStoreABI, 'addBgColor'>['abi'],
        'addBgColor'
      > & { functionName?: 'addBgColor' }
    : UseContractWriteConfig<TMode, typeof pbTokenPartsStoreABI, 'addBgColor'> & {
        abi?: never
        functionName?: 'addBgColor'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenPartsStoreABI, 'addBgColor'>({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'addBgColor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addCrown"`.
 */
export function usePbTokenPartsStoreAddCrown<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenPartsStoreABI, 'addCrown'>['abi'],
        'addCrown'
      > & { functionName?: 'addCrown' }
    : UseContractWriteConfig<TMode, typeof pbTokenPartsStoreABI, 'addCrown'> & {
        abi?: never
        functionName?: 'addCrown'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenPartsStoreABI, 'addCrown'>({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'addCrown',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addDecoration"`.
 */
export function usePbTokenPartsStoreAddDecoration<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenPartsStoreABI, 'addDecoration'>['abi'],
        'addDecoration'
      > & { functionName?: 'addDecoration' }
    : UseContractWriteConfig<TMode, typeof pbTokenPartsStoreABI, 'addDecoration'> & {
        abi?: never
        functionName?: 'addDecoration'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenPartsStoreABI, 'addDecoration'>({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'addDecoration',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addGarland"`.
 */
export function usePbTokenPartsStoreAddGarland<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenPartsStoreABI, 'addGarland'>['abi'],
        'addGarland'
      > & { functionName?: 'addGarland' }
    : UseContractWriteConfig<TMode, typeof pbTokenPartsStoreABI, 'addGarland'> & {
        abi?: never
        functionName?: 'addGarland'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenPartsStoreABI, 'addGarland'>({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'addGarland',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addGooglesColor"`.
 */
export function usePbTokenPartsStoreAddGooglesColor<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenPartsStoreABI, 'addGooglesColor'>['abi'],
        'addGooglesColor'
      > & { functionName?: 'addGooglesColor' }
    : UseContractWriteConfig<TMode, typeof pbTokenPartsStoreABI, 'addGooglesColor'> & {
        abi?: never
        functionName?: 'addGooglesColor'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenPartsStoreABI, 'addGooglesColor'>({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'addGooglesColor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addLogo1"`.
 */
export function usePbTokenPartsStoreAddLogo1<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenPartsStoreABI, 'addLogo1'>['abi'],
        'addLogo1'
      > & { functionName?: 'addLogo1' }
    : UseContractWriteConfig<TMode, typeof pbTokenPartsStoreABI, 'addLogo1'> & {
        abi?: never
        functionName?: 'addLogo1'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenPartsStoreABI, 'addLogo1'>({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'addLogo1',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addLogo2"`.
 */
export function usePbTokenPartsStoreAddLogo2<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenPartsStoreABI, 'addLogo2'>['abi'],
        'addLogo2'
      > & { functionName?: 'addLogo2' }
    : UseContractWriteConfig<TMode, typeof pbTokenPartsStoreABI, 'addLogo2'> & {
        abi?: never
        functionName?: 'addLogo2'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenPartsStoreABI, 'addLogo2'>({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'addLogo2',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addLogo3"`.
 */
export function usePbTokenPartsStoreAddLogo3<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenPartsStoreABI, 'addLogo3'>['abi'],
        'addLogo3'
      > & { functionName?: 'addLogo3' }
    : UseContractWriteConfig<TMode, typeof pbTokenPartsStoreABI, 'addLogo3'> & {
        abi?: never
        functionName?: 'addLogo3'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenPartsStoreABI, 'addLogo3'>({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'addLogo3',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addLogo4"`.
 */
export function usePbTokenPartsStoreAddLogo4<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenPartsStoreABI, 'addLogo4'>['abi'],
        'addLogo4'
      > & { functionName?: 'addLogo4' }
    : UseContractWriteConfig<TMode, typeof pbTokenPartsStoreABI, 'addLogo4'> & {
        abi?: never
        functionName?: 'addLogo4'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenPartsStoreABI, 'addLogo4'>({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'addLogo4',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addLogoPalette"`.
 */
export function usePbTokenPartsStoreAddLogoPalette<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenPartsStoreABI, 'addLogoPalette'>['abi'],
        'addLogoPalette'
      > & { functionName?: 'addLogoPalette' }
    : UseContractWriteConfig<TMode, typeof pbTokenPartsStoreABI, 'addLogoPalette'> & {
        abi?: never
        functionName?: 'addLogoPalette'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenPartsStoreABI, 'addLogoPalette'>({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'addLogoPalette',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addShield"`.
 */
export function usePbTokenPartsStoreAddShield<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenPartsStoreABI, 'addShield'>['abi'],
        'addShield'
      > & { functionName?: 'addShield' }
    : UseContractWriteConfig<TMode, typeof pbTokenPartsStoreABI, 'addShield'> & {
        abi?: never
        functionName?: 'addShield'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenPartsStoreABI, 'addShield'>({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'addShield',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePbTokenPartsStoreRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenPartsStoreABI, 'renounceOwnership'>['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof pbTokenPartsStoreABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenPartsStoreABI, 'renounceOwnership'>({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePbTokenPartsStoreTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenPartsStoreABI, 'transferOwnership'>['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof pbTokenPartsStoreABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenPartsStoreABI, 'transferOwnership'>({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__.
 */
export function usePreparePbTokenPartsStoreWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, TFunctionName>,
    'abi' | 'address'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addBgColor"`.
 */
export function usePreparePbTokenPartsStoreAddBgColor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addBgColor'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'addBgColor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addBgColor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addCrown"`.
 */
export function usePreparePbTokenPartsStoreAddCrown(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addCrown'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'addCrown',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addCrown'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addDecoration"`.
 */
export function usePreparePbTokenPartsStoreAddDecoration(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addDecoration'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'addDecoration',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addDecoration'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addGarland"`.
 */
export function usePreparePbTokenPartsStoreAddGarland(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addGarland'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'addGarland',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addGarland'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addGooglesColor"`.
 */
export function usePreparePbTokenPartsStoreAddGooglesColor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addGooglesColor'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'addGooglesColor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addGooglesColor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addLogo1"`.
 */
export function usePreparePbTokenPartsStoreAddLogo1(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addLogo1'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'addLogo1',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addLogo1'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addLogo2"`.
 */
export function usePreparePbTokenPartsStoreAddLogo2(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addLogo2'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'addLogo2',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addLogo2'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addLogo3"`.
 */
export function usePreparePbTokenPartsStoreAddLogo3(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addLogo3'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'addLogo3',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addLogo3'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addLogo4"`.
 */
export function usePreparePbTokenPartsStoreAddLogo4(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addLogo4'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'addLogo4',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addLogo4'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addLogoPalette"`.
 */
export function usePreparePbTokenPartsStoreAddLogoPalette(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addLogoPalette'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'addLogoPalette',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addLogoPalette'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addShield"`.
 */
export function usePreparePbTokenPartsStoreAddShield(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addShield'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'addShield',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addShield'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePreparePbTokenPartsStoreRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'renounceOwnership'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePreparePbTokenPartsStoreTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'transferOwnership'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pbTokenPartsStoreABI}__.
 */
export function usePbTokenPartsStoreEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof pbTokenPartsStoreABI, TEventName>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractEvent({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    ...config,
  } as UseContractEventConfig<typeof pbTokenPartsStoreABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function usePbTokenPartsStoreOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof pbTokenPartsStoreABI, 'OwnershipTransferred'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pbTokenPartsStoreABI,
    address: pbTokenPartsStoreAddress,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof pbTokenPartsStoreABI, 'OwnershipTransferred'>)
}
