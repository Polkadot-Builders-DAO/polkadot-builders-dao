// Generated by @wagmi/cli@1.0.0 on 14/05/2023 at 00:24:33
import {
  useNetwork,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  Address,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import { ReadContractResult, WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AuctionHouse
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export const auctionHouseABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_token', internalType: 'contract ICrest', type: 'address' },
      { name: '_treasury', internalType: 'address', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'bidder', internalType: 'address', type: 'address', indexed: false },
      { name: 'bid', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Bid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'Start',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused',
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'bid', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAuction',
    outputs: [
      {
        name: '',
        internalType: 'struct AuctionHouse.AuctionState',
        type: 'tuple',
        components: [
          { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
          { name: 'startTime', internalType: 'uint256', type: 'uint256' },
          { name: 'endTime', internalType: 'uint256', type: 'uint256' },
          { name: 'currentBid', internalType: 'uint256', type: 'uint256' },
          { name: 'bidder', internalType: 'address', type: 'address' },
          { name: 'minBid', internalType: 'uint256', type: 'uint256' },
          { name: 'isFinished', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getConfig',
    outputs: [
      {
        name: '',
        internalType: 'struct AuctionHouse.AuctionConfig',
        type: 'tuple',
        components: [
          { name: 'treasury', internalType: 'address', type: 'address' },
          { name: 'token', internalType: 'address', type: 'address' },
          { name: 'glmr', internalType: 'address', type: 'address' },
          { name: 'duration', internalType: 'uint256', type: 'uint256' },
          { name: 'extendedDuration', internalType: 'uint256', type: 'uint256' },
          { name: 'minFirstBid', internalType: 'uint256', type: 'uint256' },
          { name: 'minBidIncrementPercent', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'glmr',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'pause', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_duration', internalType: 'uint256', type: 'uint256' }],
    name: 'setDuration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_extendedDuration', internalType: 'uint256', type: 'uint256' }],
    name: 'setExtendedDuration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_glmr', internalType: 'contract IERC20', type: 'address' }],
    name: 'setGLMR',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_minBidIncrementPercent', internalType: 'uint256', type: 'uint256' }],
    name: 'setMinBidIncrementPercent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_minFirstBid', internalType: 'uint256', type: 'uint256' }],
    name: 'setMinFirstBid',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_treasury', internalType: 'address', type: 'address' }],
    name: 'setTreasury',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'start', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'treasury',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'unpause', outputs: [] },
] as const

/**
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export const auctionHouseAddress = {
  1284: '0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87',
  1287: '0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87',
  31337: '0x4631BCAbD6dF18D94796344963cB60d44a4136b6',
} as const

/**
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export const auctionHouseConfig = { address: auctionHouseAddress, abi: auctionHouseABI } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Crest
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export const crestABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_store', internalType: 'address', type: 'address' },
      { name: '_auctionHouse', internalType: 'address', type: 'address' },
      { name: '_founders', internalType: 'address', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'delegator', internalType: 'address', type: 'address', indexed: true },
      { name: 'fromDelegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'toDelegate', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'delegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'previousBalance', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'newBalance', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'auctionHouse',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'contractURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'dnaMap',
    outputs: [{ name: '', internalType: 'uint96', type: 'uint96' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'founders',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'mint', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'dna', internalType: 'uint96', type: 'uint96' },
    ],
    name: 'mintSpecific',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_auctionHouse', internalType: 'address', type: 'address' }],
    name: 'setAuctionHouse',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_uri', internalType: 'string', type: 'string' }],
    name: 'setContractURI',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_founders', internalType: 'address', type: 'address' }],
    name: 'setFounders',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'store',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

/**
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export const crestAddress = {
  1284: '0x8417F77904a86436223942a516f00F8aDF933B70',
  1287: '0x8417F77904a86436223942a516f00F8aDF933B70',
  31337: '0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9',
} as const

/**
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export const crestConfig = { address: crestAddress, abi: crestABI } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DaoGovernor
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export const daoGovernorABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: '_token', internalType: 'contract IVotes', type: 'address' }],
  },
  { type: 'error', inputs: [], name: 'Empty' },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'ProposalCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'proposer', internalType: 'address', type: 'address', indexed: false },
      { name: 'targets', internalType: 'address[]', type: 'address[]', indexed: false },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
      { name: 'signatures', internalType: 'string[]', type: 'string[]', indexed: false },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]', indexed: false },
      { name: 'startBlock', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'endBlock', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'description', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'ProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'ProposalExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oldProposalThreshold', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'newProposalThreshold', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ProposalThresholdSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oldQuorumNumerator', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'newQuorumNumerator', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'QuorumNumeratorUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'voter', internalType: 'address', type: 'address', indexed: true },
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      { name: 'weight', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'reason', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'VoteCast',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'voter', internalType: 'address', type: 'address', indexed: true },
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      { name: 'weight', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'reason', internalType: 'string', type: 'string', indexed: false },
      { name: 'params', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'VoteCastWithParams',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oldVotingDelay', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'newVotingDelay', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'VotingDelaySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oldVotingPeriod', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'newVotingPeriod', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'VotingPeriodSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'BALLOT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'COUNTING_MODE',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'EXTENDED_BALLOT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'castVote',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteBySig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'castVoteWithReason',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'castVoteWithReasonAndParams',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteWithReasonAndParamsBySig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execute',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'getVotesWithParams',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasVoted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'hashProposal',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalDeadline',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalSnapshot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proposalThreshold',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalVotes',
    outputs: [
      { name: 'againstVotes', internalType: 'uint256', type: 'uint256' },
      { name: 'forVotes', internalType: 'uint256', type: 'uint256' },
      { name: 'abstainVotes', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'description', internalType: 'string', type: 'string' },
    ],
    name: 'propose',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'quorum',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'quorumDenominator',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'quorumNumerator',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'quorumNumerator',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'relay',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newProposalThreshold', internalType: 'uint256', type: 'uint256' }],
    name: 'setProposalThreshold',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newVotingDelay', internalType: 'uint256', type: 'uint256' }],
    name: 'setVotingDelay',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newVotingPeriod', internalType: 'uint256', type: 'uint256' }],
    name: 'setVotingPeriod',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'state',
    outputs: [{ name: '', internalType: 'enum IGovernor.ProposalState', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token',
    outputs: [{ name: '', internalType: 'contract IVotes', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newQuorumNumerator', internalType: 'uint256', type: 'uint256' }],
    name: 'updateQuorumNumerator',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingDelay',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingPeriod',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

/**
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export const daoGovernorAddress = {
  1284: '0x311346FDe706FEBAB09cCEd059A05566248b1351',
  1287: '0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E',
  31337: '0x720472c8ce72c2A2D711333e064ABD3E6BbEAdd3',
} as const

/**
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export const daoGovernorConfig = { address: daoGovernorAddress, abi: daoGovernorABI } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PartsStore
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export const partsStoreABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'color',
        internalType: 'struct IPartsStore.Color',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'color', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addBgColor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addClass',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addCrown',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addDoodad',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addGarland',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'color',
        internalType: 'struct IPartsStore.Color',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'color', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addNogglesColor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'palette',
        internalType: 'struct IPartsStore.Palette',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'primary', internalType: 'string', type: 'string' },
          { name: 'secondary', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addQuadrantPalette',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addRep',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addShield',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addSkill',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addTrait',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'bgColors',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'color', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'bgColorsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'classes',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'classesCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'crowns',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'crownsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'doodads',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'doodadsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'garlands',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'garlandsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAllParts',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.AllParts',
        type: 'tuple',
        components: [
          { name: 'bgColors', internalType: 'string[]', type: 'string[]' },
          { name: 'nogglesColors', internalType: 'string[]', type: 'string[]' },
          { name: 'crowns', internalType: 'string[]', type: 'string[]' },
          { name: 'doodads', internalType: 'string[]', type: 'string[]' },
          { name: 'garlands', internalType: 'string[]', type: 'string[]' },
          { name: 'shields', internalType: 'string[]', type: 'string[]' },
          { name: 'quadrantPalettes', internalType: 'string[]', type: 'string[]' },
          { name: 'reps', internalType: 'string[]', type: 'string[]' },
          { name: 'skills', internalType: 'string[]', type: 'string[]' },
          { name: 'classes', internalType: 'string[]', type: 'string[]' },
          { name: 'traits', internalType: 'string[]', type: 'string[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getBgColor',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.Color',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'color', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getClass',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getCrown',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getDoodad',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getGarland',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getNogglesColor',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.Color',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'color', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getQuadrantPalette',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.Palette',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'primary', internalType: 'string', type: 'string' },
          { name: 'secondary', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getRep',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getShield',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getSkill',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getTrait',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'lock', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'locked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'nogglesColors',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'color', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nogglesColorsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'quadrantPalettes',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'primary', internalType: 'string', type: 'string' },
      { name: 'secondary', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'quadrantPalettesCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'reps',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'repsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'shields',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'shieldsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'skills',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'skillsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'traits',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'traitsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

/**
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export const partsStoreAddress = {
  1284: '0x8162876a0bD2bE9d48a2023d20d5955d51eC055D',
  1287: '0x8162876a0bD2bE9d48a2023d20d5955d51eC055D',
  31337: '0x5FbDB2315678afecb367f032d93F642f64180aa3',
} as const

/**
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export const partsStoreConfig = { address: partsStoreAddress, abi: partsStoreABI } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ICrest
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iCrestABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'mint', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'dna', internalType: 'uint96', type: 'uint96' },
    ],
    name: 'mintSpecific',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPartsStore
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPartsStoreABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'color',
        internalType: 'struct IPartsStore.Color',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'color', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addBgColor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addClass',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addCrown',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addDoodad',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addGarland',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'color',
        internalType: 'struct IPartsStore.Color',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'color', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addNogglesColor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'palette',
        internalType: 'struct IPartsStore.Palette',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'primary', internalType: 'string', type: 'string' },
          { name: 'secondary', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addQuadrantPalette',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addRep',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addShield',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addSkill',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addTrait',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'bgColorsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'classesCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'crownsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'doodadsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'garlandsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'getAllParts',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.AllParts',
        type: 'tuple',
        components: [
          { name: 'bgColors', internalType: 'string[]', type: 'string[]' },
          { name: 'nogglesColors', internalType: 'string[]', type: 'string[]' },
          { name: 'crowns', internalType: 'string[]', type: 'string[]' },
          { name: 'doodads', internalType: 'string[]', type: 'string[]' },
          { name: 'garlands', internalType: 'string[]', type: 'string[]' },
          { name: 'shields', internalType: 'string[]', type: 'string[]' },
          { name: 'quadrantPalettes', internalType: 'string[]', type: 'string[]' },
          { name: 'reps', internalType: 'string[]', type: 'string[]' },
          { name: 'skills', internalType: 'string[]', type: 'string[]' },
          { name: 'classes', internalType: 'string[]', type: 'string[]' },
          { name: 'traits', internalType: 'string[]', type: 'string[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getBgColor',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.Color',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'color', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getClass',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getCrown',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getDoodad',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getGarland',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getNogglesColor',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.Color',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'color', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getQuadrantPalette',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.Palette',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'primary', internalType: 'string', type: 'string' },
          { name: 'secondary', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getRep',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getShield',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getSkill',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getTrait',
    outputs: [
      {
        name: '',
        internalType: 'struct IPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nogglesColorsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'quadrantPalettesCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'repsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'shieldsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'skillsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'traitsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DnaManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0xD9A1161E19E4B0811E77EDEAe7141b0f66E62280)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0xD9A1161E19E4B0811E77EDEAe7141b0f66E62280)
 * -
 */
export const dnaManagerABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'decomposedDna',
        internalType: 'struct DnaManager.DecomposedDna',
        type: 'tuple',
        components: [
          { name: 'bgColorId', internalType: 'uint8', type: 'uint8' },
          { name: 'nogglesColorId', internalType: 'uint8', type: 'uint8' },
          { name: 'crownId', internalType: 'uint8', type: 'uint8' },
          { name: 'doodadId', internalType: 'uint8', type: 'uint8' },
          { name: 'garlandId', internalType: 'uint8', type: 'uint8' },
          { name: 'shieldId', internalType: 'uint8', type: 'uint8' },
          { name: 'quadrantPalette1Id', internalType: 'uint8', type: 'uint8' },
          { name: 'quadrantPalette2Id', internalType: 'uint8', type: 'uint8' },
          { name: 'repId', internalType: 'uint8', type: 'uint8' },
          { name: 'skillId', internalType: 'uint8', type: 'uint8' },
          { name: 'classId', internalType: 'uint8', type: 'uint8' },
          { name: 'traitId', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
    name: 'composeDna',
    outputs: [{ name: '', internalType: 'uint96', type: 'uint96' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'dna', internalType: 'uint96', type: 'uint96' }],
    name: 'decomposeDna',
    outputs: [
      {
        name: '',
        internalType: 'struct DnaManager.DecomposedDna',
        type: 'tuple',
        components: [
          { name: 'bgColorId', internalType: 'uint8', type: 'uint8' },
          { name: 'nogglesColorId', internalType: 'uint8', type: 'uint8' },
          { name: 'crownId', internalType: 'uint8', type: 'uint8' },
          { name: 'doodadId', internalType: 'uint8', type: 'uint8' },
          { name: 'garlandId', internalType: 'uint8', type: 'uint8' },
          { name: 'shieldId', internalType: 'uint8', type: 'uint8' },
          { name: 'quadrantPalette1Id', internalType: 'uint8', type: 'uint8' },
          { name: 'quadrantPalette2Id', internalType: 'uint8', type: 'uint8' },
          { name: 'repId', internalType: 'uint8', type: 'uint8' },
          { name: 'skillId', internalType: 'uint8', type: 'uint8' },
          { name: 'classId', internalType: 'uint8', type: 'uint8' },
          { name: 'traitId', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'storeAddress', internalType: 'address', type: 'address' },
      { name: 'seed', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'generateDna',
    outputs: [{ name: '', internalType: 'uint96', type: 'uint96' }],
  },
] as const

/**
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0xD9A1161E19E4B0811E77EDEAe7141b0f66E62280)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0xD9A1161E19E4B0811E77EDEAe7141b0f66E62280)
 * -
 */
export const dnaManagerAddress = {
  1284: '0xD9A1161E19E4B0811E77EDEAe7141b0f66E62280',
  1287: '0xD9A1161E19E4B0811E77EDEAe7141b0f66E62280',
  31337: '0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512',
} as const

/**
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0xD9A1161E19E4B0811E77EDEAe7141b0f66E62280)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0xD9A1161E19E4B0811E77EDEAe7141b0f66E62280)
 * -
 */
export const dnaManagerConfig = { address: dnaManagerAddress, abi: dnaManagerABI } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TokenGenerator
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x319D3c22f2eB7F07f12C9ae1b30AB37fa5f00Ebf)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x319D3c22f2eB7F07f12C9ae1b30AB37fa5f00Ebf)
 * -
 */
export const tokenGeneratorABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'storeAddress', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'dna', internalType: 'uint96', type: 'uint96' },
    ],
    name: 'generateTokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'storeAddress', internalType: 'address', type: 'address' },
      { name: 'dna', internalType: 'uint96', type: 'uint96' },
    ],
    name: 'getImageParts',
    outputs: [
      {
        name: '',
        internalType: 'struct TokenGenerator.ImageParts',
        type: 'tuple',
        components: [
          {
            name: 'bgColor',
            internalType: 'struct IPartsStore.Color',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'color', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'nogglesColor',
            internalType: 'struct IPartsStore.Color',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'color', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'crown',
            internalType: 'struct IPartsStore.ImagePart',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'svg', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'doodads',
            internalType: 'struct IPartsStore.ImagePart',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'svg', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'garland',
            internalType: 'struct IPartsStore.ImagePart',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'svg', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'shield',
            internalType: 'struct IPartsStore.ImagePart',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'svg', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'quadrantPalette1',
            internalType: 'struct IPartsStore.Palette',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'primary', internalType: 'string', type: 'string' },
              { name: 'secondary', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'quadrantPalette2',
            internalType: 'struct IPartsStore.Palette',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'primary', internalType: 'string', type: 'string' },
              { name: 'secondary', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'rep',
            internalType: 'struct IPartsStore.ImagePart',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'svg', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'skill',
            internalType: 'struct IPartsStore.ImagePart',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'svg', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'class',
            internalType: 'struct IPartsStore.ImagePart',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'svg', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'trait',
            internalType: 'struct IPartsStore.ImagePart',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'svg', internalType: 'string', type: 'string' },
            ],
          },
        ],
      },
    ],
  },
] as const

/**
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x319D3c22f2eB7F07f12C9ae1b30AB37fa5f00Ebf)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x319D3c22f2eB7F07f12C9ae1b30AB37fa5f00Ebf)
 * -
 */
export const tokenGeneratorAddress = {
  1284: '0x319D3c22f2eB7F07f12C9ae1b30AB37fa5f00Ebf',
  1287: '0x319D3c22f2eB7F07f12C9ae1b30AB37fa5f00Ebf',
  31337: '0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0',
} as const

/**
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x319D3c22f2eB7F07f12C9ae1b30AB37fa5f00Ebf)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x319D3c22f2eB7F07f12C9ae1b30AB37fa5f00Ebf)
 * -
 */
export const tokenGeneratorConfig = {
  address: tokenGeneratorAddress,
  abi: tokenGeneratorABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Governor
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const governorABI = [
  { type: 'error', inputs: [], name: 'Empty' },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'ProposalCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'proposer', internalType: 'address', type: 'address', indexed: false },
      { name: 'targets', internalType: 'address[]', type: 'address[]', indexed: false },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
      { name: 'signatures', internalType: 'string[]', type: 'string[]', indexed: false },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]', indexed: false },
      { name: 'startBlock', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'endBlock', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'description', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'ProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'ProposalExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'voter', internalType: 'address', type: 'address', indexed: true },
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      { name: 'weight', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'reason', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'VoteCast',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'voter', internalType: 'address', type: 'address', indexed: true },
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      { name: 'weight', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'reason', internalType: 'string', type: 'string', indexed: false },
      { name: 'params', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'VoteCastWithParams',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'BALLOT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'COUNTING_MODE',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'EXTENDED_BALLOT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'castVote',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteBySig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'castVoteWithReason',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'castVoteWithReasonAndParams',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteWithReasonAndParamsBySig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execute',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'getVotesWithParams',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasVoted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'hashProposal',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalDeadline',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalSnapshot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proposalThreshold',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'description', internalType: 'string', type: 'string' },
    ],
    name: 'propose',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'quorum',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'relay',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'state',
    outputs: [{ name: '', internalType: 'enum IGovernor.ProposalState', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingDelay',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingPeriod',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IGovernor
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iGovernorABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'ProposalCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'proposer', internalType: 'address', type: 'address', indexed: false },
      { name: 'targets', internalType: 'address[]', type: 'address[]', indexed: false },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
      { name: 'signatures', internalType: 'string[]', type: 'string[]', indexed: false },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]', indexed: false },
      { name: 'startBlock', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'endBlock', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'description', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'ProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'ProposalExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'voter', internalType: 'address', type: 'address', indexed: true },
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      { name: 'weight', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'reason', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'VoteCast',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'voter', internalType: 'address', type: 'address', indexed: true },
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      { name: 'weight', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'reason', internalType: 'string', type: 'string', indexed: false },
      { name: 'params', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'VoteCastWithParams',
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'COUNTING_MODE',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'castVote',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteBySig',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'castVoteWithReason',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'castVoteWithReasonAndParams',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteWithReasonAndParamsBySig',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execute',
    outputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'getVotesWithParams',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasVoted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'hashProposal',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalDeadline',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalSnapshot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'description', internalType: 'string', type: 'string' },
    ],
    name: 'propose',
    outputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'quorum',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'state',
    outputs: [{ name: '', internalType: 'enum IGovernor.ProposalState', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingDelay',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingPeriod',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Pausable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pausableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Paused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }],
    name: 'Unpaused',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GovernorCountingSimple
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const governorCountingSimpleABI = [
  { type: 'error', inputs: [], name: 'Empty' },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'ProposalCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'proposer', internalType: 'address', type: 'address', indexed: false },
      { name: 'targets', internalType: 'address[]', type: 'address[]', indexed: false },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
      { name: 'signatures', internalType: 'string[]', type: 'string[]', indexed: false },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]', indexed: false },
      { name: 'startBlock', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'endBlock', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'description', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'ProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'ProposalExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'voter', internalType: 'address', type: 'address', indexed: true },
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      { name: 'weight', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'reason', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'VoteCast',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'voter', internalType: 'address', type: 'address', indexed: true },
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      { name: 'weight', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'reason', internalType: 'string', type: 'string', indexed: false },
      { name: 'params', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'VoteCastWithParams',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'BALLOT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'COUNTING_MODE',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'EXTENDED_BALLOT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'castVote',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteBySig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'castVoteWithReason',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'castVoteWithReasonAndParams',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteWithReasonAndParamsBySig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execute',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'getVotesWithParams',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasVoted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'hashProposal',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalDeadline',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalSnapshot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proposalThreshold',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalVotes',
    outputs: [
      { name: 'againstVotes', internalType: 'uint256', type: 'uint256' },
      { name: 'forVotes', internalType: 'uint256', type: 'uint256' },
      { name: 'abstainVotes', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'description', internalType: 'string', type: 'string' },
    ],
    name: 'propose',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'quorum',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'relay',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'state',
    outputs: [{ name: '', internalType: 'enum IGovernor.ProposalState', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingDelay',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingPeriod',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GovernorSettings
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const governorSettingsABI = [
  { type: 'error', inputs: [], name: 'Empty' },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'ProposalCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'proposer', internalType: 'address', type: 'address', indexed: false },
      { name: 'targets', internalType: 'address[]', type: 'address[]', indexed: false },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
      { name: 'signatures', internalType: 'string[]', type: 'string[]', indexed: false },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]', indexed: false },
      { name: 'startBlock', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'endBlock', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'description', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'ProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'ProposalExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oldProposalThreshold', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'newProposalThreshold', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ProposalThresholdSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'voter', internalType: 'address', type: 'address', indexed: true },
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      { name: 'weight', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'reason', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'VoteCast',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'voter', internalType: 'address', type: 'address', indexed: true },
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      { name: 'weight', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'reason', internalType: 'string', type: 'string', indexed: false },
      { name: 'params', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'VoteCastWithParams',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oldVotingDelay', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'newVotingDelay', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'VotingDelaySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oldVotingPeriod', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'newVotingPeriod', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'VotingPeriodSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'BALLOT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'COUNTING_MODE',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'EXTENDED_BALLOT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'castVote',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteBySig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'castVoteWithReason',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'castVoteWithReasonAndParams',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteWithReasonAndParamsBySig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execute',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'getVotesWithParams',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasVoted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'hashProposal',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalDeadline',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalSnapshot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proposalThreshold',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'description', internalType: 'string', type: 'string' },
    ],
    name: 'propose',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'quorum',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'relay',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newProposalThreshold', internalType: 'uint256', type: 'uint256' }],
    name: 'setProposalThreshold',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newVotingDelay', internalType: 'uint256', type: 'uint256' }],
    name: 'setVotingDelay',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newVotingPeriod', internalType: 'uint256', type: 'uint256' }],
    name: 'setVotingPeriod',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'state',
    outputs: [{ name: '', internalType: 'enum IGovernor.ProposalState', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingDelay',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingPeriod',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GovernorVotes
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const governorVotesABI = [
  { type: 'error', inputs: [], name: 'Empty' },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'ProposalCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'proposer', internalType: 'address', type: 'address', indexed: false },
      { name: 'targets', internalType: 'address[]', type: 'address[]', indexed: false },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
      { name: 'signatures', internalType: 'string[]', type: 'string[]', indexed: false },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]', indexed: false },
      { name: 'startBlock', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'endBlock', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'description', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'ProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'ProposalExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'voter', internalType: 'address', type: 'address', indexed: true },
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      { name: 'weight', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'reason', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'VoteCast',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'voter', internalType: 'address', type: 'address', indexed: true },
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      { name: 'weight', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'reason', internalType: 'string', type: 'string', indexed: false },
      { name: 'params', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'VoteCastWithParams',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'BALLOT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'COUNTING_MODE',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'EXTENDED_BALLOT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'castVote',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteBySig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'castVoteWithReason',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'castVoteWithReasonAndParams',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteWithReasonAndParamsBySig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execute',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'getVotesWithParams',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasVoted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'hashProposal',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalDeadline',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalSnapshot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proposalThreshold',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'description', internalType: 'string', type: 'string' },
    ],
    name: 'propose',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'quorum',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'relay',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'state',
    outputs: [{ name: '', internalType: 'enum IGovernor.ProposalState', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token',
    outputs: [{ name: '', internalType: 'contract IVotes', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingDelay',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingPeriod',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GovernorVotesQuorumFraction
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const governorVotesQuorumFractionABI = [
  { type: 'error', inputs: [], name: 'Empty' },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'ProposalCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'proposer', internalType: 'address', type: 'address', indexed: false },
      { name: 'targets', internalType: 'address[]', type: 'address[]', indexed: false },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
      { name: 'signatures', internalType: 'string[]', type: 'string[]', indexed: false },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]', indexed: false },
      { name: 'startBlock', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'endBlock', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'description', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'ProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'ProposalExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oldQuorumNumerator', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'newQuorumNumerator', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'QuorumNumeratorUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'voter', internalType: 'address', type: 'address', indexed: true },
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      { name: 'weight', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'reason', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'VoteCast',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'voter', internalType: 'address', type: 'address', indexed: true },
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      { name: 'weight', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'reason', internalType: 'string', type: 'string', indexed: false },
      { name: 'params', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'VoteCastWithParams',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'BALLOT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'COUNTING_MODE',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'EXTENDED_BALLOT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'castVote',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteBySig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'castVoteWithReason',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'castVoteWithReasonAndParams',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'support', internalType: 'uint8', type: 'uint8' },
      { name: 'reason', internalType: 'string', type: 'string' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteWithReasonAndParamsBySig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'execute',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'params', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'getVotesWithParams',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasVoted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'hashProposal',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalDeadline',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalSnapshot',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proposalThreshold',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'targets', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'description', internalType: 'string', type: 'string' },
    ],
    name: 'propose',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'quorum',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'quorumDenominator',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'quorumNumerator',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'quorumNumerator',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'relay',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'state',
    outputs: [{ name: '', internalType: 'enum IGovernor.ProposalState', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token',
    outputs: [{ name: '', internalType: 'contract IVotes', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newQuorumNumerator', internalType: 'uint256', type: 'uint256' }],
    name: 'updateQuorumNumerator',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingDelay',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'votingPeriod',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IVotes
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iVotesABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'delegator', internalType: 'address', type: 'address', indexed: true },
      { name: 'fromDelegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'toDelegate', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'delegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'previousBalance', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'newBalance', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Votes
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const votesABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'delegator', internalType: 'address', type: 'address', indexed: true },
      { name: 'fromDelegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'toDelegate', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'delegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'previousBalance', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'newBalance', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1155Receiver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1155ReceiverABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Receiver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ReceiverABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DoubleEndedQueue
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const doubleEndedQueueABI = [
  { type: 'error', inputs: [], name: 'Empty' },
  { type: 'error', inputs: [], name: 'OutOfBounds' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721Burnable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721BurnableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721Enumerable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721EnumerableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721Votes
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721VotesABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'delegator', internalType: 'address', type: 'address', indexed: true },
      { name: 'fromDelegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'toDelegate', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'delegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'previousBalance', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'newBalance', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Enumerable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721EnumerableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721MetadataABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link auctionHouseABI}__.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function useAuctionHouseRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof auctionHouseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof auctionHouseABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    ...config,
  } as UseContractReadConfig<typeof auctionHouseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"getAuction"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function useAuctionHouseGetAuction<
  TFunctionName extends 'getAuction',
  TSelectData = ReadContractResult<typeof auctionHouseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof auctionHouseABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    functionName: 'getAuction',
    ...config,
  } as UseContractReadConfig<typeof auctionHouseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"getConfig"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function useAuctionHouseGetConfig<
  TFunctionName extends 'getConfig',
  TSelectData = ReadContractResult<typeof auctionHouseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof auctionHouseABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    functionName: 'getConfig',
    ...config,
  } as UseContractReadConfig<typeof auctionHouseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"glmr"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function useAuctionHouseGlmr<
  TFunctionName extends 'glmr',
  TSelectData = ReadContractResult<typeof auctionHouseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof auctionHouseABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    functionName: 'glmr',
    ...config,
  } as UseContractReadConfig<typeof auctionHouseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"onERC721Received"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function useAuctionHouseOnErc721Received<
  TFunctionName extends 'onERC721Received',
  TSelectData = ReadContractResult<typeof auctionHouseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof auctionHouseABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    functionName: 'onERC721Received',
    ...config,
  } as UseContractReadConfig<typeof auctionHouseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"owner"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function useAuctionHouseOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof auctionHouseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof auctionHouseABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof auctionHouseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"paused"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function useAuctionHousePaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof auctionHouseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof auctionHouseABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    functionName: 'paused',
    ...config,
  } as UseContractReadConfig<typeof auctionHouseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"treasury"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function useAuctionHouseTreasury<
  TFunctionName extends 'treasury',
  TSelectData = ReadContractResult<typeof auctionHouseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof auctionHouseABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    functionName: 'treasury',
    ...config,
  } as UseContractReadConfig<typeof auctionHouseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link auctionHouseABI}__.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function useAuctionHouseWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof auctionHouseAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof auctionHouseABI, string>['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof auctionHouseABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof auctionHouseABI, TFunctionName, TMode>({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"bid"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function useAuctionHouseBid<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof auctionHouseAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof auctionHouseABI, 'bid'>['request']['abi'],
        'bid',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'bid' }
    : UseContractWriteConfig<typeof auctionHouseABI, 'bid', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'bid'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof auctionHouseABI, 'bid', TMode>({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    functionName: 'bid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"pause"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function useAuctionHousePause<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof auctionHouseAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof auctionHouseABI, 'pause'>['request']['abi'],
        'pause',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'pause' }
    : UseContractWriteConfig<typeof auctionHouseABI, 'pause', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'pause'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof auctionHouseABI, 'pause', TMode>({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    functionName: 'pause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function useAuctionHouseRenounceOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof auctionHouseAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof auctionHouseABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof auctionHouseABI, 'renounceOwnership', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof auctionHouseABI, 'renounceOwnership', TMode>({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"setDuration"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function useAuctionHouseSetDuration<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof auctionHouseAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof auctionHouseABI, 'setDuration'>['request']['abi'],
        'setDuration',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setDuration' }
    : UseContractWriteConfig<typeof auctionHouseABI, 'setDuration', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setDuration'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof auctionHouseABI, 'setDuration', TMode>({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    functionName: 'setDuration',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"setExtendedDuration"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function useAuctionHouseSetExtendedDuration<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof auctionHouseAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof auctionHouseABI, 'setExtendedDuration'>['request']['abi'],
        'setExtendedDuration',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setExtendedDuration' }
    : UseContractWriteConfig<typeof auctionHouseABI, 'setExtendedDuration', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setExtendedDuration'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof auctionHouseABI, 'setExtendedDuration', TMode>({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    functionName: 'setExtendedDuration',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"setGLMR"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function useAuctionHouseSetGlmr<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof auctionHouseAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof auctionHouseABI, 'setGLMR'>['request']['abi'],
        'setGLMR',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setGLMR' }
    : UseContractWriteConfig<typeof auctionHouseABI, 'setGLMR', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setGLMR'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof auctionHouseABI, 'setGLMR', TMode>({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    functionName: 'setGLMR',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"setMinBidIncrementPercent"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function useAuctionHouseSetMinBidIncrementPercent<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof auctionHouseAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof auctionHouseABI,
          'setMinBidIncrementPercent'
        >['request']['abi'],
        'setMinBidIncrementPercent',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setMinBidIncrementPercent' }
    : UseContractWriteConfig<typeof auctionHouseABI, 'setMinBidIncrementPercent', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setMinBidIncrementPercent'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof auctionHouseABI, 'setMinBidIncrementPercent', TMode>({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    functionName: 'setMinBidIncrementPercent',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"setMinFirstBid"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function useAuctionHouseSetMinFirstBid<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof auctionHouseAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof auctionHouseABI, 'setMinFirstBid'>['request']['abi'],
        'setMinFirstBid',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setMinFirstBid' }
    : UseContractWriteConfig<typeof auctionHouseABI, 'setMinFirstBid', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setMinFirstBid'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof auctionHouseABI, 'setMinFirstBid', TMode>({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    functionName: 'setMinFirstBid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"setTreasury"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function useAuctionHouseSetTreasury<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof auctionHouseAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof auctionHouseABI, 'setTreasury'>['request']['abi'],
        'setTreasury',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setTreasury' }
    : UseContractWriteConfig<typeof auctionHouseABI, 'setTreasury', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setTreasury'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof auctionHouseABI, 'setTreasury', TMode>({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    functionName: 'setTreasury',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"start"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function useAuctionHouseStart<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof auctionHouseAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof auctionHouseABI, 'start'>['request']['abi'],
        'start',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'start' }
    : UseContractWriteConfig<typeof auctionHouseABI, 'start', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'start'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof auctionHouseABI, 'start', TMode>({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    functionName: 'start',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function useAuctionHouseTransferOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof auctionHouseAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof auctionHouseABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof auctionHouseABI, 'transferOwnership', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof auctionHouseABI, 'transferOwnership', TMode>({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"unpause"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function useAuctionHouseUnpause<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof auctionHouseAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof auctionHouseABI, 'unpause'>['request']['abi'],
        'unpause',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'unpause' }
    : UseContractWriteConfig<typeof auctionHouseABI, 'unpause', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'unpause'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof auctionHouseABI, 'unpause', TMode>({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    functionName: 'unpause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link auctionHouseABI}__.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function usePrepareAuctionHouseWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof auctionHouseABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    ...config,
  } as UsePrepareContractWriteConfig<typeof auctionHouseABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"bid"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function usePrepareAuctionHouseBid(
  config: Omit<
    UsePrepareContractWriteConfig<typeof auctionHouseABI, 'bid'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    functionName: 'bid',
    ...config,
  } as UsePrepareContractWriteConfig<typeof auctionHouseABI, 'bid'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"pause"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function usePrepareAuctionHousePause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof auctionHouseABI, 'pause'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    functionName: 'pause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof auctionHouseABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function usePrepareAuctionHouseRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof auctionHouseABI, 'renounceOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof auctionHouseABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"setDuration"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function usePrepareAuctionHouseSetDuration(
  config: Omit<
    UsePrepareContractWriteConfig<typeof auctionHouseABI, 'setDuration'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    functionName: 'setDuration',
    ...config,
  } as UsePrepareContractWriteConfig<typeof auctionHouseABI, 'setDuration'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"setExtendedDuration"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function usePrepareAuctionHouseSetExtendedDuration(
  config: Omit<
    UsePrepareContractWriteConfig<typeof auctionHouseABI, 'setExtendedDuration'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    functionName: 'setExtendedDuration',
    ...config,
  } as UsePrepareContractWriteConfig<typeof auctionHouseABI, 'setExtendedDuration'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"setGLMR"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function usePrepareAuctionHouseSetGlmr(
  config: Omit<
    UsePrepareContractWriteConfig<typeof auctionHouseABI, 'setGLMR'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    functionName: 'setGLMR',
    ...config,
  } as UsePrepareContractWriteConfig<typeof auctionHouseABI, 'setGLMR'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"setMinBidIncrementPercent"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function usePrepareAuctionHouseSetMinBidIncrementPercent(
  config: Omit<
    UsePrepareContractWriteConfig<typeof auctionHouseABI, 'setMinBidIncrementPercent'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    functionName: 'setMinBidIncrementPercent',
    ...config,
  } as UsePrepareContractWriteConfig<typeof auctionHouseABI, 'setMinBidIncrementPercent'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"setMinFirstBid"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function usePrepareAuctionHouseSetMinFirstBid(
  config: Omit<
    UsePrepareContractWriteConfig<typeof auctionHouseABI, 'setMinFirstBid'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    functionName: 'setMinFirstBid',
    ...config,
  } as UsePrepareContractWriteConfig<typeof auctionHouseABI, 'setMinFirstBid'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"setTreasury"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function usePrepareAuctionHouseSetTreasury(
  config: Omit<
    UsePrepareContractWriteConfig<typeof auctionHouseABI, 'setTreasury'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    functionName: 'setTreasury',
    ...config,
  } as UsePrepareContractWriteConfig<typeof auctionHouseABI, 'setTreasury'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"start"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function usePrepareAuctionHouseStart(
  config: Omit<
    UsePrepareContractWriteConfig<typeof auctionHouseABI, 'start'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    functionName: 'start',
    ...config,
  } as UsePrepareContractWriteConfig<typeof auctionHouseABI, 'start'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function usePrepareAuctionHouseTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof auctionHouseABI, 'transferOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof auctionHouseABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link auctionHouseABI}__ and `functionName` set to `"unpause"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function usePrepareAuctionHouseUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof auctionHouseABI, 'unpause'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    functionName: 'unpause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof auctionHouseABI, 'unpause'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link auctionHouseABI}__.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function useAuctionHouseEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof auctionHouseABI, TEventName>, 'abi' | 'address'> & {
    chainId?: keyof typeof auctionHouseAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    ...config,
  } as UseContractEventConfig<typeof auctionHouseABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link auctionHouseABI}__ and `eventName` set to `"Bid"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function useAuctionHouseBidEvent(
  config: Omit<
    UseContractEventConfig<typeof auctionHouseABI, 'Bid'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    eventName: 'Bid',
    ...config,
  } as UseContractEventConfig<typeof auctionHouseABI, 'Bid'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link auctionHouseABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function useAuctionHouseOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof auctionHouseABI, 'OwnershipTransferred'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof auctionHouseABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link auctionHouseABI}__ and `eventName` set to `"Paused"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function useAuctionHousePausedEvent(
  config: Omit<
    UseContractEventConfig<typeof auctionHouseABI, 'Paused'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    eventName: 'Paused',
    ...config,
  } as UseContractEventConfig<typeof auctionHouseABI, 'Paused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link auctionHouseABI}__ and `eventName` set to `"Start"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function useAuctionHouseStartEvent(
  config: Omit<
    UseContractEventConfig<typeof auctionHouseABI, 'Start'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    eventName: 'Start',
    ...config,
  } as UseContractEventConfig<typeof auctionHouseABI, 'Start'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link auctionHouseABI}__ and `eventName` set to `"Unpaused"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87)
 * -
 */
export function useAuctionHouseUnpausedEvent(
  config: Omit<
    UseContractEventConfig<typeof auctionHouseABI, 'Unpaused'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof auctionHouseAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: auctionHouseABI,
    address: auctionHouseAddress[chainId as keyof typeof auctionHouseAddress],
    eventName: 'Unpaused',
    ...config,
  } as UseContractEventConfig<typeof auctionHouseABI, 'Unpaused'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof crestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    ...config,
  } as UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof crestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"auctionHouse"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestAuctionHouse<
  TFunctionName extends 'auctionHouse',
  TSelectData = ReadContractResult<typeof crestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'auctionHouse',
    ...config,
  } as UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"balanceOf"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof crestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"contractURI"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestContractUri<
  TFunctionName extends 'contractURI',
  TSelectData = ReadContractResult<typeof crestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'contractURI',
    ...config,
  } as UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"delegates"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestDelegates<
  TFunctionName extends 'delegates',
  TSelectData = ReadContractResult<typeof crestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"dnaMap"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestDnaMap<
  TFunctionName extends 'dnaMap',
  TSelectData = ReadContractResult<typeof crestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'dnaMap',
    ...config,
  } as UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"founders"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestFounders<
  TFunctionName extends 'founders',
  TSelectData = ReadContractResult<typeof crestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'founders',
    ...config,
  } as UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"getApproved"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof crestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"getPastTotalSupply"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestGetPastTotalSupply<
  TFunctionName extends 'getPastTotalSupply',
  TSelectData = ReadContractResult<typeof crestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"getPastVotes"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestGetPastVotes<
  TFunctionName extends 'getPastVotes',
  TSelectData = ReadContractResult<typeof crestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"getVotes"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestGetVotes<
  TFunctionName extends 'getVotes',
  TSelectData = ReadContractResult<typeof crestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"isApprovedForAll"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof crestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"name"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof crestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"nonces"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof crestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"owner"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof crestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"ownerOf"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof crestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"store"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestStore<
  TFunctionName extends 'store',
  TSelectData = ReadContractResult<typeof crestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'store',
    ...config,
  } as UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"supportsInterface"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof crestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"symbol"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof crestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"tokenByIndex"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestTokenByIndex<
  TFunctionName extends 'tokenByIndex',
  TSelectData = ReadContractResult<typeof crestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestTokenOfOwnerByIndex<
  TFunctionName extends 'tokenOfOwnerByIndex',
  TSelectData = ReadContractResult<typeof crestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"tokenURI"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof crestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"totalSupply"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof crestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof crestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crestABI}__.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof crestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof crestABI, string>['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof crestABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof crestABI, TFunctionName, TMode>({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"approve"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestApprove<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof crestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof crestABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'approve' }
    : UseContractWriteConfig<typeof crestABI, 'approve', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'approve'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof crestABI, 'approve', TMode>({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"burn"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestBurn<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof crestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof crestABI, 'burn'>['request']['abi'],
        'burn',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'burn' }
    : UseContractWriteConfig<typeof crestABI, 'burn', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'burn'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof crestABI, 'burn', TMode>({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"delegate"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestDelegate<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof crestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof crestABI, 'delegate'>['request']['abi'],
        'delegate',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'delegate' }
    : UseContractWriteConfig<typeof crestABI, 'delegate', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'delegate'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof crestABI, 'delegate', TMode>({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"delegateBySig"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestDelegateBySig<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof crestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof crestABI, 'delegateBySig'>['request']['abi'],
        'delegateBySig',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'delegateBySig' }
    : UseContractWriteConfig<typeof crestABI, 'delegateBySig', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof crestABI, 'delegateBySig', TMode>({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"mint"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestMint<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof crestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof crestABI, 'mint'>['request']['abi'],
        'mint',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'mint' }
    : UseContractWriteConfig<typeof crestABI, 'mint', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'mint'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof crestABI, 'mint', TMode>({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"mintSpecific"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestMintSpecific<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof crestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof crestABI, 'mintSpecific'>['request']['abi'],
        'mintSpecific',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'mintSpecific' }
    : UseContractWriteConfig<typeof crestABI, 'mintSpecific', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'mintSpecific'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof crestABI, 'mintSpecific', TMode>({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'mintSpecific',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestRenounceOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof crestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof crestABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof crestABI, 'renounceOwnership', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof crestABI, 'renounceOwnership', TMode>({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof crestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof crestABI, 'safeTransferFrom'>['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof crestABI, 'safeTransferFrom', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof crestABI, 'safeTransferFrom', TMode>({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof crestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof crestABI, 'setApprovalForAll'>['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof crestABI, 'setApprovalForAll', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof crestABI, 'setApprovalForAll', TMode>({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"setAuctionHouse"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestSetAuctionHouse<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof crestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof crestABI, 'setAuctionHouse'>['request']['abi'],
        'setAuctionHouse',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setAuctionHouse' }
    : UseContractWriteConfig<typeof crestABI, 'setAuctionHouse', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setAuctionHouse'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof crestABI, 'setAuctionHouse', TMode>({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'setAuctionHouse',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"setContractURI"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestSetContractUri<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof crestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof crestABI, 'setContractURI'>['request']['abi'],
        'setContractURI',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setContractURI' }
    : UseContractWriteConfig<typeof crestABI, 'setContractURI', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setContractURI'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof crestABI, 'setContractURI', TMode>({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'setContractURI',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"setFounders"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestSetFounders<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof crestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof crestABI, 'setFounders'>['request']['abi'],
        'setFounders',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setFounders' }
    : UseContractWriteConfig<typeof crestABI, 'setFounders', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setFounders'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof crestABI, 'setFounders', TMode>({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'setFounders',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"transferFrom"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestTransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof crestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof crestABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof crestABI, 'transferFrom', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferFrom'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof crestABI, 'transferFrom', TMode>({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestTransferOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof crestAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof crestABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof crestABI, 'transferOwnership', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof crestABI, 'transferOwnership', TMode>({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crestABI}__.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function usePrepareCrestWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof crestABI, TFunctionName>, 'abi' | 'address'> & {
    chainId?: keyof typeof crestAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    ...config,
  } as UsePrepareContractWriteConfig<typeof crestABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"approve"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function usePrepareCrestApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crestABI, 'approve'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof crestABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"burn"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function usePrepareCrestBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crestABI, 'burn'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof crestABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"delegate"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function usePrepareCrestDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crestABI, 'delegate'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof crestABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"delegateBySig"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function usePrepareCrestDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crestABI, 'delegateBySig'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof crestABI, 'delegateBySig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"mint"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function usePrepareCrestMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crestABI, 'mint'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof crestABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"mintSpecific"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function usePrepareCrestMintSpecific(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crestABI, 'mintSpecific'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'mintSpecific',
    ...config,
  } as UsePrepareContractWriteConfig<typeof crestABI, 'mintSpecific'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function usePrepareCrestRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crestABI, 'renounceOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof crestABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function usePrepareCrestSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crestABI, 'safeTransferFrom'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof crestABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function usePrepareCrestSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crestABI, 'setApprovalForAll'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof crestABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"setAuctionHouse"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function usePrepareCrestSetAuctionHouse(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crestABI, 'setAuctionHouse'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'setAuctionHouse',
    ...config,
  } as UsePrepareContractWriteConfig<typeof crestABI, 'setAuctionHouse'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"setContractURI"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function usePrepareCrestSetContractUri(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crestABI, 'setContractURI'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'setContractURI',
    ...config,
  } as UsePrepareContractWriteConfig<typeof crestABI, 'setContractURI'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"setFounders"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function usePrepareCrestSetFounders(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crestABI, 'setFounders'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'setFounders',
    ...config,
  } as UsePrepareContractWriteConfig<typeof crestABI, 'setFounders'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"transferFrom"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function usePrepareCrestTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crestABI, 'transferFrom'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof crestABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crestABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function usePrepareCrestTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crestABI, 'transferOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof crestABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crestABI}__.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof crestABI, TEventName>, 'abi' | 'address'> & {
    chainId?: keyof typeof crestAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    ...config,
  } as UseContractEventConfig<typeof crestABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crestABI}__ and `eventName` set to `"Approval"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof crestABI, 'Approval'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof crestABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crestABI}__ and `eventName` set to `"ApprovalForAll"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof crestABI, 'ApprovalForAll'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof crestABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crestABI}__ and `eventName` set to `"DelegateChanged"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof crestABI, 'DelegateChanged'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof crestABI, 'DelegateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crestABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof crestABI, 'DelegateVotesChanged'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<typeof crestABI, 'DelegateVotesChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crestABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof crestABI, 'OwnershipTransferred'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof crestABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crestABI}__ and `eventName` set to `"Transfer"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8417F77904a86436223942a516f00F8aDF933B70)
 * -
 */
export function useCrestTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof crestABI, 'Transfer'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof crestAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: crestABI,
    address: crestAddress[chainId as keyof typeof crestAddress],
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof crestABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoGovernorABI}__.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof daoGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    ...config,
  } as UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"BALLOT_TYPEHASH"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorBallotTypehash<
  TFunctionName extends 'BALLOT_TYPEHASH',
  TSelectData = ReadContractResult<typeof daoGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'BALLOT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"COUNTING_MODE"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorCountingMode<
  TFunctionName extends 'COUNTING_MODE',
  TSelectData = ReadContractResult<typeof daoGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'COUNTING_MODE',
    ...config,
  } as UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"EXTENDED_BALLOT_TYPEHASH"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorExtendedBallotTypehash<
  TFunctionName extends 'EXTENDED_BALLOT_TYPEHASH',
  TSelectData = ReadContractResult<typeof daoGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'EXTENDED_BALLOT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"getVotes"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorGetVotes<
  TFunctionName extends 'getVotes',
  TSelectData = ReadContractResult<typeof daoGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"getVotesWithParams"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorGetVotesWithParams<
  TFunctionName extends 'getVotesWithParams',
  TSelectData = ReadContractResult<typeof daoGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'getVotesWithParams',
    ...config,
  } as UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"hasVoted"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorHasVoted<
  TFunctionName extends 'hasVoted',
  TSelectData = ReadContractResult<typeof daoGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'hasVoted',
    ...config,
  } as UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"hashProposal"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorHashProposal<
  TFunctionName extends 'hashProposal',
  TSelectData = ReadContractResult<typeof daoGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'hashProposal',
    ...config,
  } as UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"name"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof daoGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"proposalDeadline"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorProposalDeadline<
  TFunctionName extends 'proposalDeadline',
  TSelectData = ReadContractResult<typeof daoGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'proposalDeadline',
    ...config,
  } as UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"proposalSnapshot"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorProposalSnapshot<
  TFunctionName extends 'proposalSnapshot',
  TSelectData = ReadContractResult<typeof daoGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'proposalSnapshot',
    ...config,
  } as UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"proposalThreshold"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorProposalThreshold<
  TFunctionName extends 'proposalThreshold',
  TSelectData = ReadContractResult<typeof daoGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'proposalThreshold',
    ...config,
  } as UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"proposalVotes"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorProposalVotes<
  TFunctionName extends 'proposalVotes',
  TSelectData = ReadContractResult<typeof daoGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'proposalVotes',
    ...config,
  } as UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"quorum"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorQuorum<
  TFunctionName extends 'quorum',
  TSelectData = ReadContractResult<typeof daoGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'quorum',
    ...config,
  } as UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"quorumDenominator"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorQuorumDenominator<
  TFunctionName extends 'quorumDenominator',
  TSelectData = ReadContractResult<typeof daoGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'quorumDenominator',
    ...config,
  } as UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"quorumNumerator"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorQuorumNumerator<
  TFunctionName extends 'quorumNumerator',
  TSelectData = ReadContractResult<typeof daoGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'quorumNumerator',
    ...config,
  } as UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"state"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorState<
  TFunctionName extends 'state',
  TSelectData = ReadContractResult<typeof daoGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'state',
    ...config,
  } as UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"supportsInterface"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof daoGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"token"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorToken<
  TFunctionName extends 'token',
  TSelectData = ReadContractResult<typeof daoGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'token',
    ...config,
  } as UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"version"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorVersion<
  TFunctionName extends 'version',
  TSelectData = ReadContractResult<typeof daoGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'version',
    ...config,
  } as UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"votingDelay"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorVotingDelay<
  TFunctionName extends 'votingDelay',
  TSelectData = ReadContractResult<typeof daoGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'votingDelay',
    ...config,
  } as UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"votingPeriod"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorVotingPeriod<
  TFunctionName extends 'votingPeriod',
  TSelectData = ReadContractResult<typeof daoGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'votingPeriod',
    ...config,
  } as UseContractReadConfig<typeof daoGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoGovernorABI}__.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof daoGovernorAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoGovernorABI, string>['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof daoGovernorABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof daoGovernorABI, TFunctionName, TMode>({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"castVote"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorCastVote<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof daoGovernorAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoGovernorABI, 'castVote'>['request']['abi'],
        'castVote',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'castVote' }
    : UseContractWriteConfig<typeof daoGovernorABI, 'castVote', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'castVote'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof daoGovernorABI, 'castVote', TMode>({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'castVote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"castVoteBySig"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorCastVoteBySig<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof daoGovernorAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoGovernorABI, 'castVoteBySig'>['request']['abi'],
        'castVoteBySig',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'castVoteBySig' }
    : UseContractWriteConfig<typeof daoGovernorABI, 'castVoteBySig', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'castVoteBySig'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof daoGovernorABI, 'castVoteBySig', TMode>({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'castVoteBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"castVoteWithReason"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorCastVoteWithReason<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof daoGovernorAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoGovernorABI, 'castVoteWithReason'>['request']['abi'],
        'castVoteWithReason',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'castVoteWithReason' }
    : UseContractWriteConfig<typeof daoGovernorABI, 'castVoteWithReason', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'castVoteWithReason'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof daoGovernorABI, 'castVoteWithReason', TMode>({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'castVoteWithReason',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorCastVoteWithReasonAndParams<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof daoGovernorAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof daoGovernorABI,
          'castVoteWithReasonAndParams'
        >['request']['abi'],
        'castVoteWithReasonAndParams',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'castVoteWithReasonAndParams' }
    : UseContractWriteConfig<typeof daoGovernorABI, 'castVoteWithReasonAndParams', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'castVoteWithReasonAndParams'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof daoGovernorABI, 'castVoteWithReasonAndParams', TMode>({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorCastVoteWithReasonAndParamsBySig<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof daoGovernorAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof daoGovernorABI,
          'castVoteWithReasonAndParamsBySig'
        >['request']['abi'],
        'castVoteWithReasonAndParamsBySig',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'castVoteWithReasonAndParamsBySig'
      }
    : UseContractWriteConfig<typeof daoGovernorABI, 'castVoteWithReasonAndParamsBySig', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'castVoteWithReasonAndParamsBySig'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof daoGovernorABI, 'castVoteWithReasonAndParamsBySig', TMode>({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"execute"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorExecute<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof daoGovernorAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoGovernorABI, 'execute'>['request']['abi'],
        'execute',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'execute' }
    : UseContractWriteConfig<typeof daoGovernorABI, 'execute', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'execute'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof daoGovernorABI, 'execute', TMode>({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorOnErc1155BatchReceived<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof daoGovernorAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof daoGovernorABI,
          'onERC1155BatchReceived'
        >['request']['abi'],
        'onERC1155BatchReceived',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'onERC1155BatchReceived' }
    : UseContractWriteConfig<typeof daoGovernorABI, 'onERC1155BatchReceived', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'onERC1155BatchReceived'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof daoGovernorABI, 'onERC1155BatchReceived', TMode>({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"onERC1155Received"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorOnErc1155Received<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof daoGovernorAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoGovernorABI, 'onERC1155Received'>['request']['abi'],
        'onERC1155Received',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'onERC1155Received' }
    : UseContractWriteConfig<typeof daoGovernorABI, 'onERC1155Received', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'onERC1155Received'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof daoGovernorABI, 'onERC1155Received', TMode>({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'onERC1155Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"onERC721Received"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorOnErc721Received<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof daoGovernorAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoGovernorABI, 'onERC721Received'>['request']['abi'],
        'onERC721Received',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'onERC721Received' }
    : UseContractWriteConfig<typeof daoGovernorABI, 'onERC721Received', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof daoGovernorABI, 'onERC721Received', TMode>({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"propose"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorPropose<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof daoGovernorAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoGovernorABI, 'propose'>['request']['abi'],
        'propose',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'propose' }
    : UseContractWriteConfig<typeof daoGovernorABI, 'propose', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'propose'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof daoGovernorABI, 'propose', TMode>({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'propose',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"relay"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorRelay<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof daoGovernorAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoGovernorABI, 'relay'>['request']['abi'],
        'relay',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'relay' }
    : UseContractWriteConfig<typeof daoGovernorABI, 'relay', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'relay'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof daoGovernorABI, 'relay', TMode>({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'relay',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"setProposalThreshold"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorSetProposalThreshold<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof daoGovernorAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoGovernorABI, 'setProposalThreshold'>['request']['abi'],
        'setProposalThreshold',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setProposalThreshold' }
    : UseContractWriteConfig<typeof daoGovernorABI, 'setProposalThreshold', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setProposalThreshold'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof daoGovernorABI, 'setProposalThreshold', TMode>({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'setProposalThreshold',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"setVotingDelay"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorSetVotingDelay<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof daoGovernorAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoGovernorABI, 'setVotingDelay'>['request']['abi'],
        'setVotingDelay',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setVotingDelay' }
    : UseContractWriteConfig<typeof daoGovernorABI, 'setVotingDelay', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setVotingDelay'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof daoGovernorABI, 'setVotingDelay', TMode>({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'setVotingDelay',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"setVotingPeriod"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorSetVotingPeriod<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof daoGovernorAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof daoGovernorABI, 'setVotingPeriod'>['request']['abi'],
        'setVotingPeriod',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setVotingPeriod' }
    : UseContractWriteConfig<typeof daoGovernorABI, 'setVotingPeriod', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setVotingPeriod'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof daoGovernorABI, 'setVotingPeriod', TMode>({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'setVotingPeriod',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"updateQuorumNumerator"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorUpdateQuorumNumerator<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof daoGovernorAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof daoGovernorABI,
          'updateQuorumNumerator'
        >['request']['abi'],
        'updateQuorumNumerator',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'updateQuorumNumerator' }
    : UseContractWriteConfig<typeof daoGovernorABI, 'updateQuorumNumerator', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'updateQuorumNumerator'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof daoGovernorABI, 'updateQuorumNumerator', TMode>({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'updateQuorumNumerator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoGovernorABI}__.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function usePrepareDaoGovernorWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoGovernorABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoGovernorABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"castVote"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function usePrepareDaoGovernorCastVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoGovernorABI, 'castVote'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'castVote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoGovernorABI, 'castVote'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"castVoteBySig"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function usePrepareDaoGovernorCastVoteBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoGovernorABI, 'castVoteBySig'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'castVoteBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoGovernorABI, 'castVoteBySig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"castVoteWithReason"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function usePrepareDaoGovernorCastVoteWithReason(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoGovernorABI, 'castVoteWithReason'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'castVoteWithReason',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoGovernorABI, 'castVoteWithReason'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function usePrepareDaoGovernorCastVoteWithReasonAndParams(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoGovernorABI, 'castVoteWithReasonAndParams'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoGovernorABI, 'castVoteWithReasonAndParams'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function usePrepareDaoGovernorCastVoteWithReasonAndParamsBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoGovernorABI, 'castVoteWithReasonAndParamsBySig'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoGovernorABI, 'castVoteWithReasonAndParamsBySig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"execute"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function usePrepareDaoGovernorExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoGovernorABI, 'execute'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoGovernorABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function usePrepareDaoGovernorOnErc1155BatchReceived(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoGovernorABI, 'onERC1155BatchReceived'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoGovernorABI, 'onERC1155BatchReceived'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"onERC1155Received"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function usePrepareDaoGovernorOnErc1155Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoGovernorABI, 'onERC1155Received'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'onERC1155Received',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoGovernorABI, 'onERC1155Received'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"onERC721Received"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function usePrepareDaoGovernorOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoGovernorABI, 'onERC721Received'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoGovernorABI, 'onERC721Received'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"propose"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function usePrepareDaoGovernorPropose(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoGovernorABI, 'propose'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'propose',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoGovernorABI, 'propose'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"relay"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function usePrepareDaoGovernorRelay(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoGovernorABI, 'relay'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'relay',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoGovernorABI, 'relay'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"setProposalThreshold"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function usePrepareDaoGovernorSetProposalThreshold(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoGovernorABI, 'setProposalThreshold'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'setProposalThreshold',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoGovernorABI, 'setProposalThreshold'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"setVotingDelay"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function usePrepareDaoGovernorSetVotingDelay(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoGovernorABI, 'setVotingDelay'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'setVotingDelay',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoGovernorABI, 'setVotingDelay'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"setVotingPeriod"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function usePrepareDaoGovernorSetVotingPeriod(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoGovernorABI, 'setVotingPeriod'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'setVotingPeriod',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoGovernorABI, 'setVotingPeriod'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link daoGovernorABI}__ and `functionName` set to `"updateQuorumNumerator"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function usePrepareDaoGovernorUpdateQuorumNumerator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof daoGovernorABI, 'updateQuorumNumerator'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    functionName: 'updateQuorumNumerator',
    ...config,
  } as UsePrepareContractWriteConfig<typeof daoGovernorABI, 'updateQuorumNumerator'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoGovernorABI}__.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof daoGovernorABI, TEventName>, 'abi' | 'address'> & {
    chainId?: keyof typeof daoGovernorAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    ...config,
  } as UseContractEventConfig<typeof daoGovernorABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoGovernorABI}__ and `eventName` set to `"ProposalCanceled"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorProposalCanceledEvent(
  config: Omit<
    UseContractEventConfig<typeof daoGovernorABI, 'ProposalCanceled'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    eventName: 'ProposalCanceled',
    ...config,
  } as UseContractEventConfig<typeof daoGovernorABI, 'ProposalCanceled'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoGovernorABI}__ and `eventName` set to `"ProposalCreated"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorProposalCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof daoGovernorABI, 'ProposalCreated'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    eventName: 'ProposalCreated',
    ...config,
  } as UseContractEventConfig<typeof daoGovernorABI, 'ProposalCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoGovernorABI}__ and `eventName` set to `"ProposalExecuted"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorProposalExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof daoGovernorABI, 'ProposalExecuted'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    eventName: 'ProposalExecuted',
    ...config,
  } as UseContractEventConfig<typeof daoGovernorABI, 'ProposalExecuted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoGovernorABI}__ and `eventName` set to `"ProposalThresholdSet"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorProposalThresholdSetEvent(
  config: Omit<
    UseContractEventConfig<typeof daoGovernorABI, 'ProposalThresholdSet'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    eventName: 'ProposalThresholdSet',
    ...config,
  } as UseContractEventConfig<typeof daoGovernorABI, 'ProposalThresholdSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoGovernorABI}__ and `eventName` set to `"QuorumNumeratorUpdated"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorQuorumNumeratorUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof daoGovernorABI, 'QuorumNumeratorUpdated'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    eventName: 'QuorumNumeratorUpdated',
    ...config,
  } as UseContractEventConfig<typeof daoGovernorABI, 'QuorumNumeratorUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoGovernorABI}__ and `eventName` set to `"VoteCast"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorVoteCastEvent(
  config: Omit<
    UseContractEventConfig<typeof daoGovernorABI, 'VoteCast'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    eventName: 'VoteCast',
    ...config,
  } as UseContractEventConfig<typeof daoGovernorABI, 'VoteCast'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoGovernorABI}__ and `eventName` set to `"VoteCastWithParams"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorVoteCastWithParamsEvent(
  config: Omit<
    UseContractEventConfig<typeof daoGovernorABI, 'VoteCastWithParams'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    eventName: 'VoteCastWithParams',
    ...config,
  } as UseContractEventConfig<typeof daoGovernorABI, 'VoteCastWithParams'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoGovernorABI}__ and `eventName` set to `"VotingDelaySet"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorVotingDelaySetEvent(
  config: Omit<
    UseContractEventConfig<typeof daoGovernorABI, 'VotingDelaySet'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    eventName: 'VotingDelaySet',
    ...config,
  } as UseContractEventConfig<typeof daoGovernorABI, 'VotingDelaySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link daoGovernorABI}__ and `eventName` set to `"VotingPeriodSet"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x311346FDe706FEBAB09cCEd059A05566248b1351)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x0CD784724A7C1789fa76563098ed8eF7fC0fae0E)
 * -
 */
export function useDaoGovernorVotingPeriodSetEvent(
  config: Omit<
    UseContractEventConfig<typeof daoGovernorABI, 'VotingPeriodSet'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof daoGovernorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: daoGovernorABI,
    address: daoGovernorAddress[chainId as keyof typeof daoGovernorAddress],
    eventName: 'VotingPeriodSet',
    ...config,
  } as UseContractEventConfig<typeof daoGovernorABI, 'VotingPeriodSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"bgColors"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreBgColors<
  TFunctionName extends 'bgColors',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'bgColors',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"bgColorsCount"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreBgColorsCount<
  TFunctionName extends 'bgColorsCount',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'bgColorsCount',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"classes"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreClasses<
  TFunctionName extends 'classes',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'classes',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"classesCount"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreClassesCount<
  TFunctionName extends 'classesCount',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'classesCount',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"crowns"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreCrowns<
  TFunctionName extends 'crowns',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'crowns',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"crownsCount"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreCrownsCount<
  TFunctionName extends 'crownsCount',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'crownsCount',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"doodads"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreDoodads<
  TFunctionName extends 'doodads',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'doodads',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"doodadsCount"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreDoodadsCount<
  TFunctionName extends 'doodadsCount',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'doodadsCount',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"garlands"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreGarlands<
  TFunctionName extends 'garlands',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'garlands',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"garlandsCount"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreGarlandsCount<
  TFunctionName extends 'garlandsCount',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'garlandsCount',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"getAllParts"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreGetAllParts<
  TFunctionName extends 'getAllParts',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'getAllParts',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"getBgColor"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreGetBgColor<
  TFunctionName extends 'getBgColor',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'getBgColor',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"getClass"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreGetClass<
  TFunctionName extends 'getClass',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'getClass',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"getCrown"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreGetCrown<
  TFunctionName extends 'getCrown',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'getCrown',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"getDoodad"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreGetDoodad<
  TFunctionName extends 'getDoodad',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'getDoodad',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"getGarland"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreGetGarland<
  TFunctionName extends 'getGarland',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'getGarland',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"getNogglesColor"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreGetNogglesColor<
  TFunctionName extends 'getNogglesColor',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'getNogglesColor',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"getQuadrantPalette"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreGetQuadrantPalette<
  TFunctionName extends 'getQuadrantPalette',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'getQuadrantPalette',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"getRep"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreGetRep<
  TFunctionName extends 'getRep',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'getRep',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"getShield"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreGetShield<
  TFunctionName extends 'getShield',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'getShield',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"getSkill"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreGetSkill<
  TFunctionName extends 'getSkill',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'getSkill',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"getTrait"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreGetTrait<
  TFunctionName extends 'getTrait',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'getTrait',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"locked"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreLocked<
  TFunctionName extends 'locked',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'locked',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"nogglesColors"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreNogglesColors<
  TFunctionName extends 'nogglesColors',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'nogglesColors',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"nogglesColorsCount"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreNogglesColorsCount<
  TFunctionName extends 'nogglesColorsCount',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'nogglesColorsCount',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"owner"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"quadrantPalettes"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreQuadrantPalettes<
  TFunctionName extends 'quadrantPalettes',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'quadrantPalettes',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"quadrantPalettesCount"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreQuadrantPalettesCount<
  TFunctionName extends 'quadrantPalettesCount',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'quadrantPalettesCount',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"reps"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreReps<
  TFunctionName extends 'reps',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'reps',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"repsCount"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreRepsCount<
  TFunctionName extends 'repsCount',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'repsCount',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"shields"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreShields<
  TFunctionName extends 'shields',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'shields',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"shieldsCount"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreShieldsCount<
  TFunctionName extends 'shieldsCount',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'shieldsCount',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"skills"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreSkills<
  TFunctionName extends 'skills',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'skills',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"skillsCount"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreSkillsCount<
  TFunctionName extends 'skillsCount',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'skillsCount',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"traits"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreTraits<
  TFunctionName extends 'traits',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'traits',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"traitsCount"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreTraitsCount<
  TFunctionName extends 'traitsCount',
  TSelectData = ReadContractResult<typeof partsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'traitsCount',
    ...config,
  } as UseContractReadConfig<typeof partsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link partsStoreABI}__.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof partsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof partsStoreABI, string>['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof partsStoreABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof partsStoreABI, TFunctionName, TMode>({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addBgColor"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreAddBgColor<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof partsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof partsStoreABI, 'addBgColor'>['request']['abi'],
        'addBgColor',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'addBgColor' }
    : UseContractWriteConfig<typeof partsStoreABI, 'addBgColor', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addBgColor'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof partsStoreABI, 'addBgColor', TMode>({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'addBgColor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addClass"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreAddClass<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof partsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof partsStoreABI, 'addClass'>['request']['abi'],
        'addClass',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'addClass' }
    : UseContractWriteConfig<typeof partsStoreABI, 'addClass', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addClass'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof partsStoreABI, 'addClass', TMode>({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'addClass',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addCrown"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreAddCrown<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof partsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof partsStoreABI, 'addCrown'>['request']['abi'],
        'addCrown',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'addCrown' }
    : UseContractWriteConfig<typeof partsStoreABI, 'addCrown', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addCrown'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof partsStoreABI, 'addCrown', TMode>({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'addCrown',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addDoodad"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreAddDoodad<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof partsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof partsStoreABI, 'addDoodad'>['request']['abi'],
        'addDoodad',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'addDoodad' }
    : UseContractWriteConfig<typeof partsStoreABI, 'addDoodad', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addDoodad'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof partsStoreABI, 'addDoodad', TMode>({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'addDoodad',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addGarland"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreAddGarland<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof partsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof partsStoreABI, 'addGarland'>['request']['abi'],
        'addGarland',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'addGarland' }
    : UseContractWriteConfig<typeof partsStoreABI, 'addGarland', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addGarland'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof partsStoreABI, 'addGarland', TMode>({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'addGarland',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addNogglesColor"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreAddNogglesColor<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof partsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof partsStoreABI, 'addNogglesColor'>['request']['abi'],
        'addNogglesColor',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'addNogglesColor' }
    : UseContractWriteConfig<typeof partsStoreABI, 'addNogglesColor', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addNogglesColor'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof partsStoreABI, 'addNogglesColor', TMode>({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'addNogglesColor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addQuadrantPalette"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreAddQuadrantPalette<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof partsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof partsStoreABI, 'addQuadrantPalette'>['request']['abi'],
        'addQuadrantPalette',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'addQuadrantPalette' }
    : UseContractWriteConfig<typeof partsStoreABI, 'addQuadrantPalette', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addQuadrantPalette'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof partsStoreABI, 'addQuadrantPalette', TMode>({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'addQuadrantPalette',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addRep"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreAddRep<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof partsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof partsStoreABI, 'addRep'>['request']['abi'],
        'addRep',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'addRep' }
    : UseContractWriteConfig<typeof partsStoreABI, 'addRep', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addRep'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof partsStoreABI, 'addRep', TMode>({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'addRep',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addShield"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreAddShield<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof partsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof partsStoreABI, 'addShield'>['request']['abi'],
        'addShield',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'addShield' }
    : UseContractWriteConfig<typeof partsStoreABI, 'addShield', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addShield'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof partsStoreABI, 'addShield', TMode>({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'addShield',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addSkill"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreAddSkill<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof partsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof partsStoreABI, 'addSkill'>['request']['abi'],
        'addSkill',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'addSkill' }
    : UseContractWriteConfig<typeof partsStoreABI, 'addSkill', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addSkill'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof partsStoreABI, 'addSkill', TMode>({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'addSkill',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addTrait"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreAddTrait<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof partsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof partsStoreABI, 'addTrait'>['request']['abi'],
        'addTrait',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'addTrait' }
    : UseContractWriteConfig<typeof partsStoreABI, 'addTrait', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addTrait'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof partsStoreABI, 'addTrait', TMode>({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'addTrait',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"lock"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreLock<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof partsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof partsStoreABI, 'lock'>['request']['abi'],
        'lock',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'lock' }
    : UseContractWriteConfig<typeof partsStoreABI, 'lock', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'lock'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof partsStoreABI, 'lock', TMode>({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'lock',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreRenounceOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof partsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof partsStoreABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof partsStoreABI, 'renounceOwnership', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof partsStoreABI, 'renounceOwnership', TMode>({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreTransferOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof partsStoreAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof partsStoreABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof partsStoreABI, 'transferOwnership', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof partsStoreABI, 'transferOwnership', TMode>({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link partsStoreABI}__.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePreparePartsStoreWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof partsStoreABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    ...config,
  } as UsePrepareContractWriteConfig<typeof partsStoreABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addBgColor"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePreparePartsStoreAddBgColor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof partsStoreABI, 'addBgColor'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'addBgColor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof partsStoreABI, 'addBgColor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addClass"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePreparePartsStoreAddClass(
  config: Omit<
    UsePrepareContractWriteConfig<typeof partsStoreABI, 'addClass'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'addClass',
    ...config,
  } as UsePrepareContractWriteConfig<typeof partsStoreABI, 'addClass'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addCrown"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePreparePartsStoreAddCrown(
  config: Omit<
    UsePrepareContractWriteConfig<typeof partsStoreABI, 'addCrown'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'addCrown',
    ...config,
  } as UsePrepareContractWriteConfig<typeof partsStoreABI, 'addCrown'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addDoodad"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePreparePartsStoreAddDoodad(
  config: Omit<
    UsePrepareContractWriteConfig<typeof partsStoreABI, 'addDoodad'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'addDoodad',
    ...config,
  } as UsePrepareContractWriteConfig<typeof partsStoreABI, 'addDoodad'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addGarland"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePreparePartsStoreAddGarland(
  config: Omit<
    UsePrepareContractWriteConfig<typeof partsStoreABI, 'addGarland'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'addGarland',
    ...config,
  } as UsePrepareContractWriteConfig<typeof partsStoreABI, 'addGarland'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addNogglesColor"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePreparePartsStoreAddNogglesColor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof partsStoreABI, 'addNogglesColor'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'addNogglesColor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof partsStoreABI, 'addNogglesColor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addQuadrantPalette"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePreparePartsStoreAddQuadrantPalette(
  config: Omit<
    UsePrepareContractWriteConfig<typeof partsStoreABI, 'addQuadrantPalette'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'addQuadrantPalette',
    ...config,
  } as UsePrepareContractWriteConfig<typeof partsStoreABI, 'addQuadrantPalette'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addRep"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePreparePartsStoreAddRep(
  config: Omit<
    UsePrepareContractWriteConfig<typeof partsStoreABI, 'addRep'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'addRep',
    ...config,
  } as UsePrepareContractWriteConfig<typeof partsStoreABI, 'addRep'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addShield"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePreparePartsStoreAddShield(
  config: Omit<
    UsePrepareContractWriteConfig<typeof partsStoreABI, 'addShield'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'addShield',
    ...config,
  } as UsePrepareContractWriteConfig<typeof partsStoreABI, 'addShield'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addSkill"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePreparePartsStoreAddSkill(
  config: Omit<
    UsePrepareContractWriteConfig<typeof partsStoreABI, 'addSkill'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'addSkill',
    ...config,
  } as UsePrepareContractWriteConfig<typeof partsStoreABI, 'addSkill'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"addTrait"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePreparePartsStoreAddTrait(
  config: Omit<
    UsePrepareContractWriteConfig<typeof partsStoreABI, 'addTrait'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'addTrait',
    ...config,
  } as UsePrepareContractWriteConfig<typeof partsStoreABI, 'addTrait'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"lock"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePreparePartsStoreLock(
  config: Omit<
    UsePrepareContractWriteConfig<typeof partsStoreABI, 'lock'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'lock',
    ...config,
  } as UsePrepareContractWriteConfig<typeof partsStoreABI, 'lock'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePreparePartsStoreRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof partsStoreABI, 'renounceOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof partsStoreABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link partsStoreABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePreparePartsStoreTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof partsStoreABI, 'transferOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof partsStoreABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link partsStoreABI}__.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof partsStoreABI, TEventName>, 'abi' | 'address'> & {
    chainId?: keyof typeof partsStoreAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    ...config,
  } as UseContractEventConfig<typeof partsStoreABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link partsStoreABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x8162876a0bD2bE9d48a2023d20d5955d51eC055D)
 * -
 */
export function usePartsStoreOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof partsStoreABI, 'OwnershipTransferred'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof partsStoreAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: partsStoreABI,
    address: partsStoreAddress[chainId as keyof typeof partsStoreAddress],
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof partsStoreABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCrestABI}__.
 */
export function useICrestRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iCrestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iCrestABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: iCrestABI, ...config } as UseContractReadConfig<
    typeof iCrestABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useICrestBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof iCrestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iCrestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCrestABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof iCrestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"getApproved"`.
 */
export function useICrestGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof iCrestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iCrestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCrestABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof iCrestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useICrestIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof iCrestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iCrestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCrestABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof iCrestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useICrestOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof iCrestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iCrestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCrestABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof iCrestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useICrestSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof iCrestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iCrestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCrestABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof iCrestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useICrestTokenByIndex<
  TFunctionName extends 'tokenByIndex',
  TSelectData = ReadContractResult<typeof iCrestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iCrestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCrestABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<typeof iCrestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function useICrestTokenOfOwnerByIndex<
  TFunctionName extends 'tokenOfOwnerByIndex',
  TSelectData = ReadContractResult<typeof iCrestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iCrestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCrestABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<typeof iCrestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useICrestTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof iCrestABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iCrestABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iCrestABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof iCrestABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCrestABI}__.
 */
export function useICrestWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iCrestABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iCrestABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iCrestABI, TFunctionName, TMode>({
    abi: iCrestABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"approve"`.
 */
export function useICrestApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iCrestABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof iCrestABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof iCrestABI, 'approve', TMode>({
    abi: iCrestABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"burn"`.
 */
export function useICrestBurn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iCrestABI, 'burn'>['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof iCrestABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<typeof iCrestABI, 'burn', TMode>({
    abi: iCrestABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"mint"`.
 */
export function useICrestMint<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iCrestABI, 'mint'>['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<typeof iCrestABI, 'mint', TMode> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<typeof iCrestABI, 'mint', TMode>({
    abi: iCrestABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"mintSpecific"`.
 */
export function useICrestMintSpecific<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iCrestABI, 'mintSpecific'>['request']['abi'],
        'mintSpecific',
        TMode
      > & { functionName?: 'mintSpecific' }
    : UseContractWriteConfig<typeof iCrestABI, 'mintSpecific', TMode> & {
        abi?: never
        functionName?: 'mintSpecific'
      } = {} as any,
) {
  return useContractWrite<typeof iCrestABI, 'mintSpecific', TMode>({
    abi: iCrestABI,
    functionName: 'mintSpecific',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useICrestSafeTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iCrestABI, 'safeTransferFrom'>['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof iCrestABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof iCrestABI, 'safeTransferFrom', TMode>({
    abi: iCrestABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useICrestSetApprovalForAll<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iCrestABI, 'setApprovalForAll'>['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof iCrestABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof iCrestABI, 'setApprovalForAll', TMode>({
    abi: iCrestABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useICrestTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iCrestABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof iCrestABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof iCrestABI, 'transferFrom', TMode>({
    abi: iCrestABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCrestABI}__.
 */
export function usePrepareICrestWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof iCrestABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: iCrestABI, ...config } as UsePrepareContractWriteConfig<
    typeof iCrestABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareICrestApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCrestABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCrestABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iCrestABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareICrestBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCrestABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCrestABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iCrestABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareICrestMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCrestABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCrestABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iCrestABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"mintSpecific"`.
 */
export function usePrepareICrestMintSpecific(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCrestABI, 'mintSpecific'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCrestABI,
    functionName: 'mintSpecific',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iCrestABI, 'mintSpecific'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareICrestSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCrestABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCrestABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iCrestABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareICrestSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCrestABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCrestABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iCrestABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iCrestABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareICrestTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iCrestABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iCrestABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iCrestABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCrestABI}__.
 */
export function useICrestEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iCrestABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: iCrestABI, ...config } as UseContractEventConfig<
    typeof iCrestABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCrestABI}__ and `eventName` set to `"Approval"`.
 */
export function useICrestApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof iCrestABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iCrestABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof iCrestABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCrestABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useICrestApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof iCrestABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iCrestABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof iCrestABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iCrestABI}__ and `eventName` set to `"Transfer"`.
 */
export function useICrestTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof iCrestABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iCrestABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof iCrestABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__.
 */
export function useIPartsStoreRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iPartsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: iPartsStoreABI, ...config } as UseContractReadConfig<
    typeof iPartsStoreABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"bgColorsCount"`.
 */
export function useIPartsStoreBgColorsCount<
  TFunctionName extends 'bgColorsCount',
  TSelectData = ReadContractResult<typeof iPartsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'bgColorsCount',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"classesCount"`.
 */
export function useIPartsStoreClassesCount<
  TFunctionName extends 'classesCount',
  TSelectData = ReadContractResult<typeof iPartsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'classesCount',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"crownsCount"`.
 */
export function useIPartsStoreCrownsCount<
  TFunctionName extends 'crownsCount',
  TSelectData = ReadContractResult<typeof iPartsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'crownsCount',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"doodadsCount"`.
 */
export function useIPartsStoreDoodadsCount<
  TFunctionName extends 'doodadsCount',
  TSelectData = ReadContractResult<typeof iPartsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'doodadsCount',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"garlandsCount"`.
 */
export function useIPartsStoreGarlandsCount<
  TFunctionName extends 'garlandsCount',
  TSelectData = ReadContractResult<typeof iPartsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'garlandsCount',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"getBgColor"`.
 */
export function useIPartsStoreGetBgColor<
  TFunctionName extends 'getBgColor',
  TSelectData = ReadContractResult<typeof iPartsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'getBgColor',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"getClass"`.
 */
export function useIPartsStoreGetClass<
  TFunctionName extends 'getClass',
  TSelectData = ReadContractResult<typeof iPartsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'getClass',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"getCrown"`.
 */
export function useIPartsStoreGetCrown<
  TFunctionName extends 'getCrown',
  TSelectData = ReadContractResult<typeof iPartsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'getCrown',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"getDoodad"`.
 */
export function useIPartsStoreGetDoodad<
  TFunctionName extends 'getDoodad',
  TSelectData = ReadContractResult<typeof iPartsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'getDoodad',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"getGarland"`.
 */
export function useIPartsStoreGetGarland<
  TFunctionName extends 'getGarland',
  TSelectData = ReadContractResult<typeof iPartsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'getGarland',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"getNogglesColor"`.
 */
export function useIPartsStoreGetNogglesColor<
  TFunctionName extends 'getNogglesColor',
  TSelectData = ReadContractResult<typeof iPartsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'getNogglesColor',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"getQuadrantPalette"`.
 */
export function useIPartsStoreGetQuadrantPalette<
  TFunctionName extends 'getQuadrantPalette',
  TSelectData = ReadContractResult<typeof iPartsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'getQuadrantPalette',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"getRep"`.
 */
export function useIPartsStoreGetRep<
  TFunctionName extends 'getRep',
  TSelectData = ReadContractResult<typeof iPartsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'getRep',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"getShield"`.
 */
export function useIPartsStoreGetShield<
  TFunctionName extends 'getShield',
  TSelectData = ReadContractResult<typeof iPartsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'getShield',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"getSkill"`.
 */
export function useIPartsStoreGetSkill<
  TFunctionName extends 'getSkill',
  TSelectData = ReadContractResult<typeof iPartsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'getSkill',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"getTrait"`.
 */
export function useIPartsStoreGetTrait<
  TFunctionName extends 'getTrait',
  TSelectData = ReadContractResult<typeof iPartsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'getTrait',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"nogglesColorsCount"`.
 */
export function useIPartsStoreNogglesColorsCount<
  TFunctionName extends 'nogglesColorsCount',
  TSelectData = ReadContractResult<typeof iPartsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'nogglesColorsCount',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"quadrantPalettesCount"`.
 */
export function useIPartsStoreQuadrantPalettesCount<
  TFunctionName extends 'quadrantPalettesCount',
  TSelectData = ReadContractResult<typeof iPartsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'quadrantPalettesCount',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"repsCount"`.
 */
export function useIPartsStoreRepsCount<
  TFunctionName extends 'repsCount',
  TSelectData = ReadContractResult<typeof iPartsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'repsCount',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"shieldsCount"`.
 */
export function useIPartsStoreShieldsCount<
  TFunctionName extends 'shieldsCount',
  TSelectData = ReadContractResult<typeof iPartsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'shieldsCount',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"skillsCount"`.
 */
export function useIPartsStoreSkillsCount<
  TFunctionName extends 'skillsCount',
  TSelectData = ReadContractResult<typeof iPartsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'skillsCount',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"traitsCount"`.
 */
export function useIPartsStoreTraitsCount<
  TFunctionName extends 'traitsCount',
  TSelectData = ReadContractResult<typeof iPartsStoreABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPartsStoreABI,
    functionName: 'traitsCount',
    ...config,
  } as UseContractReadConfig<typeof iPartsStoreABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__.
 */
export function useIPartsStoreWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iPartsStoreABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iPartsStoreABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iPartsStoreABI, TFunctionName, TMode>({
    abi: iPartsStoreABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addBgColor"`.
 */
export function useIPartsStoreAddBgColor<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iPartsStoreABI, 'addBgColor'>['request']['abi'],
        'addBgColor',
        TMode
      > & { functionName?: 'addBgColor' }
    : UseContractWriteConfig<typeof iPartsStoreABI, 'addBgColor', TMode> & {
        abi?: never
        functionName?: 'addBgColor'
      } = {} as any,
) {
  return useContractWrite<typeof iPartsStoreABI, 'addBgColor', TMode>({
    abi: iPartsStoreABI,
    functionName: 'addBgColor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addClass"`.
 */
export function useIPartsStoreAddClass<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iPartsStoreABI, 'addClass'>['request']['abi'],
        'addClass',
        TMode
      > & { functionName?: 'addClass' }
    : UseContractWriteConfig<typeof iPartsStoreABI, 'addClass', TMode> & {
        abi?: never
        functionName?: 'addClass'
      } = {} as any,
) {
  return useContractWrite<typeof iPartsStoreABI, 'addClass', TMode>({
    abi: iPartsStoreABI,
    functionName: 'addClass',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addCrown"`.
 */
export function useIPartsStoreAddCrown<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iPartsStoreABI, 'addCrown'>['request']['abi'],
        'addCrown',
        TMode
      > & { functionName?: 'addCrown' }
    : UseContractWriteConfig<typeof iPartsStoreABI, 'addCrown', TMode> & {
        abi?: never
        functionName?: 'addCrown'
      } = {} as any,
) {
  return useContractWrite<typeof iPartsStoreABI, 'addCrown', TMode>({
    abi: iPartsStoreABI,
    functionName: 'addCrown',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addDoodad"`.
 */
export function useIPartsStoreAddDoodad<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iPartsStoreABI, 'addDoodad'>['request']['abi'],
        'addDoodad',
        TMode
      > & { functionName?: 'addDoodad' }
    : UseContractWriteConfig<typeof iPartsStoreABI, 'addDoodad', TMode> & {
        abi?: never
        functionName?: 'addDoodad'
      } = {} as any,
) {
  return useContractWrite<typeof iPartsStoreABI, 'addDoodad', TMode>({
    abi: iPartsStoreABI,
    functionName: 'addDoodad',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addGarland"`.
 */
export function useIPartsStoreAddGarland<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iPartsStoreABI, 'addGarland'>['request']['abi'],
        'addGarland',
        TMode
      > & { functionName?: 'addGarland' }
    : UseContractWriteConfig<typeof iPartsStoreABI, 'addGarland', TMode> & {
        abi?: never
        functionName?: 'addGarland'
      } = {} as any,
) {
  return useContractWrite<typeof iPartsStoreABI, 'addGarland', TMode>({
    abi: iPartsStoreABI,
    functionName: 'addGarland',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addNogglesColor"`.
 */
export function useIPartsStoreAddNogglesColor<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iPartsStoreABI, 'addNogglesColor'>['request']['abi'],
        'addNogglesColor',
        TMode
      > & { functionName?: 'addNogglesColor' }
    : UseContractWriteConfig<typeof iPartsStoreABI, 'addNogglesColor', TMode> & {
        abi?: never
        functionName?: 'addNogglesColor'
      } = {} as any,
) {
  return useContractWrite<typeof iPartsStoreABI, 'addNogglesColor', TMode>({
    abi: iPartsStoreABI,
    functionName: 'addNogglesColor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addQuadrantPalette"`.
 */
export function useIPartsStoreAddQuadrantPalette<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iPartsStoreABI, 'addQuadrantPalette'>['request']['abi'],
        'addQuadrantPalette',
        TMode
      > & { functionName?: 'addQuadrantPalette' }
    : UseContractWriteConfig<typeof iPartsStoreABI, 'addQuadrantPalette', TMode> & {
        abi?: never
        functionName?: 'addQuadrantPalette'
      } = {} as any,
) {
  return useContractWrite<typeof iPartsStoreABI, 'addQuadrantPalette', TMode>({
    abi: iPartsStoreABI,
    functionName: 'addQuadrantPalette',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addRep"`.
 */
export function useIPartsStoreAddRep<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iPartsStoreABI, 'addRep'>['request']['abi'],
        'addRep',
        TMode
      > & { functionName?: 'addRep' }
    : UseContractWriteConfig<typeof iPartsStoreABI, 'addRep', TMode> & {
        abi?: never
        functionName?: 'addRep'
      } = {} as any,
) {
  return useContractWrite<typeof iPartsStoreABI, 'addRep', TMode>({
    abi: iPartsStoreABI,
    functionName: 'addRep',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addShield"`.
 */
export function useIPartsStoreAddShield<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iPartsStoreABI, 'addShield'>['request']['abi'],
        'addShield',
        TMode
      > & { functionName?: 'addShield' }
    : UseContractWriteConfig<typeof iPartsStoreABI, 'addShield', TMode> & {
        abi?: never
        functionName?: 'addShield'
      } = {} as any,
) {
  return useContractWrite<typeof iPartsStoreABI, 'addShield', TMode>({
    abi: iPartsStoreABI,
    functionName: 'addShield',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addSkill"`.
 */
export function useIPartsStoreAddSkill<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iPartsStoreABI, 'addSkill'>['request']['abi'],
        'addSkill',
        TMode
      > & { functionName?: 'addSkill' }
    : UseContractWriteConfig<typeof iPartsStoreABI, 'addSkill', TMode> & {
        abi?: never
        functionName?: 'addSkill'
      } = {} as any,
) {
  return useContractWrite<typeof iPartsStoreABI, 'addSkill', TMode>({
    abi: iPartsStoreABI,
    functionName: 'addSkill',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addTrait"`.
 */
export function useIPartsStoreAddTrait<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iPartsStoreABI, 'addTrait'>['request']['abi'],
        'addTrait',
        TMode
      > & { functionName?: 'addTrait' }
    : UseContractWriteConfig<typeof iPartsStoreABI, 'addTrait', TMode> & {
        abi?: never
        functionName?: 'addTrait'
      } = {} as any,
) {
  return useContractWrite<typeof iPartsStoreABI, 'addTrait', TMode>({
    abi: iPartsStoreABI,
    functionName: 'addTrait',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"getAllParts"`.
 */
export function useIPartsStoreGetAllParts<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iPartsStoreABI, 'getAllParts'>['request']['abi'],
        'getAllParts',
        TMode
      > & { functionName?: 'getAllParts' }
    : UseContractWriteConfig<typeof iPartsStoreABI, 'getAllParts', TMode> & {
        abi?: never
        functionName?: 'getAllParts'
      } = {} as any,
) {
  return useContractWrite<typeof iPartsStoreABI, 'getAllParts', TMode>({
    abi: iPartsStoreABI,
    functionName: 'getAllParts',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__.
 */
export function usePrepareIPartsStoreWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPartsStoreABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPartsStoreABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPartsStoreABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addBgColor"`.
 */
export function usePrepareIPartsStoreAddBgColor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addBgColor'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPartsStoreABI,
    functionName: 'addBgColor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addBgColor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addClass"`.
 */
export function usePrepareIPartsStoreAddClass(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addClass'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPartsStoreABI,
    functionName: 'addClass',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addClass'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addCrown"`.
 */
export function usePrepareIPartsStoreAddCrown(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addCrown'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPartsStoreABI,
    functionName: 'addCrown',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addCrown'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addDoodad"`.
 */
export function usePrepareIPartsStoreAddDoodad(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addDoodad'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPartsStoreABI,
    functionName: 'addDoodad',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addDoodad'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addGarland"`.
 */
export function usePrepareIPartsStoreAddGarland(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addGarland'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPartsStoreABI,
    functionName: 'addGarland',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addGarland'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addNogglesColor"`.
 */
export function usePrepareIPartsStoreAddNogglesColor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addNogglesColor'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPartsStoreABI,
    functionName: 'addNogglesColor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addNogglesColor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addQuadrantPalette"`.
 */
export function usePrepareIPartsStoreAddQuadrantPalette(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addQuadrantPalette'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPartsStoreABI,
    functionName: 'addQuadrantPalette',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addQuadrantPalette'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addRep"`.
 */
export function usePrepareIPartsStoreAddRep(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addRep'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPartsStoreABI,
    functionName: 'addRep',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addRep'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addShield"`.
 */
export function usePrepareIPartsStoreAddShield(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addShield'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPartsStoreABI,
    functionName: 'addShield',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addShield'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addSkill"`.
 */
export function usePrepareIPartsStoreAddSkill(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addSkill'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPartsStoreABI,
    functionName: 'addSkill',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addSkill'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"addTrait"`.
 */
export function usePrepareIPartsStoreAddTrait(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addTrait'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPartsStoreABI,
    functionName: 'addTrait',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'addTrait'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPartsStoreABI}__ and `functionName` set to `"getAllParts"`.
 */
export function usePrepareIPartsStoreGetAllParts(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'getAllParts'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPartsStoreABI,
    functionName: 'getAllParts',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPartsStoreABI, 'getAllParts'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dnaManagerABI}__.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0xD9A1161E19E4B0811E77EDEAe7141b0f66E62280)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0xD9A1161E19E4B0811E77EDEAe7141b0f66E62280)
 * -
 */
export function useDnaManagerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof dnaManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof dnaManagerABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof dnaManagerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: dnaManagerABI,
    address: dnaManagerAddress[chainId as keyof typeof dnaManagerAddress],
    ...config,
  } as UseContractReadConfig<typeof dnaManagerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dnaManagerABI}__ and `functionName` set to `"composeDna"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0xD9A1161E19E4B0811E77EDEAe7141b0f66E62280)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0xD9A1161E19E4B0811E77EDEAe7141b0f66E62280)
 * -
 */
export function useDnaManagerComposeDna<
  TFunctionName extends 'composeDna',
  TSelectData = ReadContractResult<typeof dnaManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof dnaManagerABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof dnaManagerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: dnaManagerABI,
    address: dnaManagerAddress[chainId as keyof typeof dnaManagerAddress],
    functionName: 'composeDna',
    ...config,
  } as UseContractReadConfig<typeof dnaManagerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dnaManagerABI}__ and `functionName` set to `"decomposeDna"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0xD9A1161E19E4B0811E77EDEAe7141b0f66E62280)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0xD9A1161E19E4B0811E77EDEAe7141b0f66E62280)
 * -
 */
export function useDnaManagerDecomposeDna<
  TFunctionName extends 'decomposeDna',
  TSelectData = ReadContractResult<typeof dnaManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof dnaManagerABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof dnaManagerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: dnaManagerABI,
    address: dnaManagerAddress[chainId as keyof typeof dnaManagerAddress],
    functionName: 'decomposeDna',
    ...config,
  } as UseContractReadConfig<typeof dnaManagerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dnaManagerABI}__ and `functionName` set to `"generateDna"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0xD9A1161E19E4B0811E77EDEAe7141b0f66E62280)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0xD9A1161E19E4B0811E77EDEAe7141b0f66E62280)
 * -
 */
export function useDnaManagerGenerateDna<
  TFunctionName extends 'generateDna',
  TSelectData = ReadContractResult<typeof dnaManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof dnaManagerABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof dnaManagerAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: dnaManagerABI,
    address: dnaManagerAddress[chainId as keyof typeof dnaManagerAddress],
    functionName: 'generateDna',
    ...config,
  } as UseContractReadConfig<typeof dnaManagerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenGeneratorABI}__.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x319D3c22f2eB7F07f12C9ae1b30AB37fa5f00Ebf)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x319D3c22f2eB7F07f12C9ae1b30AB37fa5f00Ebf)
 * -
 */
export function useTokenGeneratorRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof tokenGeneratorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenGeneratorABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof tokenGeneratorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tokenGeneratorABI,
    address: tokenGeneratorAddress[chainId as keyof typeof tokenGeneratorAddress],
    ...config,
  } as UseContractReadConfig<typeof tokenGeneratorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenGeneratorABI}__ and `functionName` set to `"generateTokenURI"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x319D3c22f2eB7F07f12C9ae1b30AB37fa5f00Ebf)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x319D3c22f2eB7F07f12C9ae1b30AB37fa5f00Ebf)
 * -
 */
export function useTokenGeneratorGenerateTokenUri<
  TFunctionName extends 'generateTokenURI',
  TSelectData = ReadContractResult<typeof tokenGeneratorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenGeneratorABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenGeneratorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tokenGeneratorABI,
    address: tokenGeneratorAddress[chainId as keyof typeof tokenGeneratorAddress],
    functionName: 'generateTokenURI',
    ...config,
  } as UseContractReadConfig<typeof tokenGeneratorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenGeneratorABI}__ and `functionName` set to `"getImageParts"`.
 *
 * - [__View Contract on Moonbeam Moonscan__](https://moonscan.io/address/0x319D3c22f2eB7F07f12C9ae1b30AB37fa5f00Ebf)
 * - [__View Contract on Moonbase Alpha Moonscan__](https://moonbase.moonscan.io/address/0x319D3c22f2eB7F07f12C9ae1b30AB37fa5f00Ebf)
 * -
 */
export function useTokenGeneratorGetImageParts<
  TFunctionName extends 'getImageParts',
  TSelectData = ReadContractResult<typeof tokenGeneratorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenGeneratorABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof tokenGeneratorAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: tokenGeneratorABI,
    address: tokenGeneratorAddress[chainId as keyof typeof tokenGeneratorAddress],
    functionName: 'getImageParts',
    ...config,
  } as UseContractReadConfig<typeof tokenGeneratorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: ownableABI, ...config } as UseContractReadConfig<
    typeof ownableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ownableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ownableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, TFunctionName, TMode>({
    abi: ownableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ownableABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof ownableABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, 'renounceOwnership', TMode>({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ownableABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof ownableABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, 'transferOwnership', TMode>({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function usePrepareOwnableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ownableABI, ...config } as UsePrepareContractWriteConfig<
    typeof ownableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ownableABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ownableABI, ...config } as UseContractEventConfig<
    typeof ownableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__.
 */
export function useGovernorRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof governorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: governorABI, ...config } as UseContractReadConfig<
    typeof governorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"BALLOT_TYPEHASH"`.
 */
export function useGovernorBallotTypehash<
  TFunctionName extends 'BALLOT_TYPEHASH',
  TSelectData = ReadContractResult<typeof governorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'BALLOT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"COUNTING_MODE"`.
 */
export function useGovernorCountingMode<
  TFunctionName extends 'COUNTING_MODE',
  TSelectData = ReadContractResult<typeof governorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'COUNTING_MODE',
    ...config,
  } as UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"EXTENDED_BALLOT_TYPEHASH"`.
 */
export function useGovernorExtendedBallotTypehash<
  TFunctionName extends 'EXTENDED_BALLOT_TYPEHASH',
  TSelectData = ReadContractResult<typeof governorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'EXTENDED_BALLOT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"getVotes"`.
 */
export function useGovernorGetVotes<
  TFunctionName extends 'getVotes',
  TSelectData = ReadContractResult<typeof governorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"getVotesWithParams"`.
 */
export function useGovernorGetVotesWithParams<
  TFunctionName extends 'getVotesWithParams',
  TSelectData = ReadContractResult<typeof governorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'getVotesWithParams',
    ...config,
  } as UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"hasVoted"`.
 */
export function useGovernorHasVoted<
  TFunctionName extends 'hasVoted',
  TSelectData = ReadContractResult<typeof governorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'hasVoted',
    ...config,
  } as UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"hashProposal"`.
 */
export function useGovernorHashProposal<
  TFunctionName extends 'hashProposal',
  TSelectData = ReadContractResult<typeof governorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'hashProposal',
    ...config,
  } as UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"name"`.
 */
export function useGovernorName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof governorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"proposalDeadline"`.
 */
export function useGovernorProposalDeadline<
  TFunctionName extends 'proposalDeadline',
  TSelectData = ReadContractResult<typeof governorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'proposalDeadline',
    ...config,
  } as UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"proposalSnapshot"`.
 */
export function useGovernorProposalSnapshot<
  TFunctionName extends 'proposalSnapshot',
  TSelectData = ReadContractResult<typeof governorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'proposalSnapshot',
    ...config,
  } as UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"proposalThreshold"`.
 */
export function useGovernorProposalThreshold<
  TFunctionName extends 'proposalThreshold',
  TSelectData = ReadContractResult<typeof governorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'proposalThreshold',
    ...config,
  } as UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"quorum"`.
 */
export function useGovernorQuorum<
  TFunctionName extends 'quorum',
  TSelectData = ReadContractResult<typeof governorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'quorum',
    ...config,
  } as UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"state"`.
 */
export function useGovernorState<
  TFunctionName extends 'state',
  TSelectData = ReadContractResult<typeof governorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'state',
    ...config,
  } as UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useGovernorSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof governorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"version"`.
 */
export function useGovernorVersion<
  TFunctionName extends 'version',
  TSelectData = ReadContractResult<typeof governorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'version',
    ...config,
  } as UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"votingDelay"`.
 */
export function useGovernorVotingDelay<
  TFunctionName extends 'votingDelay',
  TSelectData = ReadContractResult<typeof governorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'votingDelay',
    ...config,
  } as UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"votingPeriod"`.
 */
export function useGovernorVotingPeriod<
  TFunctionName extends 'votingPeriod',
  TSelectData = ReadContractResult<typeof governorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorABI,
    functionName: 'votingPeriod',
    ...config,
  } as UseContractReadConfig<typeof governorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorABI}__.
 */
export function useGovernorWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof governorABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof governorABI, TFunctionName, TMode>({
    abi: governorABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"castVote"`.
 */
export function useGovernorCastVote<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorABI, 'castVote'>['request']['abi'],
        'castVote',
        TMode
      > & { functionName?: 'castVote' }
    : UseContractWriteConfig<typeof governorABI, 'castVote', TMode> & {
        abi?: never
        functionName?: 'castVote'
      } = {} as any,
) {
  return useContractWrite<typeof governorABI, 'castVote', TMode>({
    abi: governorABI,
    functionName: 'castVote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function useGovernorCastVoteBySig<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorABI, 'castVoteBySig'>['request']['abi'],
        'castVoteBySig',
        TMode
      > & { functionName?: 'castVoteBySig' }
    : UseContractWriteConfig<typeof governorABI, 'castVoteBySig', TMode> & {
        abi?: never
        functionName?: 'castVoteBySig'
      } = {} as any,
) {
  return useContractWrite<typeof governorABI, 'castVoteBySig', TMode>({
    abi: governorABI,
    functionName: 'castVoteBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function useGovernorCastVoteWithReason<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorABI, 'castVoteWithReason'>['request']['abi'],
        'castVoteWithReason',
        TMode
      > & { functionName?: 'castVoteWithReason' }
    : UseContractWriteConfig<typeof governorABI, 'castVoteWithReason', TMode> & {
        abi?: never
        functionName?: 'castVoteWithReason'
      } = {} as any,
) {
  return useContractWrite<typeof governorABI, 'castVoteWithReason', TMode>({
    abi: governorABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function useGovernorCastVoteWithReasonAndParams<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governorABI,
          'castVoteWithReasonAndParams'
        >['request']['abi'],
        'castVoteWithReasonAndParams',
        TMode
      > & { functionName?: 'castVoteWithReasonAndParams' }
    : UseContractWriteConfig<typeof governorABI, 'castVoteWithReasonAndParams', TMode> & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParams'
      } = {} as any,
) {
  return useContractWrite<typeof governorABI, 'castVoteWithReasonAndParams', TMode>({
    abi: governorABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function useGovernorCastVoteWithReasonAndParamsBySig<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governorABI,
          'castVoteWithReasonAndParamsBySig'
        >['request']['abi'],
        'castVoteWithReasonAndParamsBySig',
        TMode
      > & { functionName?: 'castVoteWithReasonAndParamsBySig' }
    : UseContractWriteConfig<typeof governorABI, 'castVoteWithReasonAndParamsBySig', TMode> & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParamsBySig'
      } = {} as any,
) {
  return useContractWrite<typeof governorABI, 'castVoteWithReasonAndParamsBySig', TMode>({
    abi: governorABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"execute"`.
 */
export function useGovernorExecute<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorABI, 'execute'>['request']['abi'],
        'execute',
        TMode
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<typeof governorABI, 'execute', TMode> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<typeof governorABI, 'execute', TMode>({
    abi: governorABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useGovernorOnErc1155BatchReceived<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorABI, 'onERC1155BatchReceived'>['request']['abi'],
        'onERC1155BatchReceived',
        TMode
      > & { functionName?: 'onERC1155BatchReceived' }
    : UseContractWriteConfig<typeof governorABI, 'onERC1155BatchReceived', TMode> & {
        abi?: never
        functionName?: 'onERC1155BatchReceived'
      } = {} as any,
) {
  return useContractWrite<typeof governorABI, 'onERC1155BatchReceived', TMode>({
    abi: governorABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useGovernorOnErc1155Received<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorABI, 'onERC1155Received'>['request']['abi'],
        'onERC1155Received',
        TMode
      > & { functionName?: 'onERC1155Received' }
    : UseContractWriteConfig<typeof governorABI, 'onERC1155Received', TMode> & {
        abi?: never
        functionName?: 'onERC1155Received'
      } = {} as any,
) {
  return useContractWrite<typeof governorABI, 'onERC1155Received', TMode>({
    abi: governorABI,
    functionName: 'onERC1155Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useGovernorOnErc721Received<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorABI, 'onERC721Received'>['request']['abi'],
        'onERC721Received',
        TMode
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<typeof governorABI, 'onERC721Received', TMode> & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<typeof governorABI, 'onERC721Received', TMode>({
    abi: governorABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"propose"`.
 */
export function useGovernorPropose<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorABI, 'propose'>['request']['abi'],
        'propose',
        TMode
      > & { functionName?: 'propose' }
    : UseContractWriteConfig<typeof governorABI, 'propose', TMode> & {
        abi?: never
        functionName?: 'propose'
      } = {} as any,
) {
  return useContractWrite<typeof governorABI, 'propose', TMode>({
    abi: governorABI,
    functionName: 'propose',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"relay"`.
 */
export function useGovernorRelay<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorABI, 'relay'>['request']['abi'],
        'relay',
        TMode
      > & { functionName?: 'relay' }
    : UseContractWriteConfig<typeof governorABI, 'relay', TMode> & {
        abi?: never
        functionName?: 'relay'
      } = {} as any,
) {
  return useContractWrite<typeof governorABI, 'relay', TMode>({
    abi: governorABI,
    functionName: 'relay',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorABI}__.
 */
export function usePrepareGovernorWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof governorABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: governorABI, ...config } as UsePrepareContractWriteConfig<
    typeof governorABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"castVote"`.
 */
export function usePrepareGovernorCastVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorABI, 'castVote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorABI,
    functionName: 'castVote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorABI, 'castVote'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function usePrepareGovernorCastVoteBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorABI, 'castVoteBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorABI,
    functionName: 'castVoteBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorABI, 'castVoteBySig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function usePrepareGovernorCastVoteWithReason(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorABI, 'castVoteWithReason'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorABI, 'castVoteWithReason'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function usePrepareGovernorCastVoteWithReasonAndParams(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorABI, 'castVoteWithReasonAndParams'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorABI, 'castVoteWithReasonAndParams'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function usePrepareGovernorCastVoteWithReasonAndParamsBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorABI, 'castVoteWithReasonAndParamsBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorABI, 'castVoteWithReasonAndParamsBySig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareGovernorExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function usePrepareGovernorOnErc1155BatchReceived(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorABI, 'onERC1155BatchReceived'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorABI, 'onERC1155BatchReceived'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function usePrepareGovernorOnErc1155Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorABI, 'onERC1155Received'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorABI,
    functionName: 'onERC1155Received',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorABI, 'onERC1155Received'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareGovernorOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorABI, 'onERC721Received'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorABI, 'onERC721Received'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"propose"`.
 */
export function usePrepareGovernorPropose(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorABI, 'propose'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorABI,
    functionName: 'propose',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorABI, 'propose'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorABI}__ and `functionName` set to `"relay"`.
 */
export function usePrepareGovernorRelay(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorABI, 'relay'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorABI,
    functionName: 'relay',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorABI, 'relay'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorABI}__.
 */
export function useGovernorEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof governorABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: governorABI, ...config } as UseContractEventConfig<
    typeof governorABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorABI}__ and `eventName` set to `"ProposalCanceled"`.
 */
export function useGovernorProposalCanceledEvent(
  config: Omit<
    UseContractEventConfig<typeof governorABI, 'ProposalCanceled'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorABI,
    eventName: 'ProposalCanceled',
    ...config,
  } as UseContractEventConfig<typeof governorABI, 'ProposalCanceled'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorABI}__ and `eventName` set to `"ProposalCreated"`.
 */
export function useGovernorProposalCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof governorABI, 'ProposalCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorABI,
    eventName: 'ProposalCreated',
    ...config,
  } as UseContractEventConfig<typeof governorABI, 'ProposalCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorABI}__ and `eventName` set to `"ProposalExecuted"`.
 */
export function useGovernorProposalExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof governorABI, 'ProposalExecuted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorABI,
    eventName: 'ProposalExecuted',
    ...config,
  } as UseContractEventConfig<typeof governorABI, 'ProposalExecuted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorABI}__ and `eventName` set to `"VoteCast"`.
 */
export function useGovernorVoteCastEvent(
  config: Omit<
    UseContractEventConfig<typeof governorABI, 'VoteCast'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorABI,
    eventName: 'VoteCast',
    ...config,
  } as UseContractEventConfig<typeof governorABI, 'VoteCast'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorABI}__ and `eventName` set to `"VoteCastWithParams"`.
 */
export function useGovernorVoteCastWithParamsEvent(
  config: Omit<
    UseContractEventConfig<typeof governorABI, 'VoteCastWithParams'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorABI,
    eventName: 'VoteCastWithParams',
    ...config,
  } as UseContractEventConfig<typeof governorABI, 'VoteCastWithParams'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorABI}__.
 */
export function useIGovernorRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: iGovernorABI, ...config } as UseContractReadConfig<
    typeof iGovernorABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"COUNTING_MODE"`.
 */
export function useIGovernorCountingMode<
  TFunctionName extends 'COUNTING_MODE',
  TSelectData = ReadContractResult<typeof iGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorABI,
    functionName: 'COUNTING_MODE',
    ...config,
  } as UseContractReadConfig<typeof iGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"getVotes"`.
 */
export function useIGovernorGetVotes<
  TFunctionName extends 'getVotes',
  TSelectData = ReadContractResult<typeof iGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof iGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"getVotesWithParams"`.
 */
export function useIGovernorGetVotesWithParams<
  TFunctionName extends 'getVotesWithParams',
  TSelectData = ReadContractResult<typeof iGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorABI,
    functionName: 'getVotesWithParams',
    ...config,
  } as UseContractReadConfig<typeof iGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"hasVoted"`.
 */
export function useIGovernorHasVoted<
  TFunctionName extends 'hasVoted',
  TSelectData = ReadContractResult<typeof iGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorABI,
    functionName: 'hasVoted',
    ...config,
  } as UseContractReadConfig<typeof iGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"hashProposal"`.
 */
export function useIGovernorHashProposal<
  TFunctionName extends 'hashProposal',
  TSelectData = ReadContractResult<typeof iGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorABI,
    functionName: 'hashProposal',
    ...config,
  } as UseContractReadConfig<typeof iGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"name"`.
 */
export function useIGovernorName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof iGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof iGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"proposalDeadline"`.
 */
export function useIGovernorProposalDeadline<
  TFunctionName extends 'proposalDeadline',
  TSelectData = ReadContractResult<typeof iGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorABI,
    functionName: 'proposalDeadline',
    ...config,
  } as UseContractReadConfig<typeof iGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"proposalSnapshot"`.
 */
export function useIGovernorProposalSnapshot<
  TFunctionName extends 'proposalSnapshot',
  TSelectData = ReadContractResult<typeof iGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorABI,
    functionName: 'proposalSnapshot',
    ...config,
  } as UseContractReadConfig<typeof iGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"quorum"`.
 */
export function useIGovernorQuorum<
  TFunctionName extends 'quorum',
  TSelectData = ReadContractResult<typeof iGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorABI,
    functionName: 'quorum',
    ...config,
  } as UseContractReadConfig<typeof iGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"state"`.
 */
export function useIGovernorState<
  TFunctionName extends 'state',
  TSelectData = ReadContractResult<typeof iGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorABI,
    functionName: 'state',
    ...config,
  } as UseContractReadConfig<typeof iGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIGovernorSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof iGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof iGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"version"`.
 */
export function useIGovernorVersion<
  TFunctionName extends 'version',
  TSelectData = ReadContractResult<typeof iGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorABI,
    functionName: 'version',
    ...config,
  } as UseContractReadConfig<typeof iGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"votingDelay"`.
 */
export function useIGovernorVotingDelay<
  TFunctionName extends 'votingDelay',
  TSelectData = ReadContractResult<typeof iGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorABI,
    functionName: 'votingDelay',
    ...config,
  } as UseContractReadConfig<typeof iGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"votingPeriod"`.
 */
export function useIGovernorVotingPeriod<
  TFunctionName extends 'votingPeriod',
  TSelectData = ReadContractResult<typeof iGovernorABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGovernorABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iGovernorABI,
    functionName: 'votingPeriod',
    ...config,
  } as UseContractReadConfig<typeof iGovernorABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorABI}__.
 */
export function useIGovernorWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iGovernorABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iGovernorABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iGovernorABI, TFunctionName, TMode>({
    abi: iGovernorABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"castVote"`.
 */
export function useIGovernorCastVote<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iGovernorABI, 'castVote'>['request']['abi'],
        'castVote',
        TMode
      > & { functionName?: 'castVote' }
    : UseContractWriteConfig<typeof iGovernorABI, 'castVote', TMode> & {
        abi?: never
        functionName?: 'castVote'
      } = {} as any,
) {
  return useContractWrite<typeof iGovernorABI, 'castVote', TMode>({
    abi: iGovernorABI,
    functionName: 'castVote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function useIGovernorCastVoteBySig<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iGovernorABI, 'castVoteBySig'>['request']['abi'],
        'castVoteBySig',
        TMode
      > & { functionName?: 'castVoteBySig' }
    : UseContractWriteConfig<typeof iGovernorABI, 'castVoteBySig', TMode> & {
        abi?: never
        functionName?: 'castVoteBySig'
      } = {} as any,
) {
  return useContractWrite<typeof iGovernorABI, 'castVoteBySig', TMode>({
    abi: iGovernorABI,
    functionName: 'castVoteBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function useIGovernorCastVoteWithReason<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iGovernorABI, 'castVoteWithReason'>['request']['abi'],
        'castVoteWithReason',
        TMode
      > & { functionName?: 'castVoteWithReason' }
    : UseContractWriteConfig<typeof iGovernorABI, 'castVoteWithReason', TMode> & {
        abi?: never
        functionName?: 'castVoteWithReason'
      } = {} as any,
) {
  return useContractWrite<typeof iGovernorABI, 'castVoteWithReason', TMode>({
    abi: iGovernorABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function useIGovernorCastVoteWithReasonAndParams<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iGovernorABI,
          'castVoteWithReasonAndParams'
        >['request']['abi'],
        'castVoteWithReasonAndParams',
        TMode
      > & { functionName?: 'castVoteWithReasonAndParams' }
    : UseContractWriteConfig<typeof iGovernorABI, 'castVoteWithReasonAndParams', TMode> & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParams'
      } = {} as any,
) {
  return useContractWrite<typeof iGovernorABI, 'castVoteWithReasonAndParams', TMode>({
    abi: iGovernorABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function useIGovernorCastVoteWithReasonAndParamsBySig<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iGovernorABI,
          'castVoteWithReasonAndParamsBySig'
        >['request']['abi'],
        'castVoteWithReasonAndParamsBySig',
        TMode
      > & { functionName?: 'castVoteWithReasonAndParamsBySig' }
    : UseContractWriteConfig<typeof iGovernorABI, 'castVoteWithReasonAndParamsBySig', TMode> & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParamsBySig'
      } = {} as any,
) {
  return useContractWrite<typeof iGovernorABI, 'castVoteWithReasonAndParamsBySig', TMode>({
    abi: iGovernorABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"execute"`.
 */
export function useIGovernorExecute<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iGovernorABI, 'execute'>['request']['abi'],
        'execute',
        TMode
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<typeof iGovernorABI, 'execute', TMode> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<typeof iGovernorABI, 'execute', TMode>({
    abi: iGovernorABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"propose"`.
 */
export function useIGovernorPropose<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iGovernorABI, 'propose'>['request']['abi'],
        'propose',
        TMode
      > & { functionName?: 'propose' }
    : UseContractWriteConfig<typeof iGovernorABI, 'propose', TMode> & {
        abi?: never
        functionName?: 'propose'
      } = {} as any,
) {
  return useContractWrite<typeof iGovernorABI, 'propose', TMode>({
    abi: iGovernorABI,
    functionName: 'propose',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorABI}__.
 */
export function usePrepareIGovernorWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGovernorABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({ abi: iGovernorABI, ...config } as UsePrepareContractWriteConfig<
    typeof iGovernorABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"castVote"`.
 */
export function usePrepareIGovernorCastVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGovernorABI, 'castVote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorABI,
    functionName: 'castVote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGovernorABI, 'castVote'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function usePrepareIGovernorCastVoteBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGovernorABI, 'castVoteBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorABI,
    functionName: 'castVoteBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGovernorABI, 'castVoteBySig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function usePrepareIGovernorCastVoteWithReason(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGovernorABI, 'castVoteWithReason'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGovernorABI, 'castVoteWithReason'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function usePrepareIGovernorCastVoteWithReasonAndParams(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGovernorABI, 'castVoteWithReasonAndParams'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGovernorABI, 'castVoteWithReasonAndParams'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function usePrepareIGovernorCastVoteWithReasonAndParamsBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGovernorABI, 'castVoteWithReasonAndParamsBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGovernorABI, 'castVoteWithReasonAndParamsBySig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareIGovernorExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGovernorABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGovernorABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGovernorABI}__ and `functionName` set to `"propose"`.
 */
export function usePrepareIGovernorPropose(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGovernorABI, 'propose'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGovernorABI,
    functionName: 'propose',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGovernorABI, 'propose'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGovernorABI}__.
 */
export function useIGovernorEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iGovernorABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: iGovernorABI, ...config } as UseContractEventConfig<
    typeof iGovernorABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGovernorABI}__ and `eventName` set to `"ProposalCanceled"`.
 */
export function useIGovernorProposalCanceledEvent(
  config: Omit<
    UseContractEventConfig<typeof iGovernorABI, 'ProposalCanceled'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iGovernorABI,
    eventName: 'ProposalCanceled',
    ...config,
  } as UseContractEventConfig<typeof iGovernorABI, 'ProposalCanceled'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGovernorABI}__ and `eventName` set to `"ProposalCreated"`.
 */
export function useIGovernorProposalCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iGovernorABI, 'ProposalCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iGovernorABI,
    eventName: 'ProposalCreated',
    ...config,
  } as UseContractEventConfig<typeof iGovernorABI, 'ProposalCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGovernorABI}__ and `eventName` set to `"ProposalExecuted"`.
 */
export function useIGovernorProposalExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof iGovernorABI, 'ProposalExecuted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iGovernorABI,
    eventName: 'ProposalExecuted',
    ...config,
  } as UseContractEventConfig<typeof iGovernorABI, 'ProposalExecuted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGovernorABI}__ and `eventName` set to `"VoteCast"`.
 */
export function useIGovernorVoteCastEvent(
  config: Omit<
    UseContractEventConfig<typeof iGovernorABI, 'VoteCast'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iGovernorABI,
    eventName: 'VoteCast',
    ...config,
  } as UseContractEventConfig<typeof iGovernorABI, 'VoteCast'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGovernorABI}__ and `eventName` set to `"VoteCastWithParams"`.
 */
export function useIGovernorVoteCastWithParamsEvent(
  config: Omit<
    UseContractEventConfig<typeof iGovernorABI, 'VoteCastWithParams'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iGovernorABI,
    eventName: 'VoteCastWithParams',
    ...config,
  } as UseContractEventConfig<typeof iGovernorABI, 'VoteCastWithParams'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pausableABI}__.
 */
export function usePausableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pausableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pausableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: pausableABI, ...config } as UseContractReadConfig<
    typeof pausableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pausableABI}__ and `functionName` set to `"paused"`.
 */
export function usePausablePaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof pausableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pausableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pausableABI,
    functionName: 'paused',
    ...config,
  } as UseContractReadConfig<typeof pausableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableABI}__.
 */
export function usePausableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof pausableABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: pausableABI, ...config } as UseContractEventConfig<
    typeof pausableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableABI}__ and `eventName` set to `"Paused"`.
 */
export function usePausablePausedEvent(
  config: Omit<
    UseContractEventConfig<typeof pausableABI, 'Paused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pausableABI,
    eventName: 'Paused',
    ...config,
  } as UseContractEventConfig<typeof pausableABI, 'Paused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableABI}__ and `eventName` set to `"Unpaused"`.
 */
export function usePausableUnpausedEvent(
  config: Omit<
    UseContractEventConfig<typeof pausableABI, 'Unpaused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pausableABI,
    eventName: 'Unpaused',
    ...config,
  } as UseContractEventConfig<typeof pausableABI, 'Unpaused'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCountingSimpleABI}__.
 */
export function useGovernorCountingSimpleRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof governorCountingSimpleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: governorCountingSimpleABI, ...config } as UseContractReadConfig<
    typeof governorCountingSimpleABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"BALLOT_TYPEHASH"`.
 */
export function useGovernorCountingSimpleBallotTypehash<
  TFunctionName extends 'BALLOT_TYPEHASH',
  TSelectData = ReadContractResult<typeof governorCountingSimpleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCountingSimpleABI,
    functionName: 'BALLOT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"COUNTING_MODE"`.
 */
export function useGovernorCountingSimpleCountingMode<
  TFunctionName extends 'COUNTING_MODE',
  TSelectData = ReadContractResult<typeof governorCountingSimpleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCountingSimpleABI,
    functionName: 'COUNTING_MODE',
    ...config,
  } as UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"EXTENDED_BALLOT_TYPEHASH"`.
 */
export function useGovernorCountingSimpleExtendedBallotTypehash<
  TFunctionName extends 'EXTENDED_BALLOT_TYPEHASH',
  TSelectData = ReadContractResult<typeof governorCountingSimpleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCountingSimpleABI,
    functionName: 'EXTENDED_BALLOT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"getVotes"`.
 */
export function useGovernorCountingSimpleGetVotes<
  TFunctionName extends 'getVotes',
  TSelectData = ReadContractResult<typeof governorCountingSimpleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCountingSimpleABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"getVotesWithParams"`.
 */
export function useGovernorCountingSimpleGetVotesWithParams<
  TFunctionName extends 'getVotesWithParams',
  TSelectData = ReadContractResult<typeof governorCountingSimpleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCountingSimpleABI,
    functionName: 'getVotesWithParams',
    ...config,
  } as UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"hasVoted"`.
 */
export function useGovernorCountingSimpleHasVoted<
  TFunctionName extends 'hasVoted',
  TSelectData = ReadContractResult<typeof governorCountingSimpleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCountingSimpleABI,
    functionName: 'hasVoted',
    ...config,
  } as UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"hashProposal"`.
 */
export function useGovernorCountingSimpleHashProposal<
  TFunctionName extends 'hashProposal',
  TSelectData = ReadContractResult<typeof governorCountingSimpleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCountingSimpleABI,
    functionName: 'hashProposal',
    ...config,
  } as UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"name"`.
 */
export function useGovernorCountingSimpleName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof governorCountingSimpleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCountingSimpleABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"proposalDeadline"`.
 */
export function useGovernorCountingSimpleProposalDeadline<
  TFunctionName extends 'proposalDeadline',
  TSelectData = ReadContractResult<typeof governorCountingSimpleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCountingSimpleABI,
    functionName: 'proposalDeadline',
    ...config,
  } as UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"proposalSnapshot"`.
 */
export function useGovernorCountingSimpleProposalSnapshot<
  TFunctionName extends 'proposalSnapshot',
  TSelectData = ReadContractResult<typeof governorCountingSimpleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCountingSimpleABI,
    functionName: 'proposalSnapshot',
    ...config,
  } as UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"proposalThreshold"`.
 */
export function useGovernorCountingSimpleProposalThreshold<
  TFunctionName extends 'proposalThreshold',
  TSelectData = ReadContractResult<typeof governorCountingSimpleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCountingSimpleABI,
    functionName: 'proposalThreshold',
    ...config,
  } as UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"proposalVotes"`.
 */
export function useGovernorCountingSimpleProposalVotes<
  TFunctionName extends 'proposalVotes',
  TSelectData = ReadContractResult<typeof governorCountingSimpleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCountingSimpleABI,
    functionName: 'proposalVotes',
    ...config,
  } as UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"quorum"`.
 */
export function useGovernorCountingSimpleQuorum<
  TFunctionName extends 'quorum',
  TSelectData = ReadContractResult<typeof governorCountingSimpleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCountingSimpleABI,
    functionName: 'quorum',
    ...config,
  } as UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"state"`.
 */
export function useGovernorCountingSimpleState<
  TFunctionName extends 'state',
  TSelectData = ReadContractResult<typeof governorCountingSimpleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCountingSimpleABI,
    functionName: 'state',
    ...config,
  } as UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useGovernorCountingSimpleSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof governorCountingSimpleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCountingSimpleABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"version"`.
 */
export function useGovernorCountingSimpleVersion<
  TFunctionName extends 'version',
  TSelectData = ReadContractResult<typeof governorCountingSimpleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCountingSimpleABI,
    functionName: 'version',
    ...config,
  } as UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"votingDelay"`.
 */
export function useGovernorCountingSimpleVotingDelay<
  TFunctionName extends 'votingDelay',
  TSelectData = ReadContractResult<typeof governorCountingSimpleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCountingSimpleABI,
    functionName: 'votingDelay',
    ...config,
  } as UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"votingPeriod"`.
 */
export function useGovernorCountingSimpleVotingPeriod<
  TFunctionName extends 'votingPeriod',
  TSelectData = ReadContractResult<typeof governorCountingSimpleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorCountingSimpleABI,
    functionName: 'votingPeriod',
    ...config,
  } as UseContractReadConfig<typeof governorCountingSimpleABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorCountingSimpleABI}__.
 */
export function useGovernorCountingSimpleWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorCountingSimpleABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof governorCountingSimpleABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof governorCountingSimpleABI, TFunctionName, TMode>({
    abi: governorCountingSimpleABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"castVote"`.
 */
export function useGovernorCountingSimpleCastVote<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorCountingSimpleABI, 'castVote'>['request']['abi'],
        'castVote',
        TMode
      > & { functionName?: 'castVote' }
    : UseContractWriteConfig<typeof governorCountingSimpleABI, 'castVote', TMode> & {
        abi?: never
        functionName?: 'castVote'
      } = {} as any,
) {
  return useContractWrite<typeof governorCountingSimpleABI, 'castVote', TMode>({
    abi: governorCountingSimpleABI,
    functionName: 'castVote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function useGovernorCountingSimpleCastVoteBySig<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governorCountingSimpleABI,
          'castVoteBySig'
        >['request']['abi'],
        'castVoteBySig',
        TMode
      > & { functionName?: 'castVoteBySig' }
    : UseContractWriteConfig<typeof governorCountingSimpleABI, 'castVoteBySig', TMode> & {
        abi?: never
        functionName?: 'castVoteBySig'
      } = {} as any,
) {
  return useContractWrite<typeof governorCountingSimpleABI, 'castVoteBySig', TMode>({
    abi: governorCountingSimpleABI,
    functionName: 'castVoteBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function useGovernorCountingSimpleCastVoteWithReason<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governorCountingSimpleABI,
          'castVoteWithReason'
        >['request']['abi'],
        'castVoteWithReason',
        TMode
      > & { functionName?: 'castVoteWithReason' }
    : UseContractWriteConfig<typeof governorCountingSimpleABI, 'castVoteWithReason', TMode> & {
        abi?: never
        functionName?: 'castVoteWithReason'
      } = {} as any,
) {
  return useContractWrite<typeof governorCountingSimpleABI, 'castVoteWithReason', TMode>({
    abi: governorCountingSimpleABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function useGovernorCountingSimpleCastVoteWithReasonAndParams<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governorCountingSimpleABI,
          'castVoteWithReasonAndParams'
        >['request']['abi'],
        'castVoteWithReasonAndParams',
        TMode
      > & { functionName?: 'castVoteWithReasonAndParams' }
    : UseContractWriteConfig<
        typeof governorCountingSimpleABI,
        'castVoteWithReasonAndParams',
        TMode
      > & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParams'
      } = {} as any,
) {
  return useContractWrite<typeof governorCountingSimpleABI, 'castVoteWithReasonAndParams', TMode>({
    abi: governorCountingSimpleABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function useGovernorCountingSimpleCastVoteWithReasonAndParamsBySig<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governorCountingSimpleABI,
          'castVoteWithReasonAndParamsBySig'
        >['request']['abi'],
        'castVoteWithReasonAndParamsBySig',
        TMode
      > & { functionName?: 'castVoteWithReasonAndParamsBySig' }
    : UseContractWriteConfig<
        typeof governorCountingSimpleABI,
        'castVoteWithReasonAndParamsBySig',
        TMode
      > & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParamsBySig'
      } = {} as any,
) {
  return useContractWrite<
    typeof governorCountingSimpleABI,
    'castVoteWithReasonAndParamsBySig',
    TMode
  >({
    abi: governorCountingSimpleABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"execute"`.
 */
export function useGovernorCountingSimpleExecute<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorCountingSimpleABI, 'execute'>['request']['abi'],
        'execute',
        TMode
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<typeof governorCountingSimpleABI, 'execute', TMode> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<typeof governorCountingSimpleABI, 'execute', TMode>({
    abi: governorCountingSimpleABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useGovernorCountingSimpleOnErc1155BatchReceived<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governorCountingSimpleABI,
          'onERC1155BatchReceived'
        >['request']['abi'],
        'onERC1155BatchReceived',
        TMode
      > & { functionName?: 'onERC1155BatchReceived' }
    : UseContractWriteConfig<typeof governorCountingSimpleABI, 'onERC1155BatchReceived', TMode> & {
        abi?: never
        functionName?: 'onERC1155BatchReceived'
      } = {} as any,
) {
  return useContractWrite<typeof governorCountingSimpleABI, 'onERC1155BatchReceived', TMode>({
    abi: governorCountingSimpleABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useGovernorCountingSimpleOnErc1155Received<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governorCountingSimpleABI,
          'onERC1155Received'
        >['request']['abi'],
        'onERC1155Received',
        TMode
      > & { functionName?: 'onERC1155Received' }
    : UseContractWriteConfig<typeof governorCountingSimpleABI, 'onERC1155Received', TMode> & {
        abi?: never
        functionName?: 'onERC1155Received'
      } = {} as any,
) {
  return useContractWrite<typeof governorCountingSimpleABI, 'onERC1155Received', TMode>({
    abi: governorCountingSimpleABI,
    functionName: 'onERC1155Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useGovernorCountingSimpleOnErc721Received<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governorCountingSimpleABI,
          'onERC721Received'
        >['request']['abi'],
        'onERC721Received',
        TMode
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<typeof governorCountingSimpleABI, 'onERC721Received', TMode> & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<typeof governorCountingSimpleABI, 'onERC721Received', TMode>({
    abi: governorCountingSimpleABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"propose"`.
 */
export function useGovernorCountingSimplePropose<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorCountingSimpleABI, 'propose'>['request']['abi'],
        'propose',
        TMode
      > & { functionName?: 'propose' }
    : UseContractWriteConfig<typeof governorCountingSimpleABI, 'propose', TMode> & {
        abi?: never
        functionName?: 'propose'
      } = {} as any,
) {
  return useContractWrite<typeof governorCountingSimpleABI, 'propose', TMode>({
    abi: governorCountingSimpleABI,
    functionName: 'propose',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"relay"`.
 */
export function useGovernorCountingSimpleRelay<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorCountingSimpleABI, 'relay'>['request']['abi'],
        'relay',
        TMode
      > & { functionName?: 'relay' }
    : UseContractWriteConfig<typeof governorCountingSimpleABI, 'relay', TMode> & {
        abi?: never
        functionName?: 'relay'
      } = {} as any,
) {
  return useContractWrite<typeof governorCountingSimpleABI, 'relay', TMode>({
    abi: governorCountingSimpleABI,
    functionName: 'relay',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorCountingSimpleABI}__.
 */
export function usePrepareGovernorCountingSimpleWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorCountingSimpleABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorCountingSimpleABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorCountingSimpleABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"castVote"`.
 */
export function usePrepareGovernorCountingSimpleCastVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorCountingSimpleABI, 'castVote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorCountingSimpleABI,
    functionName: 'castVote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorCountingSimpleABI, 'castVote'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function usePrepareGovernorCountingSimpleCastVoteBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorCountingSimpleABI, 'castVoteBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorCountingSimpleABI,
    functionName: 'castVoteBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorCountingSimpleABI, 'castVoteBySig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function usePrepareGovernorCountingSimpleCastVoteWithReason(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorCountingSimpleABI, 'castVoteWithReason'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorCountingSimpleABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorCountingSimpleABI, 'castVoteWithReason'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function usePrepareGovernorCountingSimpleCastVoteWithReasonAndParams(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorCountingSimpleABI, 'castVoteWithReasonAndParams'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorCountingSimpleABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorCountingSimpleABI,
    'castVoteWithReasonAndParams'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function usePrepareGovernorCountingSimpleCastVoteWithReasonAndParamsBySig(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorCountingSimpleABI,
      'castVoteWithReasonAndParamsBySig'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorCountingSimpleABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorCountingSimpleABI,
    'castVoteWithReasonAndParamsBySig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareGovernorCountingSimpleExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorCountingSimpleABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorCountingSimpleABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorCountingSimpleABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function usePrepareGovernorCountingSimpleOnErc1155BatchReceived(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorCountingSimpleABI, 'onERC1155BatchReceived'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorCountingSimpleABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorCountingSimpleABI, 'onERC1155BatchReceived'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function usePrepareGovernorCountingSimpleOnErc1155Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorCountingSimpleABI, 'onERC1155Received'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorCountingSimpleABI,
    functionName: 'onERC1155Received',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorCountingSimpleABI, 'onERC1155Received'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareGovernorCountingSimpleOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorCountingSimpleABI, 'onERC721Received'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorCountingSimpleABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorCountingSimpleABI, 'onERC721Received'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"propose"`.
 */
export function usePrepareGovernorCountingSimplePropose(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorCountingSimpleABI, 'propose'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorCountingSimpleABI,
    functionName: 'propose',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorCountingSimpleABI, 'propose'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `functionName` set to `"relay"`.
 */
export function usePrepareGovernorCountingSimpleRelay(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorCountingSimpleABI, 'relay'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorCountingSimpleABI,
    functionName: 'relay',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorCountingSimpleABI, 'relay'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorCountingSimpleABI}__.
 */
export function useGovernorCountingSimpleEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof governorCountingSimpleABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({ abi: governorCountingSimpleABI, ...config } as UseContractEventConfig<
    typeof governorCountingSimpleABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `eventName` set to `"ProposalCanceled"`.
 */
export function useGovernorCountingSimpleProposalCanceledEvent(
  config: Omit<
    UseContractEventConfig<typeof governorCountingSimpleABI, 'ProposalCanceled'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorCountingSimpleABI,
    eventName: 'ProposalCanceled',
    ...config,
  } as UseContractEventConfig<typeof governorCountingSimpleABI, 'ProposalCanceled'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `eventName` set to `"ProposalCreated"`.
 */
export function useGovernorCountingSimpleProposalCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof governorCountingSimpleABI, 'ProposalCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorCountingSimpleABI,
    eventName: 'ProposalCreated',
    ...config,
  } as UseContractEventConfig<typeof governorCountingSimpleABI, 'ProposalCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `eventName` set to `"ProposalExecuted"`.
 */
export function useGovernorCountingSimpleProposalExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof governorCountingSimpleABI, 'ProposalExecuted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorCountingSimpleABI,
    eventName: 'ProposalExecuted',
    ...config,
  } as UseContractEventConfig<typeof governorCountingSimpleABI, 'ProposalExecuted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `eventName` set to `"VoteCast"`.
 */
export function useGovernorCountingSimpleVoteCastEvent(
  config: Omit<
    UseContractEventConfig<typeof governorCountingSimpleABI, 'VoteCast'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorCountingSimpleABI,
    eventName: 'VoteCast',
    ...config,
  } as UseContractEventConfig<typeof governorCountingSimpleABI, 'VoteCast'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorCountingSimpleABI}__ and `eventName` set to `"VoteCastWithParams"`.
 */
export function useGovernorCountingSimpleVoteCastWithParamsEvent(
  config: Omit<
    UseContractEventConfig<typeof governorCountingSimpleABI, 'VoteCastWithParams'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorCountingSimpleABI,
    eventName: 'VoteCastWithParams',
    ...config,
  } as UseContractEventConfig<typeof governorCountingSimpleABI, 'VoteCastWithParams'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__.
 */
export function useGovernorSettingsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof governorSettingsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: governorSettingsABI, ...config } as UseContractReadConfig<
    typeof governorSettingsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"BALLOT_TYPEHASH"`.
 */
export function useGovernorSettingsBallotTypehash<
  TFunctionName extends 'BALLOT_TYPEHASH',
  TSelectData = ReadContractResult<typeof governorSettingsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'BALLOT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"COUNTING_MODE"`.
 */
export function useGovernorSettingsCountingMode<
  TFunctionName extends 'COUNTING_MODE',
  TSelectData = ReadContractResult<typeof governorSettingsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'COUNTING_MODE',
    ...config,
  } as UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"EXTENDED_BALLOT_TYPEHASH"`.
 */
export function useGovernorSettingsExtendedBallotTypehash<
  TFunctionName extends 'EXTENDED_BALLOT_TYPEHASH',
  TSelectData = ReadContractResult<typeof governorSettingsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'EXTENDED_BALLOT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"getVotes"`.
 */
export function useGovernorSettingsGetVotes<
  TFunctionName extends 'getVotes',
  TSelectData = ReadContractResult<typeof governorSettingsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"getVotesWithParams"`.
 */
export function useGovernorSettingsGetVotesWithParams<
  TFunctionName extends 'getVotesWithParams',
  TSelectData = ReadContractResult<typeof governorSettingsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'getVotesWithParams',
    ...config,
  } as UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"hasVoted"`.
 */
export function useGovernorSettingsHasVoted<
  TFunctionName extends 'hasVoted',
  TSelectData = ReadContractResult<typeof governorSettingsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'hasVoted',
    ...config,
  } as UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"hashProposal"`.
 */
export function useGovernorSettingsHashProposal<
  TFunctionName extends 'hashProposal',
  TSelectData = ReadContractResult<typeof governorSettingsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'hashProposal',
    ...config,
  } as UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"name"`.
 */
export function useGovernorSettingsName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof governorSettingsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"proposalDeadline"`.
 */
export function useGovernorSettingsProposalDeadline<
  TFunctionName extends 'proposalDeadline',
  TSelectData = ReadContractResult<typeof governorSettingsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'proposalDeadline',
    ...config,
  } as UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"proposalSnapshot"`.
 */
export function useGovernorSettingsProposalSnapshot<
  TFunctionName extends 'proposalSnapshot',
  TSelectData = ReadContractResult<typeof governorSettingsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'proposalSnapshot',
    ...config,
  } as UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"proposalThreshold"`.
 */
export function useGovernorSettingsProposalThreshold<
  TFunctionName extends 'proposalThreshold',
  TSelectData = ReadContractResult<typeof governorSettingsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'proposalThreshold',
    ...config,
  } as UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"quorum"`.
 */
export function useGovernorSettingsQuorum<
  TFunctionName extends 'quorum',
  TSelectData = ReadContractResult<typeof governorSettingsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'quorum',
    ...config,
  } as UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"state"`.
 */
export function useGovernorSettingsState<
  TFunctionName extends 'state',
  TSelectData = ReadContractResult<typeof governorSettingsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'state',
    ...config,
  } as UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useGovernorSettingsSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof governorSettingsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"version"`.
 */
export function useGovernorSettingsVersion<
  TFunctionName extends 'version',
  TSelectData = ReadContractResult<typeof governorSettingsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'version',
    ...config,
  } as UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"votingDelay"`.
 */
export function useGovernorSettingsVotingDelay<
  TFunctionName extends 'votingDelay',
  TSelectData = ReadContractResult<typeof governorSettingsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'votingDelay',
    ...config,
  } as UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"votingPeriod"`.
 */
export function useGovernorSettingsVotingPeriod<
  TFunctionName extends 'votingPeriod',
  TSelectData = ReadContractResult<typeof governorSettingsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorSettingsABI,
    functionName: 'votingPeriod',
    ...config,
  } as UseContractReadConfig<typeof governorSettingsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorSettingsABI}__.
 */
export function useGovernorSettingsWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorSettingsABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof governorSettingsABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof governorSettingsABI, TFunctionName, TMode>({
    abi: governorSettingsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"castVote"`.
 */
export function useGovernorSettingsCastVote<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorSettingsABI, 'castVote'>['request']['abi'],
        'castVote',
        TMode
      > & { functionName?: 'castVote' }
    : UseContractWriteConfig<typeof governorSettingsABI, 'castVote', TMode> & {
        abi?: never
        functionName?: 'castVote'
      } = {} as any,
) {
  return useContractWrite<typeof governorSettingsABI, 'castVote', TMode>({
    abi: governorSettingsABI,
    functionName: 'castVote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function useGovernorSettingsCastVoteBySig<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorSettingsABI, 'castVoteBySig'>['request']['abi'],
        'castVoteBySig',
        TMode
      > & { functionName?: 'castVoteBySig' }
    : UseContractWriteConfig<typeof governorSettingsABI, 'castVoteBySig', TMode> & {
        abi?: never
        functionName?: 'castVoteBySig'
      } = {} as any,
) {
  return useContractWrite<typeof governorSettingsABI, 'castVoteBySig', TMode>({
    abi: governorSettingsABI,
    functionName: 'castVoteBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function useGovernorSettingsCastVoteWithReason<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governorSettingsABI,
          'castVoteWithReason'
        >['request']['abi'],
        'castVoteWithReason',
        TMode
      > & { functionName?: 'castVoteWithReason' }
    : UseContractWriteConfig<typeof governorSettingsABI, 'castVoteWithReason', TMode> & {
        abi?: never
        functionName?: 'castVoteWithReason'
      } = {} as any,
) {
  return useContractWrite<typeof governorSettingsABI, 'castVoteWithReason', TMode>({
    abi: governorSettingsABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function useGovernorSettingsCastVoteWithReasonAndParams<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governorSettingsABI,
          'castVoteWithReasonAndParams'
        >['request']['abi'],
        'castVoteWithReasonAndParams',
        TMode
      > & { functionName?: 'castVoteWithReasonAndParams' }
    : UseContractWriteConfig<typeof governorSettingsABI, 'castVoteWithReasonAndParams', TMode> & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParams'
      } = {} as any,
) {
  return useContractWrite<typeof governorSettingsABI, 'castVoteWithReasonAndParams', TMode>({
    abi: governorSettingsABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function useGovernorSettingsCastVoteWithReasonAndParamsBySig<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governorSettingsABI,
          'castVoteWithReasonAndParamsBySig'
        >['request']['abi'],
        'castVoteWithReasonAndParamsBySig',
        TMode
      > & { functionName?: 'castVoteWithReasonAndParamsBySig' }
    : UseContractWriteConfig<
        typeof governorSettingsABI,
        'castVoteWithReasonAndParamsBySig',
        TMode
      > & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParamsBySig'
      } = {} as any,
) {
  return useContractWrite<typeof governorSettingsABI, 'castVoteWithReasonAndParamsBySig', TMode>({
    abi: governorSettingsABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"execute"`.
 */
export function useGovernorSettingsExecute<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorSettingsABI, 'execute'>['request']['abi'],
        'execute',
        TMode
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<typeof governorSettingsABI, 'execute', TMode> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<typeof governorSettingsABI, 'execute', TMode>({
    abi: governorSettingsABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useGovernorSettingsOnErc1155BatchReceived<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governorSettingsABI,
          'onERC1155BatchReceived'
        >['request']['abi'],
        'onERC1155BatchReceived',
        TMode
      > & { functionName?: 'onERC1155BatchReceived' }
    : UseContractWriteConfig<typeof governorSettingsABI, 'onERC1155BatchReceived', TMode> & {
        abi?: never
        functionName?: 'onERC1155BatchReceived'
      } = {} as any,
) {
  return useContractWrite<typeof governorSettingsABI, 'onERC1155BatchReceived', TMode>({
    abi: governorSettingsABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useGovernorSettingsOnErc1155Received<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governorSettingsABI,
          'onERC1155Received'
        >['request']['abi'],
        'onERC1155Received',
        TMode
      > & { functionName?: 'onERC1155Received' }
    : UseContractWriteConfig<typeof governorSettingsABI, 'onERC1155Received', TMode> & {
        abi?: never
        functionName?: 'onERC1155Received'
      } = {} as any,
) {
  return useContractWrite<typeof governorSettingsABI, 'onERC1155Received', TMode>({
    abi: governorSettingsABI,
    functionName: 'onERC1155Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useGovernorSettingsOnErc721Received<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governorSettingsABI,
          'onERC721Received'
        >['request']['abi'],
        'onERC721Received',
        TMode
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<typeof governorSettingsABI, 'onERC721Received', TMode> & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<typeof governorSettingsABI, 'onERC721Received', TMode>({
    abi: governorSettingsABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"propose"`.
 */
export function useGovernorSettingsPropose<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorSettingsABI, 'propose'>['request']['abi'],
        'propose',
        TMode
      > & { functionName?: 'propose' }
    : UseContractWriteConfig<typeof governorSettingsABI, 'propose', TMode> & {
        abi?: never
        functionName?: 'propose'
      } = {} as any,
) {
  return useContractWrite<typeof governorSettingsABI, 'propose', TMode>({
    abi: governorSettingsABI,
    functionName: 'propose',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"relay"`.
 */
export function useGovernorSettingsRelay<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorSettingsABI, 'relay'>['request']['abi'],
        'relay',
        TMode
      > & { functionName?: 'relay' }
    : UseContractWriteConfig<typeof governorSettingsABI, 'relay', TMode> & {
        abi?: never
        functionName?: 'relay'
      } = {} as any,
) {
  return useContractWrite<typeof governorSettingsABI, 'relay', TMode>({
    abi: governorSettingsABI,
    functionName: 'relay',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"setProposalThreshold"`.
 */
export function useGovernorSettingsSetProposalThreshold<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governorSettingsABI,
          'setProposalThreshold'
        >['request']['abi'],
        'setProposalThreshold',
        TMode
      > & { functionName?: 'setProposalThreshold' }
    : UseContractWriteConfig<typeof governorSettingsABI, 'setProposalThreshold', TMode> & {
        abi?: never
        functionName?: 'setProposalThreshold'
      } = {} as any,
) {
  return useContractWrite<typeof governorSettingsABI, 'setProposalThreshold', TMode>({
    abi: governorSettingsABI,
    functionName: 'setProposalThreshold',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"setVotingDelay"`.
 */
export function useGovernorSettingsSetVotingDelay<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorSettingsABI, 'setVotingDelay'>['request']['abi'],
        'setVotingDelay',
        TMode
      > & { functionName?: 'setVotingDelay' }
    : UseContractWriteConfig<typeof governorSettingsABI, 'setVotingDelay', TMode> & {
        abi?: never
        functionName?: 'setVotingDelay'
      } = {} as any,
) {
  return useContractWrite<typeof governorSettingsABI, 'setVotingDelay', TMode>({
    abi: governorSettingsABI,
    functionName: 'setVotingDelay',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"setVotingPeriod"`.
 */
export function useGovernorSettingsSetVotingPeriod<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorSettingsABI, 'setVotingPeriod'>['request']['abi'],
        'setVotingPeriod',
        TMode
      > & { functionName?: 'setVotingPeriod' }
    : UseContractWriteConfig<typeof governorSettingsABI, 'setVotingPeriod', TMode> & {
        abi?: never
        functionName?: 'setVotingPeriod'
      } = {} as any,
) {
  return useContractWrite<typeof governorSettingsABI, 'setVotingPeriod', TMode>({
    abi: governorSettingsABI,
    functionName: 'setVotingPeriod',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorSettingsABI}__.
 */
export function usePrepareGovernorSettingsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorSettingsABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorSettingsABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorSettingsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"castVote"`.
 */
export function usePrepareGovernorSettingsCastVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorSettingsABI, 'castVote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorSettingsABI,
    functionName: 'castVote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorSettingsABI, 'castVote'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function usePrepareGovernorSettingsCastVoteBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorSettingsABI, 'castVoteBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorSettingsABI,
    functionName: 'castVoteBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorSettingsABI, 'castVoteBySig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function usePrepareGovernorSettingsCastVoteWithReason(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorSettingsABI, 'castVoteWithReason'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorSettingsABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorSettingsABI, 'castVoteWithReason'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function usePrepareGovernorSettingsCastVoteWithReasonAndParams(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorSettingsABI, 'castVoteWithReasonAndParams'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorSettingsABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorSettingsABI, 'castVoteWithReasonAndParams'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function usePrepareGovernorSettingsCastVoteWithReasonAndParamsBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorSettingsABI, 'castVoteWithReasonAndParamsBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorSettingsABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorSettingsABI,
    'castVoteWithReasonAndParamsBySig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareGovernorSettingsExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorSettingsABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorSettingsABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorSettingsABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function usePrepareGovernorSettingsOnErc1155BatchReceived(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorSettingsABI, 'onERC1155BatchReceived'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorSettingsABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorSettingsABI, 'onERC1155BatchReceived'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function usePrepareGovernorSettingsOnErc1155Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorSettingsABI, 'onERC1155Received'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorSettingsABI,
    functionName: 'onERC1155Received',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorSettingsABI, 'onERC1155Received'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareGovernorSettingsOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorSettingsABI, 'onERC721Received'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorSettingsABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorSettingsABI, 'onERC721Received'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"propose"`.
 */
export function usePrepareGovernorSettingsPropose(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorSettingsABI, 'propose'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorSettingsABI,
    functionName: 'propose',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorSettingsABI, 'propose'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"relay"`.
 */
export function usePrepareGovernorSettingsRelay(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorSettingsABI, 'relay'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorSettingsABI,
    functionName: 'relay',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorSettingsABI, 'relay'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"setProposalThreshold"`.
 */
export function usePrepareGovernorSettingsSetProposalThreshold(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorSettingsABI, 'setProposalThreshold'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorSettingsABI,
    functionName: 'setProposalThreshold',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorSettingsABI, 'setProposalThreshold'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"setVotingDelay"`.
 */
export function usePrepareGovernorSettingsSetVotingDelay(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorSettingsABI, 'setVotingDelay'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorSettingsABI,
    functionName: 'setVotingDelay',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorSettingsABI, 'setVotingDelay'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorSettingsABI}__ and `functionName` set to `"setVotingPeriod"`.
 */
export function usePrepareGovernorSettingsSetVotingPeriod(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorSettingsABI, 'setVotingPeriod'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorSettingsABI,
    functionName: 'setVotingPeriod',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorSettingsABI, 'setVotingPeriod'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorSettingsABI}__.
 */
export function useGovernorSettingsEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof governorSettingsABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: governorSettingsABI, ...config } as UseContractEventConfig<
    typeof governorSettingsABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorSettingsABI}__ and `eventName` set to `"ProposalCanceled"`.
 */
export function useGovernorSettingsProposalCanceledEvent(
  config: Omit<
    UseContractEventConfig<typeof governorSettingsABI, 'ProposalCanceled'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorSettingsABI,
    eventName: 'ProposalCanceled',
    ...config,
  } as UseContractEventConfig<typeof governorSettingsABI, 'ProposalCanceled'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorSettingsABI}__ and `eventName` set to `"ProposalCreated"`.
 */
export function useGovernorSettingsProposalCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof governorSettingsABI, 'ProposalCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorSettingsABI,
    eventName: 'ProposalCreated',
    ...config,
  } as UseContractEventConfig<typeof governorSettingsABI, 'ProposalCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorSettingsABI}__ and `eventName` set to `"ProposalExecuted"`.
 */
export function useGovernorSettingsProposalExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof governorSettingsABI, 'ProposalExecuted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorSettingsABI,
    eventName: 'ProposalExecuted',
    ...config,
  } as UseContractEventConfig<typeof governorSettingsABI, 'ProposalExecuted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorSettingsABI}__ and `eventName` set to `"ProposalThresholdSet"`.
 */
export function useGovernorSettingsProposalThresholdSetEvent(
  config: Omit<
    UseContractEventConfig<typeof governorSettingsABI, 'ProposalThresholdSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorSettingsABI,
    eventName: 'ProposalThresholdSet',
    ...config,
  } as UseContractEventConfig<typeof governorSettingsABI, 'ProposalThresholdSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorSettingsABI}__ and `eventName` set to `"VoteCast"`.
 */
export function useGovernorSettingsVoteCastEvent(
  config: Omit<
    UseContractEventConfig<typeof governorSettingsABI, 'VoteCast'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorSettingsABI,
    eventName: 'VoteCast',
    ...config,
  } as UseContractEventConfig<typeof governorSettingsABI, 'VoteCast'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorSettingsABI}__ and `eventName` set to `"VoteCastWithParams"`.
 */
export function useGovernorSettingsVoteCastWithParamsEvent(
  config: Omit<
    UseContractEventConfig<typeof governorSettingsABI, 'VoteCastWithParams'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorSettingsABI,
    eventName: 'VoteCastWithParams',
    ...config,
  } as UseContractEventConfig<typeof governorSettingsABI, 'VoteCastWithParams'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorSettingsABI}__ and `eventName` set to `"VotingDelaySet"`.
 */
export function useGovernorSettingsVotingDelaySetEvent(
  config: Omit<
    UseContractEventConfig<typeof governorSettingsABI, 'VotingDelaySet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorSettingsABI,
    eventName: 'VotingDelaySet',
    ...config,
  } as UseContractEventConfig<typeof governorSettingsABI, 'VotingDelaySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorSettingsABI}__ and `eventName` set to `"VotingPeriodSet"`.
 */
export function useGovernorSettingsVotingPeriodSetEvent(
  config: Omit<
    UseContractEventConfig<typeof governorSettingsABI, 'VotingPeriodSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorSettingsABI,
    eventName: 'VotingPeriodSet',
    ...config,
  } as UseContractEventConfig<typeof governorSettingsABI, 'VotingPeriodSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__.
 */
export function useGovernorVotesRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof governorVotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: governorVotesABI, ...config } as UseContractReadConfig<
    typeof governorVotesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"BALLOT_TYPEHASH"`.
 */
export function useGovernorVotesBallotTypehash<
  TFunctionName extends 'BALLOT_TYPEHASH',
  TSelectData = ReadContractResult<typeof governorVotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'BALLOT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"COUNTING_MODE"`.
 */
export function useGovernorVotesCountingMode<
  TFunctionName extends 'COUNTING_MODE',
  TSelectData = ReadContractResult<typeof governorVotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'COUNTING_MODE',
    ...config,
  } as UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"EXTENDED_BALLOT_TYPEHASH"`.
 */
export function useGovernorVotesExtendedBallotTypehash<
  TFunctionName extends 'EXTENDED_BALLOT_TYPEHASH',
  TSelectData = ReadContractResult<typeof governorVotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'EXTENDED_BALLOT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"getVotes"`.
 */
export function useGovernorVotesGetVotes<
  TFunctionName extends 'getVotes',
  TSelectData = ReadContractResult<typeof governorVotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"getVotesWithParams"`.
 */
export function useGovernorVotesGetVotesWithParams<
  TFunctionName extends 'getVotesWithParams',
  TSelectData = ReadContractResult<typeof governorVotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'getVotesWithParams',
    ...config,
  } as UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"hasVoted"`.
 */
export function useGovernorVotesHasVoted<
  TFunctionName extends 'hasVoted',
  TSelectData = ReadContractResult<typeof governorVotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'hasVoted',
    ...config,
  } as UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"hashProposal"`.
 */
export function useGovernorVotesHashProposal<
  TFunctionName extends 'hashProposal',
  TSelectData = ReadContractResult<typeof governorVotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'hashProposal',
    ...config,
  } as UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"name"`.
 */
export function useGovernorVotesName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof governorVotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"proposalDeadline"`.
 */
export function useGovernorVotesProposalDeadline<
  TFunctionName extends 'proposalDeadline',
  TSelectData = ReadContractResult<typeof governorVotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'proposalDeadline',
    ...config,
  } as UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"proposalSnapshot"`.
 */
export function useGovernorVotesProposalSnapshot<
  TFunctionName extends 'proposalSnapshot',
  TSelectData = ReadContractResult<typeof governorVotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'proposalSnapshot',
    ...config,
  } as UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"proposalThreshold"`.
 */
export function useGovernorVotesProposalThreshold<
  TFunctionName extends 'proposalThreshold',
  TSelectData = ReadContractResult<typeof governorVotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'proposalThreshold',
    ...config,
  } as UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"quorum"`.
 */
export function useGovernorVotesQuorum<
  TFunctionName extends 'quorum',
  TSelectData = ReadContractResult<typeof governorVotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'quorum',
    ...config,
  } as UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"state"`.
 */
export function useGovernorVotesState<
  TFunctionName extends 'state',
  TSelectData = ReadContractResult<typeof governorVotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'state',
    ...config,
  } as UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useGovernorVotesSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof governorVotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"token"`.
 */
export function useGovernorVotesToken<
  TFunctionName extends 'token',
  TSelectData = ReadContractResult<typeof governorVotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'token',
    ...config,
  } as UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"version"`.
 */
export function useGovernorVotesVersion<
  TFunctionName extends 'version',
  TSelectData = ReadContractResult<typeof governorVotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'version',
    ...config,
  } as UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"votingDelay"`.
 */
export function useGovernorVotesVotingDelay<
  TFunctionName extends 'votingDelay',
  TSelectData = ReadContractResult<typeof governorVotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'votingDelay',
    ...config,
  } as UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"votingPeriod"`.
 */
export function useGovernorVotesVotingPeriod<
  TFunctionName extends 'votingPeriod',
  TSelectData = ReadContractResult<typeof governorVotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesABI,
    functionName: 'votingPeriod',
    ...config,
  } as UseContractReadConfig<typeof governorVotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesABI}__.
 */
export function useGovernorVotesWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorVotesABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof governorVotesABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof governorVotesABI, TFunctionName, TMode>({
    abi: governorVotesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"castVote"`.
 */
export function useGovernorVotesCastVote<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorVotesABI, 'castVote'>['request']['abi'],
        'castVote',
        TMode
      > & { functionName?: 'castVote' }
    : UseContractWriteConfig<typeof governorVotesABI, 'castVote', TMode> & {
        abi?: never
        functionName?: 'castVote'
      } = {} as any,
) {
  return useContractWrite<typeof governorVotesABI, 'castVote', TMode>({
    abi: governorVotesABI,
    functionName: 'castVote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function useGovernorVotesCastVoteBySig<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorVotesABI, 'castVoteBySig'>['request']['abi'],
        'castVoteBySig',
        TMode
      > & { functionName?: 'castVoteBySig' }
    : UseContractWriteConfig<typeof governorVotesABI, 'castVoteBySig', TMode> & {
        abi?: never
        functionName?: 'castVoteBySig'
      } = {} as any,
) {
  return useContractWrite<typeof governorVotesABI, 'castVoteBySig', TMode>({
    abi: governorVotesABI,
    functionName: 'castVoteBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function useGovernorVotesCastVoteWithReason<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorVotesABI, 'castVoteWithReason'>['request']['abi'],
        'castVoteWithReason',
        TMode
      > & { functionName?: 'castVoteWithReason' }
    : UseContractWriteConfig<typeof governorVotesABI, 'castVoteWithReason', TMode> & {
        abi?: never
        functionName?: 'castVoteWithReason'
      } = {} as any,
) {
  return useContractWrite<typeof governorVotesABI, 'castVoteWithReason', TMode>({
    abi: governorVotesABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function useGovernorVotesCastVoteWithReasonAndParams<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governorVotesABI,
          'castVoteWithReasonAndParams'
        >['request']['abi'],
        'castVoteWithReasonAndParams',
        TMode
      > & { functionName?: 'castVoteWithReasonAndParams' }
    : UseContractWriteConfig<typeof governorVotesABI, 'castVoteWithReasonAndParams', TMode> & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParams'
      } = {} as any,
) {
  return useContractWrite<typeof governorVotesABI, 'castVoteWithReasonAndParams', TMode>({
    abi: governorVotesABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function useGovernorVotesCastVoteWithReasonAndParamsBySig<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governorVotesABI,
          'castVoteWithReasonAndParamsBySig'
        >['request']['abi'],
        'castVoteWithReasonAndParamsBySig',
        TMode
      > & { functionName?: 'castVoteWithReasonAndParamsBySig' }
    : UseContractWriteConfig<typeof governorVotesABI, 'castVoteWithReasonAndParamsBySig', TMode> & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParamsBySig'
      } = {} as any,
) {
  return useContractWrite<typeof governorVotesABI, 'castVoteWithReasonAndParamsBySig', TMode>({
    abi: governorVotesABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"execute"`.
 */
export function useGovernorVotesExecute<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorVotesABI, 'execute'>['request']['abi'],
        'execute',
        TMode
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<typeof governorVotesABI, 'execute', TMode> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<typeof governorVotesABI, 'execute', TMode>({
    abi: governorVotesABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useGovernorVotesOnErc1155BatchReceived<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governorVotesABI,
          'onERC1155BatchReceived'
        >['request']['abi'],
        'onERC1155BatchReceived',
        TMode
      > & { functionName?: 'onERC1155BatchReceived' }
    : UseContractWriteConfig<typeof governorVotesABI, 'onERC1155BatchReceived', TMode> & {
        abi?: never
        functionName?: 'onERC1155BatchReceived'
      } = {} as any,
) {
  return useContractWrite<typeof governorVotesABI, 'onERC1155BatchReceived', TMode>({
    abi: governorVotesABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useGovernorVotesOnErc1155Received<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorVotesABI, 'onERC1155Received'>['request']['abi'],
        'onERC1155Received',
        TMode
      > & { functionName?: 'onERC1155Received' }
    : UseContractWriteConfig<typeof governorVotesABI, 'onERC1155Received', TMode> & {
        abi?: never
        functionName?: 'onERC1155Received'
      } = {} as any,
) {
  return useContractWrite<typeof governorVotesABI, 'onERC1155Received', TMode>({
    abi: governorVotesABI,
    functionName: 'onERC1155Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useGovernorVotesOnErc721Received<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorVotesABI, 'onERC721Received'>['request']['abi'],
        'onERC721Received',
        TMode
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<typeof governorVotesABI, 'onERC721Received', TMode> & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<typeof governorVotesABI, 'onERC721Received', TMode>({
    abi: governorVotesABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"propose"`.
 */
export function useGovernorVotesPropose<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorVotesABI, 'propose'>['request']['abi'],
        'propose',
        TMode
      > & { functionName?: 'propose' }
    : UseContractWriteConfig<typeof governorVotesABI, 'propose', TMode> & {
        abi?: never
        functionName?: 'propose'
      } = {} as any,
) {
  return useContractWrite<typeof governorVotesABI, 'propose', TMode>({
    abi: governorVotesABI,
    functionName: 'propose',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"relay"`.
 */
export function useGovernorVotesRelay<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorVotesABI, 'relay'>['request']['abi'],
        'relay',
        TMode
      > & { functionName?: 'relay' }
    : UseContractWriteConfig<typeof governorVotesABI, 'relay', TMode> & {
        abi?: never
        functionName?: 'relay'
      } = {} as any,
) {
  return useContractWrite<typeof governorVotesABI, 'relay', TMode>({
    abi: governorVotesABI,
    functionName: 'relay',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesABI}__.
 */
export function usePrepareGovernorVotesWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorVotesABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorVotesABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"castVote"`.
 */
export function usePrepareGovernorVotesCastVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorVotesABI, 'castVote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesABI,
    functionName: 'castVote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorVotesABI, 'castVote'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function usePrepareGovernorVotesCastVoteBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorVotesABI, 'castVoteBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesABI,
    functionName: 'castVoteBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorVotesABI, 'castVoteBySig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function usePrepareGovernorVotesCastVoteWithReason(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorVotesABI, 'castVoteWithReason'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorVotesABI, 'castVoteWithReason'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function usePrepareGovernorVotesCastVoteWithReasonAndParams(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorVotesABI, 'castVoteWithReasonAndParams'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorVotesABI, 'castVoteWithReasonAndParams'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function usePrepareGovernorVotesCastVoteWithReasonAndParamsBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorVotesABI, 'castVoteWithReasonAndParamsBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorVotesABI, 'castVoteWithReasonAndParamsBySig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareGovernorVotesExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorVotesABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorVotesABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function usePrepareGovernorVotesOnErc1155BatchReceived(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorVotesABI, 'onERC1155BatchReceived'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorVotesABI, 'onERC1155BatchReceived'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function usePrepareGovernorVotesOnErc1155Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorVotesABI, 'onERC1155Received'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesABI,
    functionName: 'onERC1155Received',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorVotesABI, 'onERC1155Received'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareGovernorVotesOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorVotesABI, 'onERC721Received'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorVotesABI, 'onERC721Received'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"propose"`.
 */
export function usePrepareGovernorVotesPropose(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorVotesABI, 'propose'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesABI,
    functionName: 'propose',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorVotesABI, 'propose'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesABI}__ and `functionName` set to `"relay"`.
 */
export function usePrepareGovernorVotesRelay(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorVotesABI, 'relay'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesABI,
    functionName: 'relay',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorVotesABI, 'relay'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorVotesABI}__.
 */
export function useGovernorVotesEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof governorVotesABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: governorVotesABI, ...config } as UseContractEventConfig<
    typeof governorVotesABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorVotesABI}__ and `eventName` set to `"ProposalCanceled"`.
 */
export function useGovernorVotesProposalCanceledEvent(
  config: Omit<
    UseContractEventConfig<typeof governorVotesABI, 'ProposalCanceled'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorVotesABI,
    eventName: 'ProposalCanceled',
    ...config,
  } as UseContractEventConfig<typeof governorVotesABI, 'ProposalCanceled'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorVotesABI}__ and `eventName` set to `"ProposalCreated"`.
 */
export function useGovernorVotesProposalCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof governorVotesABI, 'ProposalCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorVotesABI,
    eventName: 'ProposalCreated',
    ...config,
  } as UseContractEventConfig<typeof governorVotesABI, 'ProposalCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorVotesABI}__ and `eventName` set to `"ProposalExecuted"`.
 */
export function useGovernorVotesProposalExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof governorVotesABI, 'ProposalExecuted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorVotesABI,
    eventName: 'ProposalExecuted',
    ...config,
  } as UseContractEventConfig<typeof governorVotesABI, 'ProposalExecuted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorVotesABI}__ and `eventName` set to `"VoteCast"`.
 */
export function useGovernorVotesVoteCastEvent(
  config: Omit<
    UseContractEventConfig<typeof governorVotesABI, 'VoteCast'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorVotesABI,
    eventName: 'VoteCast',
    ...config,
  } as UseContractEventConfig<typeof governorVotesABI, 'VoteCast'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorVotesABI}__ and `eventName` set to `"VoteCastWithParams"`.
 */
export function useGovernorVotesVoteCastWithParamsEvent(
  config: Omit<
    UseContractEventConfig<typeof governorVotesABI, 'VoteCastWithParams'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorVotesABI,
    eventName: 'VoteCastWithParams',
    ...config,
  } as UseContractEventConfig<typeof governorVotesABI, 'VoteCastWithParams'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__.
 */
export function useGovernorVotesQuorumFractionRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof governorVotesQuorumFractionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    ...config,
  } as UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"BALLOT_TYPEHASH"`.
 */
export function useGovernorVotesQuorumFractionBallotTypehash<
  TFunctionName extends 'BALLOT_TYPEHASH',
  TSelectData = ReadContractResult<typeof governorVotesQuorumFractionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'BALLOT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"COUNTING_MODE"`.
 */
export function useGovernorVotesQuorumFractionCountingMode<
  TFunctionName extends 'COUNTING_MODE',
  TSelectData = ReadContractResult<typeof governorVotesQuorumFractionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'COUNTING_MODE',
    ...config,
  } as UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"EXTENDED_BALLOT_TYPEHASH"`.
 */
export function useGovernorVotesQuorumFractionExtendedBallotTypehash<
  TFunctionName extends 'EXTENDED_BALLOT_TYPEHASH',
  TSelectData = ReadContractResult<typeof governorVotesQuorumFractionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'EXTENDED_BALLOT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"getVotes"`.
 */
export function useGovernorVotesQuorumFractionGetVotes<
  TFunctionName extends 'getVotes',
  TSelectData = ReadContractResult<typeof governorVotesQuorumFractionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"getVotesWithParams"`.
 */
export function useGovernorVotesQuorumFractionGetVotesWithParams<
  TFunctionName extends 'getVotesWithParams',
  TSelectData = ReadContractResult<typeof governorVotesQuorumFractionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'getVotesWithParams',
    ...config,
  } as UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"hasVoted"`.
 */
export function useGovernorVotesQuorumFractionHasVoted<
  TFunctionName extends 'hasVoted',
  TSelectData = ReadContractResult<typeof governorVotesQuorumFractionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'hasVoted',
    ...config,
  } as UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"hashProposal"`.
 */
export function useGovernorVotesQuorumFractionHashProposal<
  TFunctionName extends 'hashProposal',
  TSelectData = ReadContractResult<typeof governorVotesQuorumFractionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'hashProposal',
    ...config,
  } as UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"name"`.
 */
export function useGovernorVotesQuorumFractionName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof governorVotesQuorumFractionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"proposalDeadline"`.
 */
export function useGovernorVotesQuorumFractionProposalDeadline<
  TFunctionName extends 'proposalDeadline',
  TSelectData = ReadContractResult<typeof governorVotesQuorumFractionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'proposalDeadline',
    ...config,
  } as UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"proposalSnapshot"`.
 */
export function useGovernorVotesQuorumFractionProposalSnapshot<
  TFunctionName extends 'proposalSnapshot',
  TSelectData = ReadContractResult<typeof governorVotesQuorumFractionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'proposalSnapshot',
    ...config,
  } as UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"proposalThreshold"`.
 */
export function useGovernorVotesQuorumFractionProposalThreshold<
  TFunctionName extends 'proposalThreshold',
  TSelectData = ReadContractResult<typeof governorVotesQuorumFractionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'proposalThreshold',
    ...config,
  } as UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"quorum"`.
 */
export function useGovernorVotesQuorumFractionQuorum<
  TFunctionName extends 'quorum',
  TSelectData = ReadContractResult<typeof governorVotesQuorumFractionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'quorum',
    ...config,
  } as UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"quorumDenominator"`.
 */
export function useGovernorVotesQuorumFractionQuorumDenominator<
  TFunctionName extends 'quorumDenominator',
  TSelectData = ReadContractResult<typeof governorVotesQuorumFractionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'quorumDenominator',
    ...config,
  } as UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"quorumNumerator"`.
 */
export function useGovernorVotesQuorumFractionQuorumNumerator<
  TFunctionName extends 'quorumNumerator',
  TSelectData = ReadContractResult<typeof governorVotesQuorumFractionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'quorumNumerator',
    ...config,
  } as UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"state"`.
 */
export function useGovernorVotesQuorumFractionState<
  TFunctionName extends 'state',
  TSelectData = ReadContractResult<typeof governorVotesQuorumFractionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'state',
    ...config,
  } as UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useGovernorVotesQuorumFractionSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof governorVotesQuorumFractionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"token"`.
 */
export function useGovernorVotesQuorumFractionToken<
  TFunctionName extends 'token',
  TSelectData = ReadContractResult<typeof governorVotesQuorumFractionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'token',
    ...config,
  } as UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"version"`.
 */
export function useGovernorVotesQuorumFractionVersion<
  TFunctionName extends 'version',
  TSelectData = ReadContractResult<typeof governorVotesQuorumFractionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'version',
    ...config,
  } as UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"votingDelay"`.
 */
export function useGovernorVotesQuorumFractionVotingDelay<
  TFunctionName extends 'votingDelay',
  TSelectData = ReadContractResult<typeof governorVotesQuorumFractionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'votingDelay',
    ...config,
  } as UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"votingPeriod"`.
 */
export function useGovernorVotesQuorumFractionVotingPeriod<
  TFunctionName extends 'votingPeriod',
  TSelectData = ReadContractResult<typeof governorVotesQuorumFractionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: governorVotesQuorumFractionABI,
    functionName: 'votingPeriod',
    ...config,
  } as UseContractReadConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__.
 */
export function useGovernorVotesQuorumFractionWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governorVotesQuorumFractionABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof governorVotesQuorumFractionABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof governorVotesQuorumFractionABI, TFunctionName, TMode>({
    abi: governorVotesQuorumFractionABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"castVote"`.
 */
export function useGovernorVotesQuorumFractionCastVote<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governorVotesQuorumFractionABI,
          'castVote'
        >['request']['abi'],
        'castVote',
        TMode
      > & { functionName?: 'castVote' }
    : UseContractWriteConfig<typeof governorVotesQuorumFractionABI, 'castVote', TMode> & {
        abi?: never
        functionName?: 'castVote'
      } = {} as any,
) {
  return useContractWrite<typeof governorVotesQuorumFractionABI, 'castVote', TMode>({
    abi: governorVotesQuorumFractionABI,
    functionName: 'castVote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function useGovernorVotesQuorumFractionCastVoteBySig<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governorVotesQuorumFractionABI,
          'castVoteBySig'
        >['request']['abi'],
        'castVoteBySig',
        TMode
      > & { functionName?: 'castVoteBySig' }
    : UseContractWriteConfig<typeof governorVotesQuorumFractionABI, 'castVoteBySig', TMode> & {
        abi?: never
        functionName?: 'castVoteBySig'
      } = {} as any,
) {
  return useContractWrite<typeof governorVotesQuorumFractionABI, 'castVoteBySig', TMode>({
    abi: governorVotesQuorumFractionABI,
    functionName: 'castVoteBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function useGovernorVotesQuorumFractionCastVoteWithReason<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governorVotesQuorumFractionABI,
          'castVoteWithReason'
        >['request']['abi'],
        'castVoteWithReason',
        TMode
      > & { functionName?: 'castVoteWithReason' }
    : UseContractWriteConfig<typeof governorVotesQuorumFractionABI, 'castVoteWithReason', TMode> & {
        abi?: never
        functionName?: 'castVoteWithReason'
      } = {} as any,
) {
  return useContractWrite<typeof governorVotesQuorumFractionABI, 'castVoteWithReason', TMode>({
    abi: governorVotesQuorumFractionABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function useGovernorVotesQuorumFractionCastVoteWithReasonAndParams<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governorVotesQuorumFractionABI,
          'castVoteWithReasonAndParams'
        >['request']['abi'],
        'castVoteWithReasonAndParams',
        TMode
      > & { functionName?: 'castVoteWithReasonAndParams' }
    : UseContractWriteConfig<
        typeof governorVotesQuorumFractionABI,
        'castVoteWithReasonAndParams',
        TMode
      > & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParams'
      } = {} as any,
) {
  return useContractWrite<
    typeof governorVotesQuorumFractionABI,
    'castVoteWithReasonAndParams',
    TMode
  >({
    abi: governorVotesQuorumFractionABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function useGovernorVotesQuorumFractionCastVoteWithReasonAndParamsBySig<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governorVotesQuorumFractionABI,
          'castVoteWithReasonAndParamsBySig'
        >['request']['abi'],
        'castVoteWithReasonAndParamsBySig',
        TMode
      > & { functionName?: 'castVoteWithReasonAndParamsBySig' }
    : UseContractWriteConfig<
        typeof governorVotesQuorumFractionABI,
        'castVoteWithReasonAndParamsBySig',
        TMode
      > & {
        abi?: never
        functionName?: 'castVoteWithReasonAndParamsBySig'
      } = {} as any,
) {
  return useContractWrite<
    typeof governorVotesQuorumFractionABI,
    'castVoteWithReasonAndParamsBySig',
    TMode
  >({
    abi: governorVotesQuorumFractionABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"execute"`.
 */
export function useGovernorVotesQuorumFractionExecute<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governorVotesQuorumFractionABI,
          'execute'
        >['request']['abi'],
        'execute',
        TMode
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<typeof governorVotesQuorumFractionABI, 'execute', TMode> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<typeof governorVotesQuorumFractionABI, 'execute', TMode>({
    abi: governorVotesQuorumFractionABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useGovernorVotesQuorumFractionOnErc1155BatchReceived<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governorVotesQuorumFractionABI,
          'onERC1155BatchReceived'
        >['request']['abi'],
        'onERC1155BatchReceived',
        TMode
      > & { functionName?: 'onERC1155BatchReceived' }
    : UseContractWriteConfig<
        typeof governorVotesQuorumFractionABI,
        'onERC1155BatchReceived',
        TMode
      > & {
        abi?: never
        functionName?: 'onERC1155BatchReceived'
      } = {} as any,
) {
  return useContractWrite<typeof governorVotesQuorumFractionABI, 'onERC1155BatchReceived', TMode>({
    abi: governorVotesQuorumFractionABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useGovernorVotesQuorumFractionOnErc1155Received<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governorVotesQuorumFractionABI,
          'onERC1155Received'
        >['request']['abi'],
        'onERC1155Received',
        TMode
      > & { functionName?: 'onERC1155Received' }
    : UseContractWriteConfig<typeof governorVotesQuorumFractionABI, 'onERC1155Received', TMode> & {
        abi?: never
        functionName?: 'onERC1155Received'
      } = {} as any,
) {
  return useContractWrite<typeof governorVotesQuorumFractionABI, 'onERC1155Received', TMode>({
    abi: governorVotesQuorumFractionABI,
    functionName: 'onERC1155Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useGovernorVotesQuorumFractionOnErc721Received<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governorVotesQuorumFractionABI,
          'onERC721Received'
        >['request']['abi'],
        'onERC721Received',
        TMode
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<typeof governorVotesQuorumFractionABI, 'onERC721Received', TMode> & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<typeof governorVotesQuorumFractionABI, 'onERC721Received', TMode>({
    abi: governorVotesQuorumFractionABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"propose"`.
 */
export function useGovernorVotesQuorumFractionPropose<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governorVotesQuorumFractionABI,
          'propose'
        >['request']['abi'],
        'propose',
        TMode
      > & { functionName?: 'propose' }
    : UseContractWriteConfig<typeof governorVotesQuorumFractionABI, 'propose', TMode> & {
        abi?: never
        functionName?: 'propose'
      } = {} as any,
) {
  return useContractWrite<typeof governorVotesQuorumFractionABI, 'propose', TMode>({
    abi: governorVotesQuorumFractionABI,
    functionName: 'propose',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"relay"`.
 */
export function useGovernorVotesQuorumFractionRelay<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governorVotesQuorumFractionABI,
          'relay'
        >['request']['abi'],
        'relay',
        TMode
      > & { functionName?: 'relay' }
    : UseContractWriteConfig<typeof governorVotesQuorumFractionABI, 'relay', TMode> & {
        abi?: never
        functionName?: 'relay'
      } = {} as any,
) {
  return useContractWrite<typeof governorVotesQuorumFractionABI, 'relay', TMode>({
    abi: governorVotesQuorumFractionABI,
    functionName: 'relay',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"updateQuorumNumerator"`.
 */
export function useGovernorVotesQuorumFractionUpdateQuorumNumerator<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governorVotesQuorumFractionABI,
          'updateQuorumNumerator'
        >['request']['abi'],
        'updateQuorumNumerator',
        TMode
      > & { functionName?: 'updateQuorumNumerator' }
    : UseContractWriteConfig<
        typeof governorVotesQuorumFractionABI,
        'updateQuorumNumerator',
        TMode
      > & {
        abi?: never
        functionName?: 'updateQuorumNumerator'
      } = {} as any,
) {
  return useContractWrite<typeof governorVotesQuorumFractionABI, 'updateQuorumNumerator', TMode>({
    abi: governorVotesQuorumFractionABI,
    functionName: 'updateQuorumNumerator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__.
 */
export function usePrepareGovernorVotesQuorumFractionWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorVotesQuorumFractionABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesQuorumFractionABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorVotesQuorumFractionABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"castVote"`.
 */
export function usePrepareGovernorVotesQuorumFractionCastVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorVotesQuorumFractionABI, 'castVote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesQuorumFractionABI,
    functionName: 'castVote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorVotesQuorumFractionABI, 'castVote'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"castVoteBySig"`.
 */
export function usePrepareGovernorVotesQuorumFractionCastVoteBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorVotesQuorumFractionABI, 'castVoteBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesQuorumFractionABI,
    functionName: 'castVoteBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorVotesQuorumFractionABI, 'castVoteBySig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"castVoteWithReason"`.
 */
export function usePrepareGovernorVotesQuorumFractionCastVoteWithReason(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorVotesQuorumFractionABI, 'castVoteWithReason'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesQuorumFractionABI,
    functionName: 'castVoteWithReason',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorVotesQuorumFractionABI, 'castVoteWithReason'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"castVoteWithReasonAndParams"`.
 */
export function usePrepareGovernorVotesQuorumFractionCastVoteWithReasonAndParams(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorVotesQuorumFractionABI,
      'castVoteWithReasonAndParams'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesQuorumFractionABI,
    functionName: 'castVoteWithReasonAndParams',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorVotesQuorumFractionABI,
    'castVoteWithReasonAndParams'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"castVoteWithReasonAndParamsBySig"`.
 */
export function usePrepareGovernorVotesQuorumFractionCastVoteWithReasonAndParamsBySig(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governorVotesQuorumFractionABI,
      'castVoteWithReasonAndParamsBySig'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesQuorumFractionABI,
    functionName: 'castVoteWithReasonAndParamsBySig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorVotesQuorumFractionABI,
    'castVoteWithReasonAndParamsBySig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareGovernorVotesQuorumFractionExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorVotesQuorumFractionABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesQuorumFractionABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorVotesQuorumFractionABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function usePrepareGovernorVotesQuorumFractionOnErc1155BatchReceived(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorVotesQuorumFractionABI, 'onERC1155BatchReceived'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesQuorumFractionABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorVotesQuorumFractionABI,
    'onERC1155BatchReceived'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function usePrepareGovernorVotesQuorumFractionOnErc1155Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorVotesQuorumFractionABI, 'onERC1155Received'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesQuorumFractionABI,
    functionName: 'onERC1155Received',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorVotesQuorumFractionABI, 'onERC1155Received'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareGovernorVotesQuorumFractionOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorVotesQuorumFractionABI, 'onERC721Received'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesQuorumFractionABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorVotesQuorumFractionABI, 'onERC721Received'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"propose"`.
 */
export function usePrepareGovernorVotesQuorumFractionPropose(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorVotesQuorumFractionABI, 'propose'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesQuorumFractionABI,
    functionName: 'propose',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorVotesQuorumFractionABI, 'propose'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"relay"`.
 */
export function usePrepareGovernorVotesQuorumFractionRelay(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorVotesQuorumFractionABI, 'relay'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesQuorumFractionABI,
    functionName: 'relay',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governorVotesQuorumFractionABI, 'relay'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `functionName` set to `"updateQuorumNumerator"`.
 */
export function usePrepareGovernorVotesQuorumFractionUpdateQuorumNumerator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governorVotesQuorumFractionABI, 'updateQuorumNumerator'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: governorVotesQuorumFractionABI,
    functionName: 'updateQuorumNumerator',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governorVotesQuorumFractionABI,
    'updateQuorumNumerator'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__.
 */
export function useGovernorVotesQuorumFractionEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof governorVotesQuorumFractionABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorVotesQuorumFractionABI,
    ...config,
  } as UseContractEventConfig<typeof governorVotesQuorumFractionABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `eventName` set to `"ProposalCanceled"`.
 */
export function useGovernorVotesQuorumFractionProposalCanceledEvent(
  config: Omit<
    UseContractEventConfig<typeof governorVotesQuorumFractionABI, 'ProposalCanceled'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorVotesQuorumFractionABI,
    eventName: 'ProposalCanceled',
    ...config,
  } as UseContractEventConfig<typeof governorVotesQuorumFractionABI, 'ProposalCanceled'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `eventName` set to `"ProposalCreated"`.
 */
export function useGovernorVotesQuorumFractionProposalCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof governorVotesQuorumFractionABI, 'ProposalCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorVotesQuorumFractionABI,
    eventName: 'ProposalCreated',
    ...config,
  } as UseContractEventConfig<typeof governorVotesQuorumFractionABI, 'ProposalCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `eventName` set to `"ProposalExecuted"`.
 */
export function useGovernorVotesQuorumFractionProposalExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof governorVotesQuorumFractionABI, 'ProposalExecuted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorVotesQuorumFractionABI,
    eventName: 'ProposalExecuted',
    ...config,
  } as UseContractEventConfig<typeof governorVotesQuorumFractionABI, 'ProposalExecuted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `eventName` set to `"QuorumNumeratorUpdated"`.
 */
export function useGovernorVotesQuorumFractionQuorumNumeratorUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof governorVotesQuorumFractionABI, 'QuorumNumeratorUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorVotesQuorumFractionABI,
    eventName: 'QuorumNumeratorUpdated',
    ...config,
  } as UseContractEventConfig<typeof governorVotesQuorumFractionABI, 'QuorumNumeratorUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `eventName` set to `"VoteCast"`.
 */
export function useGovernorVotesQuorumFractionVoteCastEvent(
  config: Omit<
    UseContractEventConfig<typeof governorVotesQuorumFractionABI, 'VoteCast'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorVotesQuorumFractionABI,
    eventName: 'VoteCast',
    ...config,
  } as UseContractEventConfig<typeof governorVotesQuorumFractionABI, 'VoteCast'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governorVotesQuorumFractionABI}__ and `eventName` set to `"VoteCastWithParams"`.
 */
export function useGovernorVotesQuorumFractionVoteCastWithParamsEvent(
  config: Omit<
    UseContractEventConfig<typeof governorVotesQuorumFractionABI, 'VoteCastWithParams'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: governorVotesQuorumFractionABI,
    eventName: 'VoteCastWithParams',
    ...config,
  } as UseContractEventConfig<typeof governorVotesQuorumFractionABI, 'VoteCastWithParams'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesABI}__.
 */
export function useIVotesRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iVotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVotesABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: iVotesABI, ...config } as UseContractReadConfig<
    typeof iVotesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"delegates"`.
 */
export function useIVotesDelegates<
  TFunctionName extends 'delegates',
  TSelectData = ReadContractResult<typeof iVotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVotesABI,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<typeof iVotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useIVotesGetPastTotalSupply<
  TFunctionName extends 'getPastTotalSupply',
  TSelectData = ReadContractResult<typeof iVotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVotesABI,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<typeof iVotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useIVotesGetPastVotes<
  TFunctionName extends 'getPastVotes',
  TSelectData = ReadContractResult<typeof iVotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVotesABI,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<typeof iVotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"getVotes"`.
 */
export function useIVotesGetVotes<
  TFunctionName extends 'getVotes',
  TSelectData = ReadContractResult<typeof iVotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iVotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVotesABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof iVotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotesABI}__.
 */
export function useIVotesWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iVotesABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iVotesABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iVotesABI, TFunctionName, TMode>({
    abi: iVotesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"delegate"`.
 */
export function useIVotesDelegate<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iVotesABI, 'delegate'>['request']['abi'],
        'delegate',
        TMode
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<typeof iVotesABI, 'delegate', TMode> & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<typeof iVotesABI, 'delegate', TMode>({
    abi: iVotesABI,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useIVotesDelegateBySig<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iVotesABI, 'delegateBySig'>['request']['abi'],
        'delegateBySig',
        TMode
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<typeof iVotesABI, 'delegateBySig', TMode> & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<typeof iVotesABI, 'delegateBySig', TMode>({
    abi: iVotesABI,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotesABI}__.
 */
export function usePrepareIVotesWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof iVotesABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: iVotesABI, ...config } as UsePrepareContractWriteConfig<
    typeof iVotesABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareIVotesDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotesABI, 'delegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotesABI,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotesABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareIVotesDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotesABI, 'delegateBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotesABI,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotesABI, 'delegateBySig'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVotesABI}__.
 */
export function useIVotesEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iVotesABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: iVotesABI, ...config } as UseContractEventConfig<
    typeof iVotesABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVotesABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useIVotesDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iVotesABI, 'DelegateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iVotesABI,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof iVotesABI, 'DelegateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVotesABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useIVotesDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iVotesABI, 'DelegateVotesChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iVotesABI,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<typeof iVotesABI, 'DelegateVotesChanged'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link votesABI}__.
 */
export function useVotesRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof votesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof votesABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: votesABI, ...config } as UseContractReadConfig<
    typeof votesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useVotesDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof votesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof votesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: votesABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<typeof votesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"delegates"`.
 */
export function useVotesDelegates<
  TFunctionName extends 'delegates',
  TSelectData = ReadContractResult<typeof votesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof votesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: votesABI,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<typeof votesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useVotesGetPastTotalSupply<
  TFunctionName extends 'getPastTotalSupply',
  TSelectData = ReadContractResult<typeof votesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof votesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: votesABI,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<typeof votesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useVotesGetPastVotes<
  TFunctionName extends 'getPastVotes',
  TSelectData = ReadContractResult<typeof votesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof votesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: votesABI,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<typeof votesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"getVotes"`.
 */
export function useVotesGetVotes<
  TFunctionName extends 'getVotes',
  TSelectData = ReadContractResult<typeof votesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof votesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: votesABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof votesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"nonces"`.
 */
export function useVotesNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof votesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof votesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: votesABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof votesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link votesABI}__.
 */
export function useVotesWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof votesABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof votesABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof votesABI, TFunctionName, TMode>({
    abi: votesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"delegate"`.
 */
export function useVotesDelegate<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof votesABI, 'delegate'>['request']['abi'],
        'delegate',
        TMode
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<typeof votesABI, 'delegate', TMode> & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<typeof votesABI, 'delegate', TMode>({
    abi: votesABI,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useVotesDelegateBySig<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof votesABI, 'delegateBySig'>['request']['abi'],
        'delegateBySig',
        TMode
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<typeof votesABI, 'delegateBySig', TMode> & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<typeof votesABI, 'delegateBySig', TMode>({
    abi: votesABI,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link votesABI}__.
 */
export function usePrepareVotesWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof votesABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: votesABI, ...config } as UsePrepareContractWriteConfig<
    typeof votesABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareVotesDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof votesABI, 'delegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: votesABI,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof votesABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareVotesDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof votesABI, 'delegateBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: votesABI,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof votesABI, 'delegateBySig'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link votesABI}__.
 */
export function useVotesEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof votesABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: votesABI, ...config } as UseContractEventConfig<
    typeof votesABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link votesABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useVotesDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof votesABI, 'DelegateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: votesABI,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof votesABI, 'DelegateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link votesABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useVotesDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof votesABI, 'DelegateVotesChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: votesABI,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<typeof votesABI, 'DelegateVotesChanged'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ReceiverABI}__.
 */
export function useIerc1155ReceiverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc1155ReceiverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1155ReceiverABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: ierc1155ReceiverABI, ...config } as UseContractReadConfig<
    typeof ierc1155ReceiverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ReceiverABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc1155ReceiverSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ierc1155ReceiverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1155ReceiverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1155ReceiverABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ierc1155ReceiverABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__.
 */
export function useIerc1155ReceiverWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc1155ReceiverABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc1155ReceiverABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc1155ReceiverABI, TFunctionName, TMode>({
    abi: ierc1155ReceiverABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useIerc1155ReceiverOnErc1155BatchReceived<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc1155ReceiverABI,
          'onERC1155BatchReceived'
        >['request']['abi'],
        'onERC1155BatchReceived',
        TMode
      > & { functionName?: 'onERC1155BatchReceived' }
    : UseContractWriteConfig<typeof ierc1155ReceiverABI, 'onERC1155BatchReceived', TMode> & {
        abi?: never
        functionName?: 'onERC1155BatchReceived'
      } = {} as any,
) {
  return useContractWrite<typeof ierc1155ReceiverABI, 'onERC1155BatchReceived', TMode>({
    abi: ierc1155ReceiverABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useIerc1155ReceiverOnErc1155Received<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc1155ReceiverABI,
          'onERC1155Received'
        >['request']['abi'],
        'onERC1155Received',
        TMode
      > & { functionName?: 'onERC1155Received' }
    : UseContractWriteConfig<typeof ierc1155ReceiverABI, 'onERC1155Received', TMode> & {
        abi?: never
        functionName?: 'onERC1155Received'
      } = {} as any,
) {
  return useContractWrite<typeof ierc1155ReceiverABI, 'onERC1155Received', TMode>({
    abi: ierc1155ReceiverABI,
    functionName: 'onERC1155Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__.
 */
export function usePrepareIerc1155ReceiverWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc1155ReceiverABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155ReceiverABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc1155ReceiverABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function usePrepareIerc1155ReceiverOnErc1155BatchReceived(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc1155ReceiverABI, 'onERC1155BatchReceived'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155ReceiverABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc1155ReceiverABI, 'onERC1155BatchReceived'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function usePrepareIerc1155ReceiverOnErc1155Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc1155ReceiverABI, 'onERC1155Received'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc1155ReceiverABI,
    functionName: 'onERC1155Received',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc1155ReceiverABI, 'onERC1155Received'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: ierc20ABI, ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20Allowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, TFunctionName, TMode>({
    abi: ierc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20ABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc20ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, 'approve', TMode>({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20Transfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20ABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof ierc20ABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, 'transfer', TMode>({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20TransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20ABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof ierc20ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, 'transferFrom', TMode>({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function usePrepareIerc20Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ierc20ABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc20ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc20ABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ierc20ABI, ...config } as UseContractEventConfig<
    typeof ierc20ABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc721ABI, ...config } as UseContractReadConfig<
    typeof erc721ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721GetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721IsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"name"`.
 */
export function useErc721Name<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721OwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721Symbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721TokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc721ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc721ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof erc721ABI, TFunctionName, TMode>({
    abi: erc721ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc721ABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc721ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc721ABI, 'approve', TMode>({
    abi: erc721ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721SafeTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc721ABI, 'safeTransferFrom'>['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof erc721ABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc721ABI, 'safeTransferFrom', TMode>({
    abi: erc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721SetApprovalForAll<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc721ABI, 'setApprovalForAll'>['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof erc721ABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof erc721ABI, 'setApprovalForAll', TMode>({
    abi: erc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721TransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc721ABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof erc721ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc721ABI, 'transferFrom', TMode>({
    abi: erc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function usePrepareErc721Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: erc721ABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc721ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc721ABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: erc721ABI, ...config } as UseContractEventConfig<
    typeof erc721ABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: ierc721ABI, ...config } as UseContractReadConfig<
    typeof ierc721ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721GetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof ierc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721IsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof ierc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721OwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof ierc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ierc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc721ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc721ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc721ABI, TFunctionName, TMode>({
    abi: ierc721ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc721ABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc721ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721ABI, 'approve', TMode>({
    abi: ierc721ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721SafeTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc721ABI, 'safeTransferFrom'>['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721ABI, 'safeTransferFrom', TMode>({
    abi: ierc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721SetApprovalForAll<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc721ABI, 'setApprovalForAll'>['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721ABI, 'setApprovalForAll', TMode>({
    abi: ierc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721TransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc721ABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof ierc721ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721ABI, 'transferFrom', TMode>({
    abi: ierc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function usePrepareIerc721Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc721ABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ierc721ABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc721ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc721ABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ierc721ABI, ...config } as UseContractEventConfig<
    typeof ierc721ABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function useIerc721ReceiverWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc721ReceiverABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc721ReceiverABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc721ReceiverABI, TFunctionName, TMode>({
    abi: ierc721ReceiverABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useIerc721ReceiverOnErc721Received<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc721ReceiverABI, 'onERC721Received'>['request']['abi'],
        'onERC721Received',
        TMode
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<typeof ierc721ReceiverABI, 'onERC721Received', TMode> & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721ReceiverABI, 'onERC721Received', TMode>({
    abi: ierc721ReceiverABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function usePrepareIerc721ReceiverWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ReceiverABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ReceiverABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareIerc721ReceiverOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ReceiverABI, 'onERC721Received'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ReceiverABI, 'onERC721Received'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc165ABI, ...config } as UseContractReadConfig<
    typeof erc165ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof erc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc165ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: ierc165ABI, ...config } as UseContractReadConfig<
    typeof ierc165ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ierc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function useErc721BurnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc721BurnableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc721BurnableABI, ...config } as UseContractReadConfig<
    typeof erc721BurnableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721BurnableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc721BurnableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721BurnableGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof erc721BurnableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721BurnableIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof erc721BurnableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"name"`.
 */
export function useErc721BurnableName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc721BurnableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721BurnableOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof erc721BurnableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721BurnableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof erc721BurnableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721BurnableSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc721BurnableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721BurnableTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof erc721BurnableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function useErc721BurnableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc721BurnableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc721BurnableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof erc721BurnableABI, TFunctionName, TMode>({
    abi: erc721BurnableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721BurnableApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc721BurnableABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc721BurnableABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc721BurnableABI, 'approve', TMode>({
    abi: erc721BurnableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"burn"`.
 */
export function useErc721BurnableBurn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc721BurnableABI, 'burn'>['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof erc721BurnableABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<typeof erc721BurnableABI, 'burn', TMode>({
    abi: erc721BurnableABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721BurnableSafeTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc721BurnableABI, 'safeTransferFrom'>['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof erc721BurnableABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc721BurnableABI, 'safeTransferFrom', TMode>({
    abi: erc721BurnableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721BurnableSetApprovalForAll<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc721BurnableABI, 'setApprovalForAll'>['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof erc721BurnableABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof erc721BurnableABI, 'setApprovalForAll', TMode>({
    abi: erc721BurnableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721BurnableTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc721BurnableABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof erc721BurnableABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc721BurnableABI, 'transferFrom', TMode>({
    abi: erc721BurnableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function usePrepareErc721BurnableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BurnableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BurnableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721BurnableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareErc721BurnableBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721BurnableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721BurnableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721BurnableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function useErc721BurnableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc721BurnableABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: erc721BurnableABI, ...config } as UseContractEventConfig<
    typeof erc721BurnableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721BurnableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721BurnableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BurnableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721BurnableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721BurnableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721BurnableABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BurnableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721BurnableABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721BurnableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721BurnableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BurnableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721BurnableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__.
 */
export function useErc721EnumerableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc721EnumerableABI, ...config } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721EnumerableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721EnumerableGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721EnumerableIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"name"`.
 */
export function useErc721EnumerableName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721EnumerableOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721EnumerableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721EnumerableSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useErc721EnumerableTokenByIndex<
  TFunctionName extends 'tokenByIndex',
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function useErc721EnumerableTokenOfOwnerByIndex<
  TFunctionName extends 'tokenOfOwnerByIndex',
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721EnumerableTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc721EnumerableTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__.
 */
export function useErc721EnumerableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc721EnumerableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc721EnumerableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof erc721EnumerableABI, TFunctionName, TMode>({
    abi: erc721EnumerableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721EnumerableApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc721EnumerableABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc721EnumerableABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc721EnumerableABI, 'approve', TMode>({
    abi: erc721EnumerableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721EnumerableSafeTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721EnumerableABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof erc721EnumerableABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc721EnumerableABI, 'safeTransferFrom', TMode>({
    abi: erc721EnumerableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721EnumerableSetApprovalForAll<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721EnumerableABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof erc721EnumerableABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof erc721EnumerableABI, 'setApprovalForAll', TMode>({
    abi: erc721EnumerableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721EnumerableTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc721EnumerableABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof erc721EnumerableABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc721EnumerableABI, 'transferFrom', TMode>({
    abi: erc721EnumerableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__.
 */
export function usePrepareErc721EnumerableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721EnumerableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721EnumerableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721EnumerableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721EnumerableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721EnumerableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721EnumerableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721EnumerableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721EnumerableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721EnumerableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721EnumerableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721EnumerableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721EnumerableABI}__.
 */
export function useErc721EnumerableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc721EnumerableABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: erc721EnumerableABI, ...config } as UseContractEventConfig<
    typeof erc721EnumerableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721EnumerableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721EnumerableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721EnumerableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721EnumerableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721EnumerableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721EnumerableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721EnumerableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721EnumerableABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721EnumerableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721EnumerableABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721EnumerableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721EnumerableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721EnumerableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721EnumerableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721EnumerableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__.
 */
export function useErc721VotesRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc721VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc721VotesABI, ...config } as UseContractReadConfig<
    typeof erc721VotesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useErc721VotesDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof erc721VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721VotesBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc721VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"delegates"`.
 */
export function useErc721VotesDelegates<
  TFunctionName extends 'delegates',
  TSelectData = ReadContractResult<typeof erc721VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721VotesGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof erc721VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useErc721VotesGetPastTotalSupply<
  TFunctionName extends 'getPastTotalSupply',
  TSelectData = ReadContractResult<typeof erc721VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useErc721VotesGetPastVotes<
  TFunctionName extends 'getPastVotes',
  TSelectData = ReadContractResult<typeof erc721VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"getVotes"`.
 */
export function useErc721VotesGetVotes<
  TFunctionName extends 'getVotes',
  TSelectData = ReadContractResult<typeof erc721VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721VotesIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof erc721VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"name"`.
 */
export function useErc721VotesName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc721VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"nonces"`.
 */
export function useErc721VotesNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof erc721VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721VotesOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof erc721VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721VotesSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof erc721VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721VotesSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc721VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721VotesTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof erc721VotesABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721VotesABI}__.
 */
export function useErc721VotesWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc721VotesABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc721VotesABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof erc721VotesABI, TFunctionName, TMode>({
    abi: erc721VotesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721VotesApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc721VotesABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc721VotesABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc721VotesABI, 'approve', TMode>({
    abi: erc721VotesABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"delegate"`.
 */
export function useErc721VotesDelegate<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc721VotesABI, 'delegate'>['request']['abi'],
        'delegate',
        TMode
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<typeof erc721VotesABI, 'delegate', TMode> & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<typeof erc721VotesABI, 'delegate', TMode>({
    abi: erc721VotesABI,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useErc721VotesDelegateBySig<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc721VotesABI, 'delegateBySig'>['request']['abi'],
        'delegateBySig',
        TMode
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<typeof erc721VotesABI, 'delegateBySig', TMode> & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<typeof erc721VotesABI, 'delegateBySig', TMode>({
    abi: erc721VotesABI,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721VotesSafeTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc721VotesABI, 'safeTransferFrom'>['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof erc721VotesABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc721VotesABI, 'safeTransferFrom', TMode>({
    abi: erc721VotesABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721VotesSetApprovalForAll<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc721VotesABI, 'setApprovalForAll'>['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof erc721VotesABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof erc721VotesABI, 'setApprovalForAll', TMode>({
    abi: erc721VotesABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721VotesTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc721VotesABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof erc721VotesABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc721VotesABI, 'transferFrom', TMode>({
    abi: erc721VotesABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721VotesABI}__.
 */
export function usePrepareErc721VotesWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721VotesABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721VotesABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721VotesABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721VotesApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721VotesABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721VotesABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721VotesABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareErc721VotesDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721VotesABI, 'delegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721VotesABI,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721VotesABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareErc721VotesDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721VotesABI, 'delegateBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721VotesABI,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721VotesABI, 'delegateBySig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721VotesSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721VotesABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721VotesABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721VotesABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721VotesSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721VotesABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721VotesABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721VotesABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721VotesTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721VotesABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721VotesABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721VotesABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721VotesABI}__.
 */
export function useErc721VotesEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc721VotesABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: erc721VotesABI, ...config } as UseContractEventConfig<
    typeof erc721VotesABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721VotesABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721VotesApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721VotesABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721VotesABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721VotesABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721VotesABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721VotesApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721VotesABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721VotesABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721VotesABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721VotesABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useErc721VotesDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721VotesABI, 'DelegateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721VotesABI,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof erc721VotesABI, 'DelegateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721VotesABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useErc721VotesDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721VotesABI, 'DelegateVotesChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721VotesABI,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<typeof erc721VotesABI, 'DelegateVotesChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721VotesABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721VotesTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721VotesABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721VotesABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721VotesABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__.
 */
export function useIerc721EnumerableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: ierc721EnumerableABI, ...config } as UseContractReadConfig<
    typeof ierc721EnumerableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721EnumerableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721EnumerableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721EnumerableGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof ierc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof ierc721EnumerableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721EnumerableIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof ierc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof ierc721EnumerableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721EnumerableOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof ierc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721EnumerableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721EnumerableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ierc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ierc721EnumerableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useIerc721EnumerableTokenByIndex<
  TFunctionName extends 'tokenByIndex',
  TSelectData = ReadContractResult<typeof ierc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<typeof ierc721EnumerableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function useIerc721EnumerableTokenOfOwnerByIndex<
  TFunctionName extends 'tokenOfOwnerByIndex',
  TSelectData = ReadContractResult<typeof ierc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<typeof ierc721EnumerableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc721EnumerableTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof ierc721EnumerableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof ierc721EnumerableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__.
 */
export function useIerc721EnumerableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc721EnumerableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc721EnumerableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc721EnumerableABI, TFunctionName, TMode>({
    abi: ierc721EnumerableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721EnumerableApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc721EnumerableABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc721EnumerableABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721EnumerableABI, 'approve', TMode>({
    abi: ierc721EnumerableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721EnumerableSafeTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721EnumerableABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof ierc721EnumerableABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721EnumerableABI, 'safeTransferFrom', TMode>({
    abi: ierc721EnumerableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721EnumerableSetApprovalForAll<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721EnumerableABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof ierc721EnumerableABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721EnumerableABI, 'setApprovalForAll', TMode>({
    abi: ierc721EnumerableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721EnumerableTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc721EnumerableABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof ierc721EnumerableABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721EnumerableABI, 'transferFrom', TMode>({
    abi: ierc721EnumerableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__.
 */
export function usePrepareIerc721EnumerableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721EnumerableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721EnumerableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721EnumerableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721EnumerableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721EnumerableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721EnumerableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721EnumerableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721EnumerableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721EnumerableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721EnumerableABI}__.
 */
export function useIerc721EnumerableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc721EnumerableABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ierc721EnumerableABI, ...config } as UseContractEventConfig<
    typeof ierc721EnumerableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721EnumerableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721EnumerableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721EnumerableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc721EnumerableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721EnumerableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721EnumerableABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721EnumerableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc721EnumerableABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721EnumerableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721EnumerableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721EnumerableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc721EnumerableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: ierc721MetadataABI, ...config } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721MetadataBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721MetadataGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721MetadataIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"name"`.
 */
export function useIerc721MetadataName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721MetadataOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721MetadataSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc721MetadataSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useIerc721MetadataTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc721MetadataABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc721MetadataABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc721MetadataABI, TFunctionName, TMode>({
    abi: ierc721MetadataABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721MetadataApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc721MetadataABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc721MetadataABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721MetadataABI, 'approve', TMode>({
    abi: ierc721MetadataABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721MetadataSafeTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc721MetadataABI, 'safeTransferFrom'>['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof ierc721MetadataABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721MetadataABI, 'safeTransferFrom', TMode>({
    abi: ierc721MetadataABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721MetadataSetApprovalForAll<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721MetadataABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof ierc721MetadataABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721MetadataABI, 'setApprovalForAll', TMode>({
    abi: ierc721MetadataABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721MetadataTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc721MetadataABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof ierc721MetadataABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721MetadataABI, 'transferFrom', TMode>({
    abi: ierc721MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function usePrepareIerc721MetadataWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721MetadataApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721MetadataSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721MetadataSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721MetadataTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc721MetadataABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ierc721MetadataABI, ...config } as UseContractEventConfig<
    typeof ierc721MetadataABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721MetadataApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721MetadataApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721MetadataTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataABI, 'Transfer'>)
}
