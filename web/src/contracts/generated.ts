// Generated by @wagmi/cli@0.1.6 on 11/02/2023 at 16:29:10
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import { WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PBAuctionHouse
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pbAuctionHouseABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_token', internalType: 'contract IPBToken', type: 'address' },
      { name: '_treasury', internalType: 'address', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'bidder', internalType: 'address', type: 'address', indexed: false },
      { name: 'bid', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Bid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'Start',
  },
  { stateMutability: 'payable', type: 'function', inputs: [], name: 'bid', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAuction',
    outputs: [
      {
        name: '',
        internalType: 'struct PBAuctionHouse.AuctionState',
        type: 'tuple',
        components: [
          { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
          { name: 'startTime', internalType: 'uint256', type: 'uint256' },
          { name: 'endTime', internalType: 'uint256', type: 'uint256' },
          { name: 'currentBid', internalType: 'uint256', type: 'uint256' },
          { name: 'bidder', internalType: 'address', type: 'address' },
          { name: 'minBid', internalType: 'uint256', type: 'uint256' },
          { name: 'isFinished', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getConfig',
    outputs: [
      {
        name: '',
        internalType: 'struct PBAuctionHouse.AuctionConfig',
        type: 'tuple',
        components: [
          { name: 'treasury', internalType: 'address', type: 'address' },
          { name: 'token', internalType: 'address', type: 'address' },
          { name: 'duration', internalType: 'uint256', type: 'uint256' },
          { name: 'extendedDuration', internalType: 'uint256', type: 'uint256' },
          { name: 'minFirstBid', internalType: 'uint256', type: 'uint256' },
          { name: 'minBidIncrementPercent', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_duration', internalType: 'uint256', type: 'uint256' }],
    name: 'setDuration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_extendedDuration', internalType: 'uint256', type: 'uint256' }],
    name: 'setExtendedDuration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_minBidIncrementPercent', internalType: 'uint256', type: 'uint256' }],
    name: 'setMinBidIncrementPercent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_minFirstBid', internalType: 'uint256', type: 'uint256' }],
    name: 'setMinFirstBid',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_treasury', internalType: 'address', type: 'address' }],
    name: 'setTreasury',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'start', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PBToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pbTokenABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_store', internalType: 'address', type: 'address' },
      { name: '_auctionHouse', internalType: 'address', type: 'address' },
      { name: '_founders', internalType: 'address', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'delegator', internalType: 'address', type: 'address', indexed: true },
      { name: 'fromDelegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'toDelegate', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'delegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'previousBalance', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'newBalance', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'auctionHouse',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'dnaMap',
    outputs: [{ name: '', internalType: 'uint96', type: 'uint96' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'founders',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'mint', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_auctionHouse', internalType: 'address', type: 'address' }],
    name: 'setAuctionHouse',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'store',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PBTokenPartsStore
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pbTokenPartsStoreABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'color',
        internalType: 'struct IPBTokenPartsStore.Color',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'color', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addBgColor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addCrown',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addDecoration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addGarland',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'color',
        internalType: 'struct IPBTokenPartsStore.Color',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'color', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addGooglesColor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addLogo1',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addLogo2',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addLogo3',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addLogo4',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'palette',
        internalType: 'struct IPBTokenPartsStore.Palette',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'primary', internalType: 'string', type: 'string' },
          { name: 'secondary', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addLogoPalette',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addShield',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'bgColors',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'color', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'bgColorsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'crowns',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'crownsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'decorations',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decorationsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'garlands',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'garlandsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getBgColor',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.Color',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'color', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getCrown',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getDecoration',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getGarland',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getGooglesColor',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.Color',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'color', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getLogo1',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getLogo2',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getLogo3',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getLogo4',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getLogoPalette',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.Palette',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'primary', internalType: 'string', type: 'string' },
          { name: 'secondary', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getShield',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'googlesColors',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'color', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'googlesColorsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'logoPalettes',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'primary', internalType: 'string', type: 'string' },
      { name: 'secondary', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'logoPalettesCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'logos1',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'logos1Count',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'logos2',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'logos2Count',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'logos3',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'logos3Count',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'logos4',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'logos4Count',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'shields',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'svg', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'shieldsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPBToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ipbTokenABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'mint', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPBTokenPartsStore
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ipbTokenPartsStoreABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'color',
        internalType: 'struct IPBTokenPartsStore.Color',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'color', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addBgColor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addCrown',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addDecoration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addGarland',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'color',
        internalType: 'struct IPBTokenPartsStore.Color',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'color', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addGooglesColor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addLogo1',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addLogo2',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addLogo3',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addLogo4',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'palette',
        internalType: 'struct IPBTokenPartsStore.Palette',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'primary', internalType: 'string', type: 'string' },
          { name: 'secondary', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addLogoPalette',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'part',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'addShield',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'bgColorsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'crownsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decorationsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'garlandsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getBgColor',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.Color',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'color', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getCrown',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getDecoration',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getGarland',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getGooglesColor',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.Color',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'color', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getLogo1',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getLogo2',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getLogo3',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getLogo4',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getLogoPalette',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.Palette',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'primary', internalType: 'string', type: 'string' },
          { name: 'secondary', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint8', type: 'uint8' }],
    name: 'getShield',
    outputs: [
      {
        name: '',
        internalType: 'struct IPBTokenPartsStore.ImagePart',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'svg', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'googlesColorsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'logoPalettesCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'logos1Count',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'logos2Count',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'logos3Count',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'logos4Count',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'shieldsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PBTokenComposer
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pbTokenComposerABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'storeAddress', internalType: 'address', type: 'address' },
      { name: 'dna', internalType: 'uint96', type: 'uint96' },
    ],
    name: 'getImageParts',
    outputs: [
      {
        name: '',
        internalType: 'struct PBTokenComposer.ImageParts',
        type: 'tuple',
        components: [
          {
            name: 'bgColor',
            internalType: 'struct IPBTokenPartsStore.Color',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'color', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'googlesColor',
            internalType: 'struct IPBTokenPartsStore.Color',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'color', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'crown',
            internalType: 'struct IPBTokenPartsStore.ImagePart',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'svg', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'decoration',
            internalType: 'struct IPBTokenPartsStore.ImagePart',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'svg', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'garland',
            internalType: 'struct IPBTokenPartsStore.ImagePart',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'svg', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'shield',
            internalType: 'struct IPBTokenPartsStore.ImagePart',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'svg', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'logoPalette1',
            internalType: 'struct IPBTokenPartsStore.Palette',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'primary', internalType: 'string', type: 'string' },
              { name: 'secondary', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'logoPalette2',
            internalType: 'struct IPBTokenPartsStore.Palette',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'primary', internalType: 'string', type: 'string' },
              { name: 'secondary', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'logo1',
            internalType: 'struct IPBTokenPartsStore.ImagePart',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'svg', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'logo2',
            internalType: 'struct IPBTokenPartsStore.ImagePart',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'svg', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'logo3',
            internalType: 'struct IPBTokenPartsStore.ImagePart',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'svg', internalType: 'string', type: 'string' },
            ],
          },
          {
            name: 'logo4',
            internalType: 'struct IPBTokenPartsStore.ImagePart',
            type: 'tuple',
            components: [
              { name: 'name', internalType: 'string', type: 'string' },
              { name: 'svg', internalType: 'string', type: 'string' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'storeAddress', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'dna', internalType: 'uint96', type: 'uint96' },
    ],
    name: 'getTokenMetadata',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PBTokenDna
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pbTokenDnaABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'storeAddress', internalType: 'address', type: 'address' },
      { name: 'seed', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'generateDna',
    outputs: [{ name: '', internalType: 'uint96', type: 'uint96' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'img',
        internalType: 'struct PBTokenDna.Image',
        type: 'tuple',
        components: [
          { name: 'bgColorId', internalType: 'uint8', type: 'uint8' },
          { name: 'googlesColorId', internalType: 'uint8', type: 'uint8' },
          { name: 'crownId', internalType: 'uint8', type: 'uint8' },
          { name: 'decorationId', internalType: 'uint8', type: 'uint8' },
          { name: 'garlandId', internalType: 'uint8', type: 'uint8' },
          { name: 'shieldId', internalType: 'uint8', type: 'uint8' },
          { name: 'logoPalette1Id', internalType: 'uint8', type: 'uint8' },
          { name: 'logoPalette2Id', internalType: 'uint8', type: 'uint8' },
          { name: 'logo1Id', internalType: 'uint8', type: 'uint8' },
          { name: 'logo2Id', internalType: 'uint8', type: 'uint8' },
          { name: 'logo3Id', internalType: 'uint8', type: 'uint8' },
          { name: 'logo4Id', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
    name: 'getDnaFromImage',
    outputs: [{ name: 'dna', internalType: 'uint96', type: 'uint96' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'dna', internalType: 'uint96', type: 'uint96' }],
    name: 'getImageFromDna',
    outputs: [
      {
        name: '',
        internalType: 'struct PBTokenDna.Image',
        type: 'tuple',
        components: [
          { name: 'bgColorId', internalType: 'uint8', type: 'uint8' },
          { name: 'googlesColorId', internalType: 'uint8', type: 'uint8' },
          { name: 'crownId', internalType: 'uint8', type: 'uint8' },
          { name: 'decorationId', internalType: 'uint8', type: 'uint8' },
          { name: 'garlandId', internalType: 'uint8', type: 'uint8' },
          { name: 'shieldId', internalType: 'uint8', type: 'uint8' },
          { name: 'logoPalette1Id', internalType: 'uint8', type: 'uint8' },
          { name: 'logoPalette2Id', internalType: 'uint8', type: 'uint8' },
          { name: 'logo1Id', internalType: 'uint8', type: 'uint8' },
          { name: 'logo2Id', internalType: 'uint8', type: 'uint8' },
          { name: 'logo3Id', internalType: 'uint8', type: 'uint8' },
          { name: 'logo4Id', internalType: 'uint8', type: 'uint8' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IVotes
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iVotesABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'delegator', internalType: 'address', type: 'address', indexed: true },
      { name: 'fromDelegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'toDelegate', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'delegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'previousBalance', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'newBalance', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Votes
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const votesABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'delegator', internalType: 'address', type: 'address', indexed: true },
      { name: 'fromDelegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'toDelegate', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'delegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'previousBalance', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'newBalance', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Receiver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ReceiverABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721Burnable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721BurnableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721Enumerable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721EnumerableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721Votes
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721VotesABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'delegator', internalType: 'address', type: 'address', indexed: true },
      { name: 'fromDelegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'toDelegate', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'delegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'previousBalance', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'newBalance', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Enumerable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721EnumerableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721MetadataABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link pbAuctionHouseABI}__.
 */
export function usePbAuctionHouse(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: pbAuctionHouseABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbAuctionHouseABI}__.
 */
export function usePbAuctionHouseRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof pbAuctionHouseABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: pbAuctionHouseABI, ...config } as UseContractReadConfig<
    typeof pbAuctionHouseABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"getAuction"`.
 */
export function usePbAuctionHouseGetAuction(
  config: Omit<
    UseContractReadConfig<typeof pbAuctionHouseABI, 'getAuction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbAuctionHouseABI,
    functionName: 'getAuction',
    ...config,
  } as UseContractReadConfig<typeof pbAuctionHouseABI, 'getAuction'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"getConfig"`.
 */
export function usePbAuctionHouseGetConfig(
  config: Omit<
    UseContractReadConfig<typeof pbAuctionHouseABI, 'getConfig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbAuctionHouseABI,
    functionName: 'getConfig',
    ...config,
  } as UseContractReadConfig<typeof pbAuctionHouseABI, 'getConfig'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePbAuctionHouseOnErc721Received(
  config: Omit<
    UseContractReadConfig<typeof pbAuctionHouseABI, 'onERC721Received'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbAuctionHouseABI,
    functionName: 'onERC721Received',
    ...config,
  } as UseContractReadConfig<typeof pbAuctionHouseABI, 'onERC721Received'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"owner"`.
 */
export function usePbAuctionHouseOwner(
  config: Omit<
    UseContractReadConfig<typeof pbAuctionHouseABI, 'owner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbAuctionHouseABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof pbAuctionHouseABI, 'owner'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__.
 */
export function usePbAuctionHouseWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbAuctionHouseABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof pbAuctionHouseABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbAuctionHouseABI, TFunctionName>({
    abi: pbAuctionHouseABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"bid"`.
 */
export function usePbAuctionHouseBid<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbAuctionHouseABI, 'bid'>['abi'],
        'bid'
      > & { functionName?: 'bid' }
    : UseContractWriteConfig<TMode, typeof pbAuctionHouseABI, 'bid'> & {
        abi?: never
        functionName?: 'bid'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbAuctionHouseABI, 'bid'>({
    abi: pbAuctionHouseABI,
    functionName: 'bid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePbAuctionHouseRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbAuctionHouseABI, 'renounceOwnership'>['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof pbAuctionHouseABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbAuctionHouseABI, 'renounceOwnership'>({
    abi: pbAuctionHouseABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"setDuration"`.
 */
export function usePbAuctionHouseSetDuration<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbAuctionHouseABI, 'setDuration'>['abi'],
        'setDuration'
      > & { functionName?: 'setDuration' }
    : UseContractWriteConfig<TMode, typeof pbAuctionHouseABI, 'setDuration'> & {
        abi?: never
        functionName?: 'setDuration'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbAuctionHouseABI, 'setDuration'>({
    abi: pbAuctionHouseABI,
    functionName: 'setDuration',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"setExtendedDuration"`.
 */
export function usePbAuctionHouseSetExtendedDuration<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbAuctionHouseABI, 'setExtendedDuration'>['abi'],
        'setExtendedDuration'
      > & { functionName?: 'setExtendedDuration' }
    : UseContractWriteConfig<TMode, typeof pbAuctionHouseABI, 'setExtendedDuration'> & {
        abi?: never
        functionName?: 'setExtendedDuration'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbAuctionHouseABI, 'setExtendedDuration'>({
    abi: pbAuctionHouseABI,
    functionName: 'setExtendedDuration',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"setMinBidIncrementPercent"`.
 */
export function usePbAuctionHouseSetMinBidIncrementPercent<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbAuctionHouseABI, 'setMinBidIncrementPercent'>['abi'],
        'setMinBidIncrementPercent'
      > & { functionName?: 'setMinBidIncrementPercent' }
    : UseContractWriteConfig<TMode, typeof pbAuctionHouseABI, 'setMinBidIncrementPercent'> & {
        abi?: never
        functionName?: 'setMinBidIncrementPercent'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbAuctionHouseABI, 'setMinBidIncrementPercent'>({
    abi: pbAuctionHouseABI,
    functionName: 'setMinBidIncrementPercent',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"setMinFirstBid"`.
 */
export function usePbAuctionHouseSetMinFirstBid<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbAuctionHouseABI, 'setMinFirstBid'>['abi'],
        'setMinFirstBid'
      > & { functionName?: 'setMinFirstBid' }
    : UseContractWriteConfig<TMode, typeof pbAuctionHouseABI, 'setMinFirstBid'> & {
        abi?: never
        functionName?: 'setMinFirstBid'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbAuctionHouseABI, 'setMinFirstBid'>({
    abi: pbAuctionHouseABI,
    functionName: 'setMinFirstBid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"setTreasury"`.
 */
export function usePbAuctionHouseSetTreasury<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbAuctionHouseABI, 'setTreasury'>['abi'],
        'setTreasury'
      > & { functionName?: 'setTreasury' }
    : UseContractWriteConfig<TMode, typeof pbAuctionHouseABI, 'setTreasury'> & {
        abi?: never
        functionName?: 'setTreasury'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbAuctionHouseABI, 'setTreasury'>({
    abi: pbAuctionHouseABI,
    functionName: 'setTreasury',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"start"`.
 */
export function usePbAuctionHouseStart<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbAuctionHouseABI, 'start'>['abi'],
        'start'
      > & { functionName?: 'start' }
    : UseContractWriteConfig<TMode, typeof pbAuctionHouseABI, 'start'> & {
        abi?: never
        functionName?: 'start'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbAuctionHouseABI, 'start'>({
    abi: pbAuctionHouseABI,
    functionName: 'start',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePbAuctionHouseTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbAuctionHouseABI, 'transferOwnership'>['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof pbAuctionHouseABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbAuctionHouseABI, 'transferOwnership'>({
    abi: pbAuctionHouseABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__.
 */
export function usePreparePbAuctionHouseWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbAuctionHouseABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"bid"`.
 */
export function usePreparePbAuctionHouseBid(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'bid'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbAuctionHouseABI,
    functionName: 'bid',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'bid'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePreparePbAuctionHouseRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbAuctionHouseABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"setDuration"`.
 */
export function usePreparePbAuctionHouseSetDuration(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'setDuration'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbAuctionHouseABI,
    functionName: 'setDuration',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'setDuration'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"setExtendedDuration"`.
 */
export function usePreparePbAuctionHouseSetExtendedDuration(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'setExtendedDuration'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbAuctionHouseABI,
    functionName: 'setExtendedDuration',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'setExtendedDuration'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"setMinBidIncrementPercent"`.
 */
export function usePreparePbAuctionHouseSetMinBidIncrementPercent(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'setMinBidIncrementPercent'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbAuctionHouseABI,
    functionName: 'setMinBidIncrementPercent',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'setMinBidIncrementPercent'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"setMinFirstBid"`.
 */
export function usePreparePbAuctionHouseSetMinFirstBid(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'setMinFirstBid'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbAuctionHouseABI,
    functionName: 'setMinFirstBid',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'setMinFirstBid'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"setTreasury"`.
 */
export function usePreparePbAuctionHouseSetTreasury(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'setTreasury'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbAuctionHouseABI,
    functionName: 'setTreasury',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'setTreasury'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"start"`.
 */
export function usePreparePbAuctionHouseStart(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'start'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbAuctionHouseABI,
    functionName: 'start',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'start'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePreparePbAuctionHouseTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbAuctionHouseABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbAuctionHouseABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pbAuctionHouseABI}__.
 */
export function usePbAuctionHouseEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof pbAuctionHouseABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: pbAuctionHouseABI, ...config } as UseContractEventConfig<
    typeof pbAuctionHouseABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `eventName` set to `"Bid"`.
 */
export function usePbAuctionHouseBidEvent(
  config: Omit<
    UseContractEventConfig<typeof pbAuctionHouseABI, 'Bid'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pbAuctionHouseABI,
    eventName: 'Bid',
    ...config,
  } as UseContractEventConfig<typeof pbAuctionHouseABI, 'Bid'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function usePbAuctionHouseOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof pbAuctionHouseABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pbAuctionHouseABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof pbAuctionHouseABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pbAuctionHouseABI}__ and `eventName` set to `"Start"`.
 */
export function usePbAuctionHouseStartEvent(
  config: Omit<
    UseContractEventConfig<typeof pbAuctionHouseABI, 'Start'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pbAuctionHouseABI,
    eventName: 'Start',
    ...config,
  } as UseContractEventConfig<typeof pbAuctionHouseABI, 'Start'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link pbTokenABI}__.
 */
export function usePbToken(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: pbTokenABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__.
 */
export function usePbTokenRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof pbTokenABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: pbTokenABI, ...config } as UseContractReadConfig<
    typeof pbTokenABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function usePbTokenDomainSeparator(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'DOMAIN_SEPARATOR'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'DOMAIN_SEPARATOR'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"auctionHouse"`.
 */
export function usePbTokenAuctionHouse(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'auctionHouse'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    functionName: 'auctionHouse',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'auctionHouse'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function usePbTokenBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"delegates"`.
 */
export function usePbTokenDelegates(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'delegates'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'delegates'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"dnaMap"`.
 */
export function usePbTokenDnaMap(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'dnaMap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    functionName: 'dnaMap',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'dnaMap'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"founders"`.
 */
export function usePbTokenFounders(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'founders'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    functionName: 'founders',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'founders'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"getApproved"`.
 */
export function usePbTokenGetApproved(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'getApproved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function usePbTokenGetPastTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'getPastTotalSupply'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'getPastTotalSupply'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function usePbTokenGetPastVotes(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'getPastVotes'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'getPastVotes'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"getVotes"`.
 */
export function usePbTokenGetVotes(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'getVotes'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'getVotes'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function usePbTokenIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"name"`.
 */
export function usePbTokenName(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"nonces"`.
 */
export function usePbTokenNonces(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'nonces'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'nonces'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"owner"`.
 */
export function usePbTokenOwner(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'owner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'owner'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"ownerOf"`.
 */
export function usePbTokenOwnerOf(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"store"`.
 */
export function usePbTokenStore(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'store'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    functionName: 'store',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'store'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function usePbTokenSupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function usePbTokenSymbol(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function usePbTokenTokenByIndex(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'tokenByIndex'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'tokenByIndex'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function usePbTokenTokenOfOwnerByIndex(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'tokenOfOwnerByIndex'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'tokenOfOwnerByIndex'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"tokenURI"`.
 */
export function usePbTokenTokenUri(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'tokenURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'tokenURI'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function usePbTokenTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof pbTokenABI, 'totalSupply'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof pbTokenABI, 'totalSupply'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenABI}__.
 */
export function usePbTokenWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof pbTokenABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenABI, TFunctionName>({
    abi: pbTokenABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePbTokenApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof pbTokenABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenABI, 'approve'>({
    abi: pbTokenABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"burn"`.
 */
export function usePbTokenBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenABI, 'burn'>['abi'],
        'burn'
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<TMode, typeof pbTokenABI, 'burn'> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenABI, 'burn'>({
    abi: pbTokenABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"delegate"`.
 */
export function usePbTokenDelegate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenABI, 'delegate'>['abi'],
        'delegate'
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<TMode, typeof pbTokenABI, 'delegate'> & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenABI, 'delegate'>({
    abi: pbTokenABI,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePbTokenDelegateBySig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenABI, 'delegateBySig'>['abi'],
        'delegateBySig'
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<TMode, typeof pbTokenABI, 'delegateBySig'> & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenABI, 'delegateBySig'>({
    abi: pbTokenABI,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"mint"`.
 */
export function usePbTokenMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenABI, 'mint'>['abi'],
        'mint'
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<TMode, typeof pbTokenABI, 'mint'> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenABI, 'mint'>({
    abi: pbTokenABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePbTokenRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenABI, 'renounceOwnership'>['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof pbTokenABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenABI, 'renounceOwnership'>({
    abi: pbTokenABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePbTokenSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof pbTokenABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenABI, 'safeTransferFrom'>({
    abi: pbTokenABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePbTokenSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof pbTokenABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenABI, 'setApprovalForAll'>({
    abi: pbTokenABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"setAuctionHouse"`.
 */
export function usePbTokenSetAuctionHouse<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenABI, 'setAuctionHouse'>['abi'],
        'setAuctionHouse'
      > & { functionName?: 'setAuctionHouse' }
    : UseContractWriteConfig<TMode, typeof pbTokenABI, 'setAuctionHouse'> & {
        abi?: never
        functionName?: 'setAuctionHouse'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenABI, 'setAuctionHouse'>({
    abi: pbTokenABI,
    functionName: 'setAuctionHouse',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePbTokenTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof pbTokenABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenABI, 'transferFrom'>({
    abi: pbTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePbTokenTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenABI, 'transferOwnership'>['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof pbTokenABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenABI, 'transferOwnership'>({
    abi: pbTokenABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenABI}__.
 */
export function usePreparePbTokenWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof pbTokenABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: pbTokenABI, ...config } as UsePrepareContractWriteConfig<
    typeof pbTokenABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePreparePbTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"burn"`.
 */
export function usePreparePbTokenBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"delegate"`.
 */
export function usePreparePbTokenDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenABI, 'delegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenABI,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePreparePbTokenDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenABI, 'delegateBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenABI,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenABI, 'delegateBySig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"mint"`.
 */
export function usePreparePbTokenMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePreparePbTokenRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePreparePbTokenSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePreparePbTokenSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"setAuctionHouse"`.
 */
export function usePreparePbTokenSetAuctionHouse(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenABI, 'setAuctionHouse'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenABI,
    functionName: 'setAuctionHouse',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenABI, 'setAuctionHouse'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePreparePbTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePreparePbTokenTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pbTokenABI}__.
 */
export function usePbTokenEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof pbTokenABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: pbTokenABI, ...config } as UseContractEventConfig<
    typeof pbTokenABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pbTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function usePbTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof pbTokenABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pbTokenABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof pbTokenABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pbTokenABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function usePbTokenApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof pbTokenABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pbTokenABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof pbTokenABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pbTokenABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function usePbTokenDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof pbTokenABI, 'DelegateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pbTokenABI,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof pbTokenABI, 'DelegateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pbTokenABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function usePbTokenDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof pbTokenABI, 'DelegateVotesChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pbTokenABI,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<typeof pbTokenABI, 'DelegateVotesChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pbTokenABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function usePbTokenOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof pbTokenABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pbTokenABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof pbTokenABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pbTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function usePbTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof pbTokenABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pbTokenABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof pbTokenABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link pbTokenPartsStoreABI}__.
 */
export function usePbTokenPartsStore(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: pbTokenPartsStoreABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__.
 */
export function usePbTokenPartsStoreRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: pbTokenPartsStoreABI, ...config } as UseContractReadConfig<
    typeof pbTokenPartsStoreABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"bgColors"`.
 */
export function usePbTokenPartsStoreBgColors(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'bgColors'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'bgColors',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'bgColors'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"bgColorsCount"`.
 */
export function usePbTokenPartsStoreBgColorsCount(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'bgColorsCount'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'bgColorsCount',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'bgColorsCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"crowns"`.
 */
export function usePbTokenPartsStoreCrowns(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'crowns'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'crowns',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'crowns'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"crownsCount"`.
 */
export function usePbTokenPartsStoreCrownsCount(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'crownsCount'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'crownsCount',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'crownsCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"decorations"`.
 */
export function usePbTokenPartsStoreDecorations(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'decorations'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'decorations',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'decorations'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"decorationsCount"`.
 */
export function usePbTokenPartsStoreDecorationsCount(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'decorationsCount'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'decorationsCount',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'decorationsCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"garlands"`.
 */
export function usePbTokenPartsStoreGarlands(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'garlands'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'garlands',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'garlands'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"garlandsCount"`.
 */
export function usePbTokenPartsStoreGarlandsCount(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'garlandsCount'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'garlandsCount',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'garlandsCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"getBgColor"`.
 */
export function usePbTokenPartsStoreGetBgColor(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getBgColor'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'getBgColor',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getBgColor'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"getCrown"`.
 */
export function usePbTokenPartsStoreGetCrown(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getCrown'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'getCrown',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getCrown'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"getDecoration"`.
 */
export function usePbTokenPartsStoreGetDecoration(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getDecoration'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'getDecoration',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getDecoration'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"getGarland"`.
 */
export function usePbTokenPartsStoreGetGarland(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getGarland'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'getGarland',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getGarland'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"getGooglesColor"`.
 */
export function usePbTokenPartsStoreGetGooglesColor(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getGooglesColor'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'getGooglesColor',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getGooglesColor'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"getLogo1"`.
 */
export function usePbTokenPartsStoreGetLogo1(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getLogo1'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'getLogo1',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getLogo1'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"getLogo2"`.
 */
export function usePbTokenPartsStoreGetLogo2(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getLogo2'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'getLogo2',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getLogo2'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"getLogo3"`.
 */
export function usePbTokenPartsStoreGetLogo3(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getLogo3'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'getLogo3',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getLogo3'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"getLogo4"`.
 */
export function usePbTokenPartsStoreGetLogo4(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getLogo4'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'getLogo4',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getLogo4'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"getLogoPalette"`.
 */
export function usePbTokenPartsStoreGetLogoPalette(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getLogoPalette'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'getLogoPalette',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getLogoPalette'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"getShield"`.
 */
export function usePbTokenPartsStoreGetShield(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getShield'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'getShield',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'getShield'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"googlesColors"`.
 */
export function usePbTokenPartsStoreGooglesColors(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'googlesColors'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'googlesColors',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'googlesColors'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"googlesColorsCount"`.
 */
export function usePbTokenPartsStoreGooglesColorsCount(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'googlesColorsCount'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'googlesColorsCount',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'googlesColorsCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"logoPalettes"`.
 */
export function usePbTokenPartsStoreLogoPalettes(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logoPalettes'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'logoPalettes',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logoPalettes'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"logoPalettesCount"`.
 */
export function usePbTokenPartsStoreLogoPalettesCount(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logoPalettesCount'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'logoPalettesCount',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logoPalettesCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"logos1"`.
 */
export function usePbTokenPartsStoreLogos1(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logos1'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'logos1',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logos1'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"logos1Count"`.
 */
export function usePbTokenPartsStoreLogos1Count(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logos1Count'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'logos1Count',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logos1Count'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"logos2"`.
 */
export function usePbTokenPartsStoreLogos2(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logos2'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'logos2',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logos2'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"logos2Count"`.
 */
export function usePbTokenPartsStoreLogos2Count(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logos2Count'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'logos2Count',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logos2Count'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"logos3"`.
 */
export function usePbTokenPartsStoreLogos3(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logos3'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'logos3',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logos3'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"logos3Count"`.
 */
export function usePbTokenPartsStoreLogos3Count(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logos3Count'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'logos3Count',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logos3Count'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"logos4"`.
 */
export function usePbTokenPartsStoreLogos4(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logos4'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'logos4',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logos4'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"logos4Count"`.
 */
export function usePbTokenPartsStoreLogos4Count(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logos4Count'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'logos4Count',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'logos4Count'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"owner"`.
 */
export function usePbTokenPartsStoreOwner(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'owner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'owner'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"shields"`.
 */
export function usePbTokenPartsStoreShields(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'shields'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'shields',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'shields'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"shieldsCount"`.
 */
export function usePbTokenPartsStoreShieldsCount(
  config: Omit<
    UseContractReadConfig<typeof pbTokenPartsStoreABI, 'shieldsCount'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenPartsStoreABI,
    functionName: 'shieldsCount',
    ...config,
  } as UseContractReadConfig<typeof pbTokenPartsStoreABI, 'shieldsCount'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__.
 */
export function usePbTokenPartsStoreWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenPartsStoreABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof pbTokenPartsStoreABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenPartsStoreABI, TFunctionName>({
    abi: pbTokenPartsStoreABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addBgColor"`.
 */
export function usePbTokenPartsStoreAddBgColor<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenPartsStoreABI, 'addBgColor'>['abi'],
        'addBgColor'
      > & { functionName?: 'addBgColor' }
    : UseContractWriteConfig<TMode, typeof pbTokenPartsStoreABI, 'addBgColor'> & {
        abi?: never
        functionName?: 'addBgColor'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenPartsStoreABI, 'addBgColor'>({
    abi: pbTokenPartsStoreABI,
    functionName: 'addBgColor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addCrown"`.
 */
export function usePbTokenPartsStoreAddCrown<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenPartsStoreABI, 'addCrown'>['abi'],
        'addCrown'
      > & { functionName?: 'addCrown' }
    : UseContractWriteConfig<TMode, typeof pbTokenPartsStoreABI, 'addCrown'> & {
        abi?: never
        functionName?: 'addCrown'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenPartsStoreABI, 'addCrown'>({
    abi: pbTokenPartsStoreABI,
    functionName: 'addCrown',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addDecoration"`.
 */
export function usePbTokenPartsStoreAddDecoration<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenPartsStoreABI, 'addDecoration'>['abi'],
        'addDecoration'
      > & { functionName?: 'addDecoration' }
    : UseContractWriteConfig<TMode, typeof pbTokenPartsStoreABI, 'addDecoration'> & {
        abi?: never
        functionName?: 'addDecoration'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenPartsStoreABI, 'addDecoration'>({
    abi: pbTokenPartsStoreABI,
    functionName: 'addDecoration',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addGarland"`.
 */
export function usePbTokenPartsStoreAddGarland<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenPartsStoreABI, 'addGarland'>['abi'],
        'addGarland'
      > & { functionName?: 'addGarland' }
    : UseContractWriteConfig<TMode, typeof pbTokenPartsStoreABI, 'addGarland'> & {
        abi?: never
        functionName?: 'addGarland'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenPartsStoreABI, 'addGarland'>({
    abi: pbTokenPartsStoreABI,
    functionName: 'addGarland',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addGooglesColor"`.
 */
export function usePbTokenPartsStoreAddGooglesColor<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenPartsStoreABI, 'addGooglesColor'>['abi'],
        'addGooglesColor'
      > & { functionName?: 'addGooglesColor' }
    : UseContractWriteConfig<TMode, typeof pbTokenPartsStoreABI, 'addGooglesColor'> & {
        abi?: never
        functionName?: 'addGooglesColor'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenPartsStoreABI, 'addGooglesColor'>({
    abi: pbTokenPartsStoreABI,
    functionName: 'addGooglesColor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addLogo1"`.
 */
export function usePbTokenPartsStoreAddLogo1<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenPartsStoreABI, 'addLogo1'>['abi'],
        'addLogo1'
      > & { functionName?: 'addLogo1' }
    : UseContractWriteConfig<TMode, typeof pbTokenPartsStoreABI, 'addLogo1'> & {
        abi?: never
        functionName?: 'addLogo1'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenPartsStoreABI, 'addLogo1'>({
    abi: pbTokenPartsStoreABI,
    functionName: 'addLogo1',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addLogo2"`.
 */
export function usePbTokenPartsStoreAddLogo2<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenPartsStoreABI, 'addLogo2'>['abi'],
        'addLogo2'
      > & { functionName?: 'addLogo2' }
    : UseContractWriteConfig<TMode, typeof pbTokenPartsStoreABI, 'addLogo2'> & {
        abi?: never
        functionName?: 'addLogo2'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenPartsStoreABI, 'addLogo2'>({
    abi: pbTokenPartsStoreABI,
    functionName: 'addLogo2',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addLogo3"`.
 */
export function usePbTokenPartsStoreAddLogo3<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenPartsStoreABI, 'addLogo3'>['abi'],
        'addLogo3'
      > & { functionName?: 'addLogo3' }
    : UseContractWriteConfig<TMode, typeof pbTokenPartsStoreABI, 'addLogo3'> & {
        abi?: never
        functionName?: 'addLogo3'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenPartsStoreABI, 'addLogo3'>({
    abi: pbTokenPartsStoreABI,
    functionName: 'addLogo3',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addLogo4"`.
 */
export function usePbTokenPartsStoreAddLogo4<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenPartsStoreABI, 'addLogo4'>['abi'],
        'addLogo4'
      > & { functionName?: 'addLogo4' }
    : UseContractWriteConfig<TMode, typeof pbTokenPartsStoreABI, 'addLogo4'> & {
        abi?: never
        functionName?: 'addLogo4'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenPartsStoreABI, 'addLogo4'>({
    abi: pbTokenPartsStoreABI,
    functionName: 'addLogo4',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addLogoPalette"`.
 */
export function usePbTokenPartsStoreAddLogoPalette<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenPartsStoreABI, 'addLogoPalette'>['abi'],
        'addLogoPalette'
      > & { functionName?: 'addLogoPalette' }
    : UseContractWriteConfig<TMode, typeof pbTokenPartsStoreABI, 'addLogoPalette'> & {
        abi?: never
        functionName?: 'addLogoPalette'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenPartsStoreABI, 'addLogoPalette'>({
    abi: pbTokenPartsStoreABI,
    functionName: 'addLogoPalette',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addShield"`.
 */
export function usePbTokenPartsStoreAddShield<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenPartsStoreABI, 'addShield'>['abi'],
        'addShield'
      > & { functionName?: 'addShield' }
    : UseContractWriteConfig<TMode, typeof pbTokenPartsStoreABI, 'addShield'> & {
        abi?: never
        functionName?: 'addShield'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenPartsStoreABI, 'addShield'>({
    abi: pbTokenPartsStoreABI,
    functionName: 'addShield',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePbTokenPartsStoreRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenPartsStoreABI, 'renounceOwnership'>['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof pbTokenPartsStoreABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenPartsStoreABI, 'renounceOwnership'>({
    abi: pbTokenPartsStoreABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePbTokenPartsStoreTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pbTokenPartsStoreABI, 'transferOwnership'>['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof pbTokenPartsStoreABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pbTokenPartsStoreABI, 'transferOwnership'>({
    abi: pbTokenPartsStoreABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__.
 */
export function usePreparePbTokenPartsStoreWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenPartsStoreABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addBgColor"`.
 */
export function usePreparePbTokenPartsStoreAddBgColor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addBgColor'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenPartsStoreABI,
    functionName: 'addBgColor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addBgColor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addCrown"`.
 */
export function usePreparePbTokenPartsStoreAddCrown(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addCrown'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenPartsStoreABI,
    functionName: 'addCrown',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addCrown'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addDecoration"`.
 */
export function usePreparePbTokenPartsStoreAddDecoration(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addDecoration'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenPartsStoreABI,
    functionName: 'addDecoration',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addDecoration'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addGarland"`.
 */
export function usePreparePbTokenPartsStoreAddGarland(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addGarland'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenPartsStoreABI,
    functionName: 'addGarland',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addGarland'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addGooglesColor"`.
 */
export function usePreparePbTokenPartsStoreAddGooglesColor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addGooglesColor'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenPartsStoreABI,
    functionName: 'addGooglesColor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addGooglesColor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addLogo1"`.
 */
export function usePreparePbTokenPartsStoreAddLogo1(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addLogo1'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenPartsStoreABI,
    functionName: 'addLogo1',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addLogo1'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addLogo2"`.
 */
export function usePreparePbTokenPartsStoreAddLogo2(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addLogo2'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenPartsStoreABI,
    functionName: 'addLogo2',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addLogo2'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addLogo3"`.
 */
export function usePreparePbTokenPartsStoreAddLogo3(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addLogo3'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenPartsStoreABI,
    functionName: 'addLogo3',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addLogo3'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addLogo4"`.
 */
export function usePreparePbTokenPartsStoreAddLogo4(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addLogo4'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenPartsStoreABI,
    functionName: 'addLogo4',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addLogo4'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addLogoPalette"`.
 */
export function usePreparePbTokenPartsStoreAddLogoPalette(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addLogoPalette'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenPartsStoreABI,
    functionName: 'addLogoPalette',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addLogoPalette'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"addShield"`.
 */
export function usePreparePbTokenPartsStoreAddShield(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addShield'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenPartsStoreABI,
    functionName: 'addShield',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'addShield'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePreparePbTokenPartsStoreRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenPartsStoreABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePreparePbTokenPartsStoreTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pbTokenPartsStoreABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pbTokenPartsStoreABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pbTokenPartsStoreABI}__.
 */
export function usePbTokenPartsStoreEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof pbTokenPartsStoreABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: pbTokenPartsStoreABI, ...config } as UseContractEventConfig<
    typeof pbTokenPartsStoreABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pbTokenPartsStoreABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function usePbTokenPartsStoreOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof pbTokenPartsStoreABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pbTokenPartsStoreABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof pbTokenPartsStoreABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ipbTokenABI}__.
 */
export function useIpbToken(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ipbTokenABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ipbTokenABI}__.
 */
export function useIpbTokenRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof ipbTokenABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: ipbTokenABI, ...config } as UseContractReadConfig<
    typeof ipbTokenABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ipbTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIpbTokenBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof ipbTokenABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ipbTokenABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ipbTokenABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ipbTokenABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIpbTokenGetApproved(
  config: Omit<
    UseContractReadConfig<typeof ipbTokenABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ipbTokenABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof ipbTokenABI, 'getApproved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ipbTokenABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIpbTokenIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof ipbTokenABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ipbTokenABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof ipbTokenABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ipbTokenABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIpbTokenOwnerOf(
  config: Omit<
    UseContractReadConfig<typeof ipbTokenABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ipbTokenABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof ipbTokenABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ipbTokenABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIpbTokenSupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof ipbTokenABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ipbTokenABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ipbTokenABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ipbTokenABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useIpbTokenTokenByIndex(
  config: Omit<
    UseContractReadConfig<typeof ipbTokenABI, 'tokenByIndex'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ipbTokenABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<typeof ipbTokenABI, 'tokenByIndex'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ipbTokenABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function useIpbTokenTokenOfOwnerByIndex(
  config: Omit<
    UseContractReadConfig<typeof ipbTokenABI, 'tokenOfOwnerByIndex'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ipbTokenABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<typeof ipbTokenABI, 'tokenOfOwnerByIndex'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ipbTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIpbTokenTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof ipbTokenABI, 'totalSupply'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ipbTokenABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof ipbTokenABI, 'totalSupply'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ipbTokenABI}__.
 */
export function useIpbTokenWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ipbTokenABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ipbTokenABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ipbTokenABI, TFunctionName>({
    abi: ipbTokenABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ipbTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useIpbTokenApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ipbTokenABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ipbTokenABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ipbTokenABI, 'approve'>({
    abi: ipbTokenABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ipbTokenABI}__ and `functionName` set to `"burn"`.
 */
export function useIpbTokenBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ipbTokenABI, 'burn'>['abi'],
        'burn'
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<TMode, typeof ipbTokenABI, 'burn'> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ipbTokenABI, 'burn'>({
    abi: ipbTokenABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ipbTokenABI}__ and `functionName` set to `"mint"`.
 */
export function useIpbTokenMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ipbTokenABI, 'mint'>['abi'],
        'mint'
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<TMode, typeof ipbTokenABI, 'mint'> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ipbTokenABI, 'mint'>({
    abi: ipbTokenABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ipbTokenABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIpbTokenSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ipbTokenABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof ipbTokenABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ipbTokenABI, 'safeTransferFrom'>({
    abi: ipbTokenABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ipbTokenABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIpbTokenSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ipbTokenABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof ipbTokenABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ipbTokenABI, 'setApprovalForAll'>({
    abi: ipbTokenABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ipbTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIpbTokenTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ipbTokenABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ipbTokenABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ipbTokenABI, 'transferFrom'>({
    abi: ipbTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ipbTokenABI}__.
 */
export function usePrepareIpbTokenWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ipbTokenABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ipbTokenABI, ...config } as UsePrepareContractWriteConfig<
    typeof ipbTokenABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ipbTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIpbTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ipbTokenABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ipbTokenABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ipbTokenABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ipbTokenABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareIpbTokenBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ipbTokenABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ipbTokenABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ipbTokenABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ipbTokenABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareIpbTokenMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ipbTokenABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ipbTokenABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ipbTokenABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ipbTokenABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIpbTokenSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ipbTokenABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ipbTokenABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ipbTokenABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ipbTokenABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIpbTokenSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ipbTokenABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ipbTokenABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ipbTokenABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ipbTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIpbTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ipbTokenABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ipbTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ipbTokenABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ipbTokenABI}__.
 */
export function useIpbTokenEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ipbTokenABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ipbTokenABI, ...config } as UseContractEventConfig<
    typeof ipbTokenABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ipbTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useIpbTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ipbTokenABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ipbTokenABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ipbTokenABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ipbTokenABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIpbTokenApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ipbTokenABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ipbTokenABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ipbTokenABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ipbTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIpbTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ipbTokenABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ipbTokenABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ipbTokenABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__.
 */
export function useIpbTokenPartsStore(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ipbTokenPartsStoreABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__.
 */
export function useIpbTokenPartsStoreRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof ipbTokenPartsStoreABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: ipbTokenPartsStoreABI, ...config } as UseContractReadConfig<
    typeof ipbTokenPartsStoreABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"bgColorsCount"`.
 */
export function useIpbTokenPartsStoreBgColorsCount(
  config: Omit<
    UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'bgColorsCount'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ipbTokenPartsStoreABI,
    functionName: 'bgColorsCount',
    ...config,
  } as UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'bgColorsCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"crownsCount"`.
 */
export function useIpbTokenPartsStoreCrownsCount(
  config: Omit<
    UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'crownsCount'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ipbTokenPartsStoreABI,
    functionName: 'crownsCount',
    ...config,
  } as UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'crownsCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"decorationsCount"`.
 */
export function useIpbTokenPartsStoreDecorationsCount(
  config: Omit<
    UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'decorationsCount'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ipbTokenPartsStoreABI,
    functionName: 'decorationsCount',
    ...config,
  } as UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'decorationsCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"garlandsCount"`.
 */
export function useIpbTokenPartsStoreGarlandsCount(
  config: Omit<
    UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'garlandsCount'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ipbTokenPartsStoreABI,
    functionName: 'garlandsCount',
    ...config,
  } as UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'garlandsCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"getBgColor"`.
 */
export function useIpbTokenPartsStoreGetBgColor(
  config: Omit<
    UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'getBgColor'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ipbTokenPartsStoreABI,
    functionName: 'getBgColor',
    ...config,
  } as UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'getBgColor'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"getCrown"`.
 */
export function useIpbTokenPartsStoreGetCrown(
  config: Omit<
    UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'getCrown'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ipbTokenPartsStoreABI,
    functionName: 'getCrown',
    ...config,
  } as UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'getCrown'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"getDecoration"`.
 */
export function useIpbTokenPartsStoreGetDecoration(
  config: Omit<
    UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'getDecoration'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ipbTokenPartsStoreABI,
    functionName: 'getDecoration',
    ...config,
  } as UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'getDecoration'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"getGarland"`.
 */
export function useIpbTokenPartsStoreGetGarland(
  config: Omit<
    UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'getGarland'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ipbTokenPartsStoreABI,
    functionName: 'getGarland',
    ...config,
  } as UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'getGarland'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"getGooglesColor"`.
 */
export function useIpbTokenPartsStoreGetGooglesColor(
  config: Omit<
    UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'getGooglesColor'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ipbTokenPartsStoreABI,
    functionName: 'getGooglesColor',
    ...config,
  } as UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'getGooglesColor'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"getLogo1"`.
 */
export function useIpbTokenPartsStoreGetLogo1(
  config: Omit<
    UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'getLogo1'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ipbTokenPartsStoreABI,
    functionName: 'getLogo1',
    ...config,
  } as UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'getLogo1'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"getLogo2"`.
 */
export function useIpbTokenPartsStoreGetLogo2(
  config: Omit<
    UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'getLogo2'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ipbTokenPartsStoreABI,
    functionName: 'getLogo2',
    ...config,
  } as UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'getLogo2'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"getLogo3"`.
 */
export function useIpbTokenPartsStoreGetLogo3(
  config: Omit<
    UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'getLogo3'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ipbTokenPartsStoreABI,
    functionName: 'getLogo3',
    ...config,
  } as UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'getLogo3'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"getLogo4"`.
 */
export function useIpbTokenPartsStoreGetLogo4(
  config: Omit<
    UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'getLogo4'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ipbTokenPartsStoreABI,
    functionName: 'getLogo4',
    ...config,
  } as UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'getLogo4'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"getLogoPalette"`.
 */
export function useIpbTokenPartsStoreGetLogoPalette(
  config: Omit<
    UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'getLogoPalette'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ipbTokenPartsStoreABI,
    functionName: 'getLogoPalette',
    ...config,
  } as UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'getLogoPalette'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"getShield"`.
 */
export function useIpbTokenPartsStoreGetShield(
  config: Omit<
    UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'getShield'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ipbTokenPartsStoreABI,
    functionName: 'getShield',
    ...config,
  } as UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'getShield'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"googlesColorsCount"`.
 */
export function useIpbTokenPartsStoreGooglesColorsCount(
  config: Omit<
    UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'googlesColorsCount'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ipbTokenPartsStoreABI,
    functionName: 'googlesColorsCount',
    ...config,
  } as UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'googlesColorsCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"logoPalettesCount"`.
 */
export function useIpbTokenPartsStoreLogoPalettesCount(
  config: Omit<
    UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'logoPalettesCount'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ipbTokenPartsStoreABI,
    functionName: 'logoPalettesCount',
    ...config,
  } as UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'logoPalettesCount'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"logos1Count"`.
 */
export function useIpbTokenPartsStoreLogos1Count(
  config: Omit<
    UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'logos1Count'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ipbTokenPartsStoreABI,
    functionName: 'logos1Count',
    ...config,
  } as UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'logos1Count'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"logos2Count"`.
 */
export function useIpbTokenPartsStoreLogos2Count(
  config: Omit<
    UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'logos2Count'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ipbTokenPartsStoreABI,
    functionName: 'logos2Count',
    ...config,
  } as UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'logos2Count'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"logos3Count"`.
 */
export function useIpbTokenPartsStoreLogos3Count(
  config: Omit<
    UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'logos3Count'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ipbTokenPartsStoreABI,
    functionName: 'logos3Count',
    ...config,
  } as UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'logos3Count'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"logos4Count"`.
 */
export function useIpbTokenPartsStoreLogos4Count(
  config: Omit<
    UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'logos4Count'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ipbTokenPartsStoreABI,
    functionName: 'logos4Count',
    ...config,
  } as UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'logos4Count'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"shieldsCount"`.
 */
export function useIpbTokenPartsStoreShieldsCount(
  config: Omit<
    UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'shieldsCount'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ipbTokenPartsStoreABI,
    functionName: 'shieldsCount',
    ...config,
  } as UseContractReadConfig<typeof ipbTokenPartsStoreABI, 'shieldsCount'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__.
 */
export function useIpbTokenPartsStoreWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ipbTokenPartsStoreABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ipbTokenPartsStoreABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ipbTokenPartsStoreABI, TFunctionName>({
    abi: ipbTokenPartsStoreABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"addBgColor"`.
 */
export function useIpbTokenPartsStoreAddBgColor<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ipbTokenPartsStoreABI, 'addBgColor'>['abi'],
        'addBgColor'
      > & { functionName?: 'addBgColor' }
    : UseContractWriteConfig<TMode, typeof ipbTokenPartsStoreABI, 'addBgColor'> & {
        abi?: never
        functionName?: 'addBgColor'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ipbTokenPartsStoreABI, 'addBgColor'>({
    abi: ipbTokenPartsStoreABI,
    functionName: 'addBgColor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"addCrown"`.
 */
export function useIpbTokenPartsStoreAddCrown<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ipbTokenPartsStoreABI, 'addCrown'>['abi'],
        'addCrown'
      > & { functionName?: 'addCrown' }
    : UseContractWriteConfig<TMode, typeof ipbTokenPartsStoreABI, 'addCrown'> & {
        abi?: never
        functionName?: 'addCrown'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ipbTokenPartsStoreABI, 'addCrown'>({
    abi: ipbTokenPartsStoreABI,
    functionName: 'addCrown',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"addDecoration"`.
 */
export function useIpbTokenPartsStoreAddDecoration<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ipbTokenPartsStoreABI, 'addDecoration'>['abi'],
        'addDecoration'
      > & { functionName?: 'addDecoration' }
    : UseContractWriteConfig<TMode, typeof ipbTokenPartsStoreABI, 'addDecoration'> & {
        abi?: never
        functionName?: 'addDecoration'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ipbTokenPartsStoreABI, 'addDecoration'>({
    abi: ipbTokenPartsStoreABI,
    functionName: 'addDecoration',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"addGarland"`.
 */
export function useIpbTokenPartsStoreAddGarland<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ipbTokenPartsStoreABI, 'addGarland'>['abi'],
        'addGarland'
      > & { functionName?: 'addGarland' }
    : UseContractWriteConfig<TMode, typeof ipbTokenPartsStoreABI, 'addGarland'> & {
        abi?: never
        functionName?: 'addGarland'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ipbTokenPartsStoreABI, 'addGarland'>({
    abi: ipbTokenPartsStoreABI,
    functionName: 'addGarland',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"addGooglesColor"`.
 */
export function useIpbTokenPartsStoreAddGooglesColor<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ipbTokenPartsStoreABI, 'addGooglesColor'>['abi'],
        'addGooglesColor'
      > & { functionName?: 'addGooglesColor' }
    : UseContractWriteConfig<TMode, typeof ipbTokenPartsStoreABI, 'addGooglesColor'> & {
        abi?: never
        functionName?: 'addGooglesColor'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ipbTokenPartsStoreABI, 'addGooglesColor'>({
    abi: ipbTokenPartsStoreABI,
    functionName: 'addGooglesColor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"addLogo1"`.
 */
export function useIpbTokenPartsStoreAddLogo1<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ipbTokenPartsStoreABI, 'addLogo1'>['abi'],
        'addLogo1'
      > & { functionName?: 'addLogo1' }
    : UseContractWriteConfig<TMode, typeof ipbTokenPartsStoreABI, 'addLogo1'> & {
        abi?: never
        functionName?: 'addLogo1'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ipbTokenPartsStoreABI, 'addLogo1'>({
    abi: ipbTokenPartsStoreABI,
    functionName: 'addLogo1',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"addLogo2"`.
 */
export function useIpbTokenPartsStoreAddLogo2<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ipbTokenPartsStoreABI, 'addLogo2'>['abi'],
        'addLogo2'
      > & { functionName?: 'addLogo2' }
    : UseContractWriteConfig<TMode, typeof ipbTokenPartsStoreABI, 'addLogo2'> & {
        abi?: never
        functionName?: 'addLogo2'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ipbTokenPartsStoreABI, 'addLogo2'>({
    abi: ipbTokenPartsStoreABI,
    functionName: 'addLogo2',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"addLogo3"`.
 */
export function useIpbTokenPartsStoreAddLogo3<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ipbTokenPartsStoreABI, 'addLogo3'>['abi'],
        'addLogo3'
      > & { functionName?: 'addLogo3' }
    : UseContractWriteConfig<TMode, typeof ipbTokenPartsStoreABI, 'addLogo3'> & {
        abi?: never
        functionName?: 'addLogo3'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ipbTokenPartsStoreABI, 'addLogo3'>({
    abi: ipbTokenPartsStoreABI,
    functionName: 'addLogo3',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"addLogo4"`.
 */
export function useIpbTokenPartsStoreAddLogo4<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ipbTokenPartsStoreABI, 'addLogo4'>['abi'],
        'addLogo4'
      > & { functionName?: 'addLogo4' }
    : UseContractWriteConfig<TMode, typeof ipbTokenPartsStoreABI, 'addLogo4'> & {
        abi?: never
        functionName?: 'addLogo4'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ipbTokenPartsStoreABI, 'addLogo4'>({
    abi: ipbTokenPartsStoreABI,
    functionName: 'addLogo4',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"addLogoPalette"`.
 */
export function useIpbTokenPartsStoreAddLogoPalette<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ipbTokenPartsStoreABI, 'addLogoPalette'>['abi'],
        'addLogoPalette'
      > & { functionName?: 'addLogoPalette' }
    : UseContractWriteConfig<TMode, typeof ipbTokenPartsStoreABI, 'addLogoPalette'> & {
        abi?: never
        functionName?: 'addLogoPalette'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ipbTokenPartsStoreABI, 'addLogoPalette'>({
    abi: ipbTokenPartsStoreABI,
    functionName: 'addLogoPalette',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"addShield"`.
 */
export function useIpbTokenPartsStoreAddShield<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ipbTokenPartsStoreABI, 'addShield'>['abi'],
        'addShield'
      > & { functionName?: 'addShield' }
    : UseContractWriteConfig<TMode, typeof ipbTokenPartsStoreABI, 'addShield'> & {
        abi?: never
        functionName?: 'addShield'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ipbTokenPartsStoreABI, 'addShield'>({
    abi: ipbTokenPartsStoreABI,
    functionName: 'addShield',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__.
 */
export function usePrepareIpbTokenPartsStoreWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ipbTokenPartsStoreABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ipbTokenPartsStoreABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ipbTokenPartsStoreABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"addBgColor"`.
 */
export function usePrepareIpbTokenPartsStoreAddBgColor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ipbTokenPartsStoreABI, 'addBgColor'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ipbTokenPartsStoreABI,
    functionName: 'addBgColor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ipbTokenPartsStoreABI, 'addBgColor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"addCrown"`.
 */
export function usePrepareIpbTokenPartsStoreAddCrown(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ipbTokenPartsStoreABI, 'addCrown'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ipbTokenPartsStoreABI,
    functionName: 'addCrown',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ipbTokenPartsStoreABI, 'addCrown'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"addDecoration"`.
 */
export function usePrepareIpbTokenPartsStoreAddDecoration(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ipbTokenPartsStoreABI, 'addDecoration'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ipbTokenPartsStoreABI,
    functionName: 'addDecoration',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ipbTokenPartsStoreABI, 'addDecoration'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"addGarland"`.
 */
export function usePrepareIpbTokenPartsStoreAddGarland(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ipbTokenPartsStoreABI, 'addGarland'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ipbTokenPartsStoreABI,
    functionName: 'addGarland',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ipbTokenPartsStoreABI, 'addGarland'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"addGooglesColor"`.
 */
export function usePrepareIpbTokenPartsStoreAddGooglesColor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ipbTokenPartsStoreABI, 'addGooglesColor'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ipbTokenPartsStoreABI,
    functionName: 'addGooglesColor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ipbTokenPartsStoreABI, 'addGooglesColor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"addLogo1"`.
 */
export function usePrepareIpbTokenPartsStoreAddLogo1(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ipbTokenPartsStoreABI, 'addLogo1'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ipbTokenPartsStoreABI,
    functionName: 'addLogo1',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ipbTokenPartsStoreABI, 'addLogo1'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"addLogo2"`.
 */
export function usePrepareIpbTokenPartsStoreAddLogo2(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ipbTokenPartsStoreABI, 'addLogo2'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ipbTokenPartsStoreABI,
    functionName: 'addLogo2',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ipbTokenPartsStoreABI, 'addLogo2'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"addLogo3"`.
 */
export function usePrepareIpbTokenPartsStoreAddLogo3(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ipbTokenPartsStoreABI, 'addLogo3'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ipbTokenPartsStoreABI,
    functionName: 'addLogo3',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ipbTokenPartsStoreABI, 'addLogo3'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"addLogo4"`.
 */
export function usePrepareIpbTokenPartsStoreAddLogo4(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ipbTokenPartsStoreABI, 'addLogo4'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ipbTokenPartsStoreABI,
    functionName: 'addLogo4',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ipbTokenPartsStoreABI, 'addLogo4'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"addLogoPalette"`.
 */
export function usePrepareIpbTokenPartsStoreAddLogoPalette(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ipbTokenPartsStoreABI, 'addLogoPalette'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ipbTokenPartsStoreABI,
    functionName: 'addLogoPalette',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ipbTokenPartsStoreABI, 'addLogoPalette'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ipbTokenPartsStoreABI}__ and `functionName` set to `"addShield"`.
 */
export function usePrepareIpbTokenPartsStoreAddShield(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ipbTokenPartsStoreABI, 'addShield'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ipbTokenPartsStoreABI,
    functionName: 'addShield',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ipbTokenPartsStoreABI, 'addShield'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link pbTokenComposerABI}__.
 */
export function usePbTokenComposer(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: pbTokenComposerABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenComposerABI}__.
 */
export function usePbTokenComposerRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof pbTokenComposerABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: pbTokenComposerABI, ...config } as UseContractReadConfig<
    typeof pbTokenComposerABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenComposerABI}__ and `functionName` set to `"getImageParts"`.
 */
export function usePbTokenComposerGetImageParts(
  config: Omit<
    UseContractReadConfig<typeof pbTokenComposerABI, 'getImageParts'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenComposerABI,
    functionName: 'getImageParts',
    ...config,
  } as UseContractReadConfig<typeof pbTokenComposerABI, 'getImageParts'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenComposerABI}__ and `functionName` set to `"getTokenMetadata"`.
 */
export function usePbTokenComposerGetTokenMetadata(
  config: Omit<
    UseContractReadConfig<typeof pbTokenComposerABI, 'getTokenMetadata'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenComposerABI,
    functionName: 'getTokenMetadata',
    ...config,
  } as UseContractReadConfig<typeof pbTokenComposerABI, 'getTokenMetadata'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link pbTokenDnaABI}__.
 */
export function usePbTokenDna(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: pbTokenDnaABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenDnaABI}__.
 */
export function usePbTokenDnaRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof pbTokenDnaABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: pbTokenDnaABI, ...config } as UseContractReadConfig<
    typeof pbTokenDnaABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenDnaABI}__ and `functionName` set to `"generateDna"`.
 */
export function usePbTokenDnaGenerateDna(
  config: Omit<
    UseContractReadConfig<typeof pbTokenDnaABI, 'generateDna'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenDnaABI,
    functionName: 'generateDna',
    ...config,
  } as UseContractReadConfig<typeof pbTokenDnaABI, 'generateDna'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenDnaABI}__ and `functionName` set to `"getDnaFromImage"`.
 */
export function usePbTokenDnaGetDnaFromImage(
  config: Omit<
    UseContractReadConfig<typeof pbTokenDnaABI, 'getDnaFromImage'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenDnaABI,
    functionName: 'getDnaFromImage',
    ...config,
  } as UseContractReadConfig<typeof pbTokenDnaABI, 'getDnaFromImage'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pbTokenDnaABI}__ and `functionName` set to `"getImageFromDna"`.
 */
export function usePbTokenDnaGetImageFromDna(
  config: Omit<
    UseContractReadConfig<typeof pbTokenDnaABI, 'getImageFromDna'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pbTokenDnaABI,
    functionName: 'getImageFromDna',
    ...config,
  } as UseContractReadConfig<typeof pbTokenDnaABI, 'getImageFromDna'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ownableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof ownableABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: ownableABI, ...config } as UseContractReadConfig<
    typeof ownableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableOwner(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, 'owner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof ownableABI, 'owner'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ownableABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ownableABI, TFunctionName>({
    abi: ownableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownableABI, 'renounceOwnership'>['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof ownableABI, 'renounceOwnership'> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ownableABI, 'renounceOwnership'>({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ownableABI, 'transferOwnership'>['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof ownableABI, 'transferOwnership'> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ownableABI, 'transferOwnership'>({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function usePrepareOwnableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ownableABI, ...config } as UsePrepareContractWriteConfig<
    typeof ownableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ownableABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ownableABI, ...config } as UseContractEventConfig<
    typeof ownableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iVotesABI}__.
 */
export function useIVotes(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: iVotesABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesABI}__.
 */
export function useIVotesRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof iVotesABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: iVotesABI, ...config } as UseContractReadConfig<
    typeof iVotesABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"delegates"`.
 */
export function useIVotesDelegates(
  config: Omit<
    UseContractReadConfig<typeof iVotesABI, 'delegates'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVotesABI,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<typeof iVotesABI, 'delegates'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useIVotesGetPastTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof iVotesABI, 'getPastTotalSupply'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVotesABI,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<typeof iVotesABI, 'getPastTotalSupply'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useIVotesGetPastVotes(
  config: Omit<
    UseContractReadConfig<typeof iVotesABI, 'getPastVotes'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVotesABI,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<typeof iVotesABI, 'getPastVotes'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"getVotes"`.
 */
export function useIVotesGetVotes(
  config: Omit<
    UseContractReadConfig<typeof iVotesABI, 'getVotes'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iVotesABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof iVotesABI, 'getVotes'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotesABI}__.
 */
export function useIVotesWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVotesABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iVotesABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVotesABI, TFunctionName>({
    abi: iVotesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"delegate"`.
 */
export function useIVotesDelegate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVotesABI, 'delegate'>['abi'],
        'delegate'
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<TMode, typeof iVotesABI, 'delegate'> & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVotesABI, 'delegate'>({
    abi: iVotesABI,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useIVotesDelegateBySig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iVotesABI, 'delegateBySig'>['abi'],
        'delegateBySig'
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<TMode, typeof iVotesABI, 'delegateBySig'> & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iVotesABI, 'delegateBySig'>({
    abi: iVotesABI,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotesABI}__.
 */
export function usePrepareIVotesWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof iVotesABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: iVotesABI, ...config } as UsePrepareContractWriteConfig<
    typeof iVotesABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareIVotesDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotesABI, 'delegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotesABI,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotesABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iVotesABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareIVotesDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iVotesABI, 'delegateBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iVotesABI,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iVotesABI, 'delegateBySig'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVotesABI}__.
 */
export function useIVotesEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iVotesABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: iVotesABI, ...config } as UseContractEventConfig<
    typeof iVotesABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVotesABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useIVotesDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iVotesABI, 'DelegateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iVotesABI,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof iVotesABI, 'DelegateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iVotesABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useIVotesDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iVotesABI, 'DelegateVotesChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iVotesABI,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<typeof iVotesABI, 'DelegateVotesChanged'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link votesABI}__.
 */
export function useVotes(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: votesABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link votesABI}__.
 */
export function useVotesRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof votesABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: votesABI, ...config } as UseContractReadConfig<
    typeof votesABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useVotesDomainSeparator(
  config: Omit<
    UseContractReadConfig<typeof votesABI, 'DOMAIN_SEPARATOR'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: votesABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<typeof votesABI, 'DOMAIN_SEPARATOR'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"delegates"`.
 */
export function useVotesDelegates(
  config: Omit<
    UseContractReadConfig<typeof votesABI, 'delegates'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: votesABI,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<typeof votesABI, 'delegates'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useVotesGetPastTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof votesABI, 'getPastTotalSupply'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: votesABI,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<typeof votesABI, 'getPastTotalSupply'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useVotesGetPastVotes(
  config: Omit<
    UseContractReadConfig<typeof votesABI, 'getPastVotes'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: votesABI,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<typeof votesABI, 'getPastVotes'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"getVotes"`.
 */
export function useVotesGetVotes(
  config: Omit<
    UseContractReadConfig<typeof votesABI, 'getVotes'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: votesABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof votesABI, 'getVotes'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"nonces"`.
 */
export function useVotesNonces(
  config: Omit<
    UseContractReadConfig<typeof votesABI, 'nonces'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: votesABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof votesABI, 'nonces'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link votesABI}__.
 */
export function useVotesWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof votesABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof votesABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof votesABI, TFunctionName>({
    abi: votesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"delegate"`.
 */
export function useVotesDelegate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof votesABI, 'delegate'>['abi'],
        'delegate'
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<TMode, typeof votesABI, 'delegate'> & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof votesABI, 'delegate'>({
    abi: votesABI,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useVotesDelegateBySig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof votesABI, 'delegateBySig'>['abi'],
        'delegateBySig'
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<TMode, typeof votesABI, 'delegateBySig'> & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof votesABI, 'delegateBySig'>({
    abi: votesABI,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link votesABI}__.
 */
export function usePrepareVotesWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof votesABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: votesABI, ...config } as UsePrepareContractWriteConfig<
    typeof votesABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareVotesDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof votesABI, 'delegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: votesABI,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof votesABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link votesABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareVotesDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof votesABI, 'delegateBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: votesABI,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof votesABI, 'delegateBySig'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link votesABI}__.
 */
export function useVotesEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof votesABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: votesABI, ...config } as UseContractEventConfig<
    typeof votesABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link votesABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useVotesDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof votesABI, 'DelegateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: votesABI,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof votesABI, 'DelegateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link votesABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useVotesDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof votesABI, 'DelegateVotesChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: votesABI,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<typeof votesABI, 'DelegateVotesChanged'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc721ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Read<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof erc721ABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: erc721ABI, ...config } as UseContractReadConfig<
    typeof erc721ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721BalanceOf(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721GetApproved(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'getApproved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721IsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"name"`.
 */
export function useErc721Name(
  config: Omit<UseContractReadConfig<typeof erc721ABI, 'name'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721OwnerOf(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721SupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721Symbol(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721TokenUri(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'tokenURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'tokenURI'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Write<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc721ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, TFunctionName>({
    abi: erc721ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'approve'>({
    abi: erc721ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'safeTransferFrom'>({
    abi: erc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721SetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'setApprovalForAll'>({
    abi: erc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'transferFrom'>({
    abi: erc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function usePrepareErc721Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: erc721ABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc721ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc721ABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: erc721ABI, ...config } as UseContractEventConfig<
    typeof erc721ABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc721ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Read<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof ierc721ABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: ierc721ABI, ...config } as UseContractReadConfig<
    typeof ierc721ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721BalanceOf(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721GetApproved(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, 'getApproved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721IsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721OwnerOf(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721SupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Write<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc721ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, TFunctionName>({
    abi: ierc721ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'approve'>({
    abi: ierc721ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'safeTransferFrom'>({
    abi: ierc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721SetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'setApprovalForAll'>({
    abi: ierc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ABI, 'transferFrom'>({
    abi: ierc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function usePrepareIerc721Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc721ABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ierc721ABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc721ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc721ABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ierc721ABI, ...config } as UseContractEventConfig<
    typeof ierc721ABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function useIerc721Receiver(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc721ReceiverABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function useIerc721ReceiverWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ReceiverABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc721ReceiverABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ReceiverABI, TFunctionName>({
    abi: ierc721ReceiverABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useIerc721ReceiverOnErc721Received<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721ReceiverABI, 'onERC721Received'>['abi'],
        'onERC721Received'
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<TMode, typeof ierc721ReceiverABI, 'onERC721Received'> & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721ReceiverABI, 'onERC721Received'>({
    abi: ierc721ReceiverABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function usePrepareIerc721ReceiverWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ReceiverABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ReceiverABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareIerc721ReceiverOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ReceiverABI, 'onERC721Received'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ReceiverABI, 'onERC721Received'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc165ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165Read<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof erc165ABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: erc165ABI, ...config } as UseContractReadConfig<
    typeof erc165ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165SupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof erc165ABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc165ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc165ABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc165ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165Read<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof ierc165ABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: ierc165ABI, ...config } as UseContractReadConfig<
    typeof ierc165ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165SupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ierc165ABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function useErc721Burnable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc721BurnableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function useErc721BurnableRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof erc721BurnableABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: erc721BurnableABI, ...config } as UseContractReadConfig<
    typeof erc721BurnableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721BurnableBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721BurnableGetApproved(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, 'getApproved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721BurnableIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"name"`.
 */
export function useErc721BurnableName(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721BurnableOwnerOf(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721BurnableSupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721BurnableSymbol(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721BurnableTokenUri(
  config: Omit<
    UseContractReadConfig<typeof erc721BurnableABI, 'tokenURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BurnableABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof erc721BurnableABI, 'tokenURI'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function useErc721BurnableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721BurnableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc721BurnableABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721BurnableABI, TFunctionName>({
    abi: erc721BurnableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721BurnableApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721BurnableABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc721BurnableABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721BurnableABI, 'approve'>({
    abi: erc721BurnableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"burn"`.
 */
export function useErc721BurnableBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721BurnableABI, 'burn'>['abi'],
        'burn'
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<TMode, typeof erc721BurnableABI, 'burn'> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721BurnableABI, 'burn'>({
    abi: erc721BurnableABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721BurnableSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721BurnableABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721BurnableABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721BurnableABI, 'safeTransferFrom'>({
    abi: erc721BurnableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721BurnableSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721BurnableABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof erc721BurnableABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721BurnableABI, 'setApprovalForAll'>({
    abi: erc721BurnableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721BurnableTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721BurnableABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721BurnableABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721BurnableABI, 'transferFrom'>({
    abi: erc721BurnableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function usePrepareErc721BurnableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BurnableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BurnableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721BurnableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareErc721BurnableBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721BurnableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721BurnableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BurnableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721BurnableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BurnableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BurnableABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableABI}__.
 */
export function useErc721BurnableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc721BurnableABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: erc721BurnableABI, ...config } as UseContractEventConfig<
    typeof erc721BurnableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721BurnableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721BurnableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BurnableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721BurnableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721BurnableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721BurnableABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BurnableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721BurnableABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BurnableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721BurnableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721BurnableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BurnableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721BurnableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721EnumerableABI}__.
 */
export function useErc721Enumerable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc721EnumerableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__.
 */
export function useErc721EnumerableRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof erc721EnumerableABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: erc721EnumerableABI, ...config } as UseContractReadConfig<
    typeof erc721EnumerableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721EnumerableBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721EnumerableGetApproved(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, 'getApproved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721EnumerableIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"name"`.
 */
export function useErc721EnumerableName(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721EnumerableOwnerOf(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721EnumerableSupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721EnumerableSymbol(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useErc721EnumerableTokenByIndex(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'tokenByIndex'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, 'tokenByIndex'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function useErc721EnumerableTokenOfOwnerByIndex(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'tokenOfOwnerByIndex'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, 'tokenOfOwnerByIndex'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721EnumerableTokenUri(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'tokenURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, 'tokenURI'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc721EnumerableTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof erc721EnumerableABI, 'totalSupply'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721EnumerableABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc721EnumerableABI, 'totalSupply'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__.
 */
export function useErc721EnumerableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721EnumerableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc721EnumerableABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721EnumerableABI, TFunctionName>({
    abi: erc721EnumerableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721EnumerableApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721EnumerableABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc721EnumerableABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721EnumerableABI, 'approve'>({
    abi: erc721EnumerableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721EnumerableSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721EnumerableABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721EnumerableABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721EnumerableABI, 'safeTransferFrom'>({
    abi: erc721EnumerableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721EnumerableSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721EnumerableABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof erc721EnumerableABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721EnumerableABI, 'setApprovalForAll'>({
    abi: erc721EnumerableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721EnumerableTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721EnumerableABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721EnumerableABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721EnumerableABI, 'transferFrom'>({
    abi: erc721EnumerableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__.
 */
export function usePrepareErc721EnumerableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721EnumerableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721EnumerableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721EnumerableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721EnumerableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721EnumerableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721EnumerableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721EnumerableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721EnumerableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721EnumerableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721EnumerableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721EnumerableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721EnumerableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721EnumerableABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721EnumerableABI}__.
 */
export function useErc721EnumerableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc721EnumerableABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: erc721EnumerableABI, ...config } as UseContractEventConfig<
    typeof erc721EnumerableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721EnumerableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721EnumerableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721EnumerableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721EnumerableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721EnumerableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721EnumerableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721EnumerableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721EnumerableABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721EnumerableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721EnumerableABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721EnumerableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721EnumerableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721EnumerableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721EnumerableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721EnumerableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721VotesABI}__.
 */
export function useErc721Votes(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc721VotesABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__.
 */
export function useErc721VotesRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof erc721VotesABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: erc721VotesABI, ...config } as UseContractReadConfig<
    typeof erc721VotesABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useErc721VotesDomainSeparator(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'DOMAIN_SEPARATOR'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'DOMAIN_SEPARATOR'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721VotesBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"delegates"`.
 */
export function useErc721VotesDelegates(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'delegates'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'delegates'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721VotesGetApproved(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'getApproved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useErc721VotesGetPastTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'getPastTotalSupply'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'getPastTotalSupply'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useErc721VotesGetPastVotes(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'getPastVotes'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'getPastVotes'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"getVotes"`.
 */
export function useErc721VotesGetVotes(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'getVotes'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'getVotes'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721VotesIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"name"`.
 */
export function useErc721VotesName(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"nonces"`.
 */
export function useErc721VotesNonces(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'nonces'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'nonces'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721VotesOwnerOf(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721VotesSupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721VotesSymbol(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721VotesTokenUri(
  config: Omit<
    UseContractReadConfig<typeof erc721VotesABI, 'tokenURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721VotesABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof erc721VotesABI, 'tokenURI'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721VotesABI}__.
 */
export function useErc721VotesWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721VotesABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc721VotesABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721VotesABI, TFunctionName>({
    abi: erc721VotesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721VotesApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721VotesABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc721VotesABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721VotesABI, 'approve'>({
    abi: erc721VotesABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"delegate"`.
 */
export function useErc721VotesDelegate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721VotesABI, 'delegate'>['abi'],
        'delegate'
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<TMode, typeof erc721VotesABI, 'delegate'> & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721VotesABI, 'delegate'>({
    abi: erc721VotesABI,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useErc721VotesDelegateBySig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721VotesABI, 'delegateBySig'>['abi'],
        'delegateBySig'
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<TMode, typeof erc721VotesABI, 'delegateBySig'> & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721VotesABI, 'delegateBySig'>({
    abi: erc721VotesABI,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721VotesSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721VotesABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721VotesABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721VotesABI, 'safeTransferFrom'>({
    abi: erc721VotesABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721VotesSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721VotesABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof erc721VotesABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721VotesABI, 'setApprovalForAll'>({
    abi: erc721VotesABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721VotesTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721VotesABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721VotesABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721VotesABI, 'transferFrom'>({
    abi: erc721VotesABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721VotesABI}__.
 */
export function usePrepareErc721VotesWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721VotesABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721VotesABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721VotesABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721VotesApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721VotesABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721VotesABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721VotesABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareErc721VotesDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721VotesABI, 'delegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721VotesABI,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721VotesABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareErc721VotesDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721VotesABI, 'delegateBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721VotesABI,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721VotesABI, 'delegateBySig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721VotesSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721VotesABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721VotesABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721VotesABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721VotesSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721VotesABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721VotesABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721VotesABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721VotesABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721VotesTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721VotesABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721VotesABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721VotesABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721VotesABI}__.
 */
export function useErc721VotesEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc721VotesABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: erc721VotesABI, ...config } as UseContractEventConfig<
    typeof erc721VotesABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721VotesABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721VotesApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721VotesABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721VotesABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721VotesABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721VotesABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721VotesApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721VotesABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721VotesABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721VotesABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721VotesABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useErc721VotesDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721VotesABI, 'DelegateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721VotesABI,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof erc721VotesABI, 'DelegateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721VotesABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useErc721VotesDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721VotesABI, 'DelegateVotesChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721VotesABI,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<typeof erc721VotesABI, 'DelegateVotesChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721VotesABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721VotesTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721VotesABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721VotesABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721VotesABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721EnumerableABI}__.
 */
export function useIerc721Enumerable(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc721EnumerableABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__.
 */
export function useIerc721EnumerableRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: ierc721EnumerableABI, ...config } as UseContractReadConfig<
    typeof ierc721EnumerableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721EnumerableBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721EnumerableABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721EnumerableGetApproved(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof ierc721EnumerableABI, 'getApproved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721EnumerableIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof ierc721EnumerableABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721EnumerableOwnerOf(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721EnumerableABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721EnumerableSupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ierc721EnumerableABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useIerc721EnumerableTokenByIndex(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, 'tokenByIndex'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<typeof ierc721EnumerableABI, 'tokenByIndex'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function useIerc721EnumerableTokenOfOwnerByIndex(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, 'tokenOfOwnerByIndex'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<typeof ierc721EnumerableABI, 'tokenOfOwnerByIndex'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc721EnumerableTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof ierc721EnumerableABI, 'totalSupply'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721EnumerableABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof ierc721EnumerableABI, 'totalSupply'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__.
 */
export function useIerc721EnumerableWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721EnumerableABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc721EnumerableABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721EnumerableABI, TFunctionName>({
    abi: ierc721EnumerableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721EnumerableApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721EnumerableABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc721EnumerableABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721EnumerableABI, 'approve'>({
    abi: ierc721EnumerableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721EnumerableSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721EnumerableABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721EnumerableABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721EnumerableABI, 'safeTransferFrom'>({
    abi: ierc721EnumerableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721EnumerableSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721EnumerableABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof ierc721EnumerableABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721EnumerableABI, 'setApprovalForAll'>({
    abi: ierc721EnumerableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721EnumerableTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721EnumerableABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721EnumerableABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721EnumerableABI, 'transferFrom'>({
    abi: ierc721EnumerableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__.
 */
export function usePrepareIerc721EnumerableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721EnumerableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721EnumerableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721EnumerableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721EnumerableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721EnumerableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721EnumerableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721EnumerableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721EnumerableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721EnumerableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721EnumerableABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721EnumerableABI}__.
 */
export function useIerc721EnumerableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc721EnumerableABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ierc721EnumerableABI, ...config } as UseContractEventConfig<
    typeof ierc721EnumerableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721EnumerableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721EnumerableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721EnumerableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc721EnumerableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721EnumerableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721EnumerableABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721EnumerableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc721EnumerableABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721EnumerableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721EnumerableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721EnumerableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721EnumerableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc721EnumerableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721Metadata(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc721MetadataABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof ierc721MetadataABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: ierc721MetadataABI, ...config } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721MetadataBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721MetadataGetApproved(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'getApproved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721MetadataIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"name"`.
 */
export function useIerc721MetadataName(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721MetadataOwnerOf(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721MetadataSupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc721MetadataSymbol(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useIerc721MetadataTokenUri(
  config: Omit<
    UseContractReadConfig<typeof ierc721MetadataABI, 'tokenURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof ierc721MetadataABI, 'tokenURI'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721MetadataABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc721MetadataABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721MetadataABI, TFunctionName>({
    abi: ierc721MetadataABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721MetadataApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721MetadataABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc721MetadataABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721MetadataABI, 'approve'>({
    abi: ierc721MetadataABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721MetadataSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721MetadataABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721MetadataABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721MetadataABI, 'safeTransferFrom'>({
    abi: ierc721MetadataABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721MetadataSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721MetadataABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof ierc721MetadataABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721MetadataABI, 'setApprovalForAll'>({
    abi: ierc721MetadataABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721MetadataTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc721MetadataABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc721MetadataABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc721MetadataABI, 'transferFrom'>({
    abi: ierc721MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function usePrepareIerc721MetadataWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721MetadataApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721MetadataSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721MetadataSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721MetadataTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc721MetadataABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ierc721MetadataABI, ...config } as UseContractEventConfig<
    typeof ierc721MetadataABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721MetadataApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721MetadataApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721MetadataTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataABI, 'Transfer'>)
}
