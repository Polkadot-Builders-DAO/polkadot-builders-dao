{
  "address": "0xb3eBa2De2Cc96d2D4d8971E2c8e377C69e5977CC",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "color",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.Color",
          "name": "color",
          "type": "tuple"
        }
      ],
      "name": "addBgColor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "svg",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.ImagePart",
          "name": "part",
          "type": "tuple"
        }
      ],
      "name": "addClass",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "svg",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.ImagePart",
          "name": "part",
          "type": "tuple"
        }
      ],
      "name": "addCrown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "svg",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.ImagePart",
          "name": "part",
          "type": "tuple"
        }
      ],
      "name": "addDoodad",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "svg",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.ImagePart",
          "name": "part",
          "type": "tuple"
        }
      ],
      "name": "addGarland",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "color",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.Color",
          "name": "color",
          "type": "tuple"
        }
      ],
      "name": "addNogglesColor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "primary",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "secondary",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.Palette",
          "name": "palette",
          "type": "tuple"
        }
      ],
      "name": "addQuadrantPalette",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "svg",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.ImagePart",
          "name": "part",
          "type": "tuple"
        }
      ],
      "name": "addRep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "svg",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.ImagePart",
          "name": "part",
          "type": "tuple"
        }
      ],
      "name": "addShield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "svg",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.ImagePart",
          "name": "part",
          "type": "tuple"
        }
      ],
      "name": "addSkill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "svg",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.ImagePart",
          "name": "part",
          "type": "tuple"
        }
      ],
      "name": "addTrait",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bgColors",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "color",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bgColorsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "classes",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "svg",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "classesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "crowns",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "svg",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crownsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "doodads",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "svg",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "doodadsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "garlands",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "svg",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "garlandsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllParts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string[]",
              "name": "bgColors",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "nogglesColors",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "crowns",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "doodads",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "garlands",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "shields",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "quadrantPalettes",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "reps",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "skills",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "classes",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "traits",
              "type": "string[]"
            }
          ],
          "internalType": "struct IPartsStore.AllParts",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        }
      ],
      "name": "getBgColor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "color",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.Color",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        }
      ],
      "name": "getClass",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "svg",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.ImagePart",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        }
      ],
      "name": "getCrown",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "svg",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.ImagePart",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        }
      ],
      "name": "getDoodad",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "svg",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.ImagePart",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        }
      ],
      "name": "getGarland",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "svg",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.ImagePart",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        }
      ],
      "name": "getNogglesColor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "color",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.Color",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        }
      ],
      "name": "getQuadrantPalette",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "primary",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "secondary",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.Palette",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        }
      ],
      "name": "getRep",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "svg",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.ImagePart",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        }
      ],
      "name": "getShield",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "svg",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.ImagePart",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        }
      ],
      "name": "getSkill",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "svg",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.ImagePart",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        }
      ],
      "name": "getTrait",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "svg",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.ImagePart",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "locked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nogglesColors",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "color",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nogglesColorsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "quadrantPalettes",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "primary",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "secondary",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quadrantPalettesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reps",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "svg",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "shields",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "svg",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shieldsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "skills",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "svg",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "skillsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "traits",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "svg",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traitsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4414282a194573b85beb7ede9aaaaeddd99f1e58d76ff4eac5d99aa367a41017",
  "receipt": {
    "to": null,
    "from": "0x5A78F12fF5dD11ee0b83CF84F47c0FCc602cA5E4",
    "contractAddress": "0xb3eBa2De2Cc96d2D4d8971E2c8e377C69e5977CC",
    "transactionIndex": 4,
    "gasUsed": "2845410",
    "logsBloom": "0x
    "blockHash": "0x2799d7edabb39c9eeb5fe335d4d95e99346a4d7c2abf1f45fc01aa5ae63c9dee",
    "transactionHash": "0x4414282a194573b85beb7ede9aaaaeddd99f1e58d76ff4eac5d99aa367a41017",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 3832180,
        "transactionHash": "0x4414282a194573b85beb7ede9aaaaeddd99f1e58d76ff4eac5d99aa367a41017",
        "address": "0xb3eBa2De2Cc96d2D4d8971E2c8e377C69e5977CC",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005a78f12ff5dd11ee0b83cf84f47c0fcc602ca5e4"
        ],
        "data": "0x",
        "logIndex": 16,
        "blockHash": "0x2799d7edabb39c9eeb5fe335d4d95e99346a4d7c2abf1f45fc01aa5ae63c9dee"
      }
    ],
    "blockNumber": 3832180,
    "cumulativeGasUsed": "5350075",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f8df1c92d0d5dd052e825efbf811add5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.Color\",\"name\":\"color\",\"type\":\"tuple\"}],\"name\":\"addBgColor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"part\",\"type\":\"tuple\"}],\"name\":\"addClass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"part\",\"type\":\"tuple\"}],\"name\":\"addCrown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"part\",\"type\":\"tuple\"}],\"name\":\"addDoodad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"part\",\"type\":\"tuple\"}],\"name\":\"addGarland\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.Color\",\"name\":\"color\",\"type\":\"tuple\"}],\"name\":\"addNogglesColor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"primary\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"secondary\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.Palette\",\"name\":\"palette\",\"type\":\"tuple\"}],\"name\":\"addQuadrantPalette\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"part\",\"type\":\"tuple\"}],\"name\":\"addRep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"part\",\"type\":\"tuple\"}],\"name\":\"addShield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"part\",\"type\":\"tuple\"}],\"name\":\"addSkill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"part\",\"type\":\"tuple\"}],\"name\":\"addTrait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bgColors\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bgColorsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"classes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"classesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"crowns\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crownsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"doodads\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doodadsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"garlands\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"garlandsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllParts\",\"outputs\":[{\"components\":[{\"internalType\":\"string[]\",\"name\":\"bgColors\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"nogglesColors\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"crowns\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"doodads\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"garlands\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"shields\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"quadrantPalettes\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"reps\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"skills\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"classes\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"traits\",\"type\":\"string[]\"}],\"internalType\":\"struct IPartsStore.AllParts\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getBgColor\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.Color\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getClass\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getCrown\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getDoodad\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getGarland\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getNogglesColor\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.Color\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getQuadrantPalette\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"primary\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"secondary\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.Palette\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getRep\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getShield\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getSkill\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getTrait\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nogglesColors\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nogglesColorsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quadrantPalettes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"primary\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"secondary\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quadrantPalettesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reps\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shields\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shieldsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"skills\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skillsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"traits\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traitsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract for managing various image parts of Polkadot Builders Crests such as colors, image parts, and palettes\",\"kind\":\"dev\",\"methods\":{\"addBgColor((string,string))\":{\"details\":\"Adds a new background color to the list of available background colors.Throws an error if the number of background colors is already at the maximum (255).\",\"params\":{\"color\":\"The color to add.\"}},\"addClass((string,string))\":{\"details\":\"Adds a new class to the list of available classes.Throws an error if the number of classes is already at the maximum (255).\",\"params\":{\"part\":\"The class to add.\"}},\"addCrown((string,string))\":{\"details\":\"Adds a new crown to the list of available crowns.Throws an error if the number of crowns is already at the maximum (255).\",\"params\":{\"part\":\"The crown to add.\"}},\"addDoodad((string,string))\":{\"details\":\"Adds a new doodad to the list of available doodads.Throws an error if the number of doodads is already at the maximum (255).\",\"params\":{\"part\":\"The doodad to add.\"}},\"addGarland((string,string))\":{\"details\":\"Adds a new garland to the list of available garlands.Throws an error if the number of garlands is already at the maximum (255).\",\"params\":{\"part\":\"The garland to add.\"}},\"addNogglesColor((string,string))\":{\"details\":\"Adds a new Noggles color to the list of available Noggles colors.Throws an error if the number of Noggles colors is already at the maximum (255).\",\"params\":{\"color\":\"The color to add.\"}},\"addQuadrantPalette((string,string,string))\":{\"details\":\"Adds a new quadrant palette to the list of available quadrant palettes.Throws an error if the number of quadrant palettes is already at the maximum (255).\",\"params\":{\"palette\":\"The quadrant palette to add.\"}},\"addRep((string,string))\":{\"details\":\"Adds a new rep to the list of available reps.Throws an error if the number of reps is already at the maximum (255).\",\"params\":{\"part\":\"The rep to add.\"}},\"addShield((string,string))\":{\"details\":\"Adds a new shield to the list of available shields.Throws an error if the number of shields is already at the maximum (255).\",\"params\":{\"part\":\"The shield to add.\"}},\"addSkill((string,string))\":{\"details\":\"Adds a new skill to the list of available skills.Throws an error if the number of skills is already at the maximum (255).\",\"params\":{\"part\":\"The skill to add.\"}},\"addTrait((string,string))\":{\"details\":\"Adds a new trait to the list of available traits.Throws an error if the number of traits is already at the maximum (255).\",\"params\":{\"part\":\"The trait to add.\"}},\"bgColorsCount()\":{\"details\":\"Returns the count of background colors\",\"returns\":{\"_0\":\"the count of background colors\"}},\"classesCount()\":{\"details\":\"Returns the count of classes\",\"returns\":{\"_0\":\"the count of classes\"}},\"crownsCount()\":{\"details\":\"Returns the count of crowns\",\"returns\":{\"_0\":\"the count of crowns\"}},\"doodadsCount()\":{\"details\":\"Returns the count of doodads\",\"returns\":{\"_0\":\"the count of doodads\"}},\"garlandsCount()\":{\"details\":\"Returns the count of garlands\",\"returns\":{\"_0\":\"the count of garlands\"}},\"getAllParts()\":{\"details\":\"Returns all available parts.\",\"returns\":{\"_0\":\"All available parts.\"}},\"getBgColor(uint8)\":{\"details\":\"Returns the background color at the given index\",\"params\":{\"id\":\"the index of the background color to retrieve\"},\"returns\":{\"_0\":\"the background color at the given index\"}},\"getClass(uint8)\":{\"details\":\"Returns the image part with the given ID.\",\"params\":{\"id\":\"The ID of the image part to retrieve.\"},\"returns\":{\"_0\":\"The ImagePart struct containing information about the image part.\"}},\"getCrown(uint8)\":{\"details\":\"Returns the crown at the given index\",\"params\":{\"id\":\"the index of the crown to retrieve\"},\"returns\":{\"_0\":\"the crown at the given index\"}},\"getDoodad(uint8)\":{\"details\":\"Returns the doodad at the given index\",\"params\":{\"id\":\"the index of the doodad to retrieve\"},\"returns\":{\"_0\":\"the doodad at the given index\"}},\"getGarland(uint8)\":{\"details\":\"Returns the garland at the given index\",\"params\":{\"id\":\"the index of the garland to retrieve\"},\"returns\":{\"_0\":\"the garland at the given index\"}},\"getNogglesColor(uint8)\":{\"details\":\"Returns the noggles color at the given index\",\"params\":{\"id\":\"the index of the noggles color to retrieve\"},\"returns\":{\"_0\":\"the noggles color at the given index\"}},\"getQuadrantPalette(uint8)\":{\"details\":\"Returns the quadrant palette at the given index\",\"params\":{\"id\":\"the index of the quadrant palette to retrieve\"},\"returns\":{\"_0\":\"the quadrant palette at the given index\"}},\"getRep(uint8)\":{\"details\":\"Returns the rep at the given index\",\"params\":{\"id\":\"the index of the rep to retrieve\"},\"returns\":{\"_0\":\"the rep at the given index\"}},\"getShield(uint8)\":{\"details\":\"Returns the shield at the given index\",\"params\":{\"id\":\"the index of the shield to retrieve\"},\"returns\":{\"_0\":\"the shield at the given index\"}},\"getSkill(uint8)\":{\"details\":\"Returns the skill at the given index\",\"params\":{\"id\":\"the index of the skill to retrieve\"},\"returns\":{\"_0\":\"the skill at the given index\"}},\"getTrait(uint8)\":{\"details\":\"Returns the image trait with the given ID.\",\"params\":{\"id\":\"The ID of the image trait to retrieve.\"},\"returns\":{\"_0\":\"The ImagePart struct containing information about the image trait.\"}},\"lock()\":{\"details\":\"Locks the store from further additions\"},\"nogglesColorsCount()\":{\"details\":\"Returns the count of noggles colors\",\"returns\":{\"_0\":\"the count of noggles colors\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"quadrantPalettesCount()\":{\"details\":\"Returns the count of quadrant palettes\",\"returns\":{\"_0\":\"the count of quadrant palettes\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"repsCount()\":{\"details\":\"Returns the count of reps\",\"returns\":{\"_0\":\"the count of reps\"}},\"shieldsCount()\":{\"details\":\"Returns the count of shields\",\"returns\":{\"_0\":\"the count of shields\"}},\"skillsCount()\":{\"details\":\"Returns the count of skills\",\"returns\":{\"_0\":\"the count of skills\"}},\"traitsCount()\":{\"details\":\"Returns the count of traits\",\"returns\":{\"_0\":\"the count of traits\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"PartsStore contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addBgColor((string,string))\":{\"notice\":\"Only the contract owner can call this function.\"},\"addClass((string,string))\":{\"notice\":\"Only the contract owner can call this function.\"},\"addCrown((string,string))\":{\"notice\":\"Only the contract owner can call this function.\"},\"addDoodad((string,string))\":{\"notice\":\"Only the contract owner can call this function.\"},\"addGarland((string,string))\":{\"notice\":\"Only the contract owner can call this function.\"},\"addNogglesColor((string,string))\":{\"notice\":\"Only the contract owner can call this function.\"},\"addQuadrantPalette((string,string,string))\":{\"notice\":\"Only the contract owner can call this function.\"},\"addRep((string,string))\":{\"notice\":\"Only the contract owner can call this function.\"},\"addShield((string,string))\":{\"notice\":\"Only the contract owner can call this function.\"},\"addSkill((string,string))\":{\"notice\":\"Only the contract owner can call this function.\"},\"addTrait((string,string))\":{\"notice\":\"Only the contract owner can call this function.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PartsStore.sol\":\"PartsStore\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/PartsStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IPartsStore} from \\\"./interfaces/IPartsStore.sol\\\";\\n\\n/**\\n * @title PartsStore contract\\n * @dev Contract for managing various image parts of Polkadot Builders Crests such as colors, image parts, and palettes\\n */\\ncontract PartsStore is IPartsStore, Ownable {\\n    Color[] public bgColors;\\n    Color[] public nogglesColors;\\n    ImagePart[] public crowns;\\n    ImagePart[] public doodads;\\n    ImagePart[] public garlands;\\n    ImagePart[] public shields;\\n    Palette[] public quadrantPalettes;\\n    ImagePart[] public reps;\\n    ImagePart[] public skills;\\n    ImagePart[] public classes;\\n    ImagePart[] public traits;\\n\\n    bool public locked = false;\\n\\n    /**\\n     * @dev Modifier to check if the contract is locked\\n     */\\n    modifier onlyUnlocked() {\\n        require(!locked, \\\"PartsStore: contract is locked\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the store from further additions\\n     */\\n    function lock() external onlyOwner {\\n        locked = true;\\n    }\\n\\n    /**\\n     * @dev Returns the count of background colors\\n     * @return the count of background colors\\n     */\\n    function bgColorsCount() external view returns (uint256) {\\n        return bgColors.length;\\n    }\\n\\n    /**\\n     * @dev Returns the count of noggles colors\\n     * @return the count of noggles colors\\n     */\\n    function nogglesColorsCount() external view returns (uint256) {\\n        return nogglesColors.length;\\n    }\\n\\n    /**\\n     * @dev Returns the count of crowns\\n     * @return the count of crowns\\n     */\\n    function crownsCount() external view returns (uint256) {\\n        return crowns.length;\\n    }\\n\\n    /**\\n     * @dev Returns the count of doodads\\n     * @return the count of doodads\\n     */\\n    function doodadsCount() external view returns (uint256) {\\n        return doodads.length;\\n    }\\n\\n    /**\\n     * @dev Returns the count of garlands\\n     * @return the count of garlands\\n     */\\n    function garlandsCount() external view returns (uint256) {\\n        return garlands.length;\\n    }\\n\\n    /**\\n     * @dev Returns the count of shields\\n     * @return the count of shields\\n     */\\n    function shieldsCount() external view returns (uint256) {\\n        return shields.length;\\n    }\\n\\n    /**\\n     * @dev Returns the count of quadrant palettes\\n     * @return the count of quadrant palettes\\n     */\\n    function quadrantPalettesCount() external view returns (uint256) {\\n        return quadrantPalettes.length;\\n    }\\n\\n    /**\\n     * @dev Returns the count of reps\\n     * @return the count of reps\\n     */\\n    function repsCount() external view returns (uint256) {\\n        return reps.length;\\n    }\\n\\n    /**\\n     * @dev Returns the count of skills\\n     * @return the count of skills\\n     */\\n    function skillsCount() external view returns (uint256) {\\n        return skills.length;\\n    }\\n\\n    /**\\n     * @dev Returns the count of classes\\n     * @return the count of classes\\n     */\\n    function classesCount() external view returns (uint256) {\\n        return classes.length;\\n    }\\n\\n    /**\\n     * @dev Returns the count of traits\\n     * @return the count of traits\\n     */\\n    function traitsCount() external view returns (uint256) {\\n        return traits.length;\\n    }\\n\\n    /**\\n     * @dev Returns the background color at the given index\\n     * @param id the index of the background color to retrieve\\n     * @return the background color at the given index\\n     */\\n    function getBgColor(uint8 id) external view returns (Color memory) {\\n        return bgColors[id];\\n    }\\n\\n    /**\\n     * @dev Returns the noggles color at the given index\\n     * @param id the index of the noggles color to retrieve\\n     * @return the noggles color at the given index\\n     */\\n    function getNogglesColor(uint8 id) external view returns (Color memory) {\\n        return nogglesColors[id];\\n    }\\n\\n    /**\\n     * @dev Returns the crown at the given index\\n     * @param id the index of the crown to retrieve\\n     * @return the crown at the given index\\n     */\\n    function getCrown(uint8 id) external view returns (ImagePart memory) {\\n        return crowns[id];\\n    }\\n\\n    /**\\n     * @dev Returns the doodad at the given index\\n     * @param id the index of the doodad to retrieve\\n     * @return the doodad at the given index\\n     */\\n    function getDoodad(uint8 id) external view returns (ImagePart memory) {\\n        return doodads[id];\\n    }\\n\\n    /**\\n     * @dev Returns the garland at the given index\\n     * @param id the index of the garland to retrieve\\n     * @return the garland at the given index\\n     */\\n    function getGarland(uint8 id) external view returns (ImagePart memory) {\\n        return garlands[id];\\n    }\\n\\n    /**\\n     * @dev Returns the shield at the given index\\n     * @param id the index of the shield to retrieve\\n     * @return the shield at the given index\\n     */\\n    function getShield(uint8 id) external view returns (ImagePart memory) {\\n        return shields[id];\\n    }\\n\\n    /**\\n     * @dev Returns the quadrant palette at the given index\\n     * @param id the index of the quadrant palette to retrieve\\n     * @return the quadrant palette at the given index\\n     */\\n    function getQuadrantPalette(uint8 id) external view returns (Palette memory) {\\n        return quadrantPalettes[id];\\n    }\\n\\n    /**\\n     * @dev Returns the rep at the given index\\n     * @param id the index of the rep to retrieve\\n     * @return the rep at the given index\\n     */\\n    function getRep(uint8 id) external view returns (ImagePart memory) {\\n        return reps[id];\\n    }\\n\\n    /**\\n     * @dev Returns the skill at the given index\\n     * @param id the index of the skill to retrieve\\n     * @return the skill at the given index\\n     */\\n    function getSkill(uint8 id) external view returns (ImagePart memory) {\\n        return skills[id];\\n    }\\n\\n    /**\\n     * @dev Returns the image part with the given ID.\\n     * @param id The ID of the image part to retrieve.\\n     * @return The ImagePart struct containing information about the image part.\\n     */\\n    function getClass(uint8 id) external view returns (ImagePart memory) {\\n        return classes[id];\\n    }\\n\\n    /**\\n     * @dev Returns the image trait with the given ID.\\n     * @param id The ID of the image trait to retrieve.\\n     * @return The ImagePart struct containing information about the image trait.\\n     */\\n    function getTrait(uint8 id) external view returns (ImagePart memory) {\\n        return traits[id];\\n    }\\n\\n    /**\\n     * @dev Adds a new background color to the list of available background colors.\\n     * @param color The color to add.\\n     * @notice Only the contract owner can call this function.\\n     * @dev Throws an error if the number of background colors is already at the maximum (255).\\n     */\\n    function addBgColor(Color calldata color) external onlyOwner onlyUnlocked {\\n        bgColors.push(color);\\n    }\\n\\n    /**\\n     * @dev Adds a new Noggles color to the list of available Noggles colors.\\n     * @param color The color to add.\\n     * @notice Only the contract owner can call this function.\\n     * @dev Throws an error if the number of Noggles colors is already at the maximum (255).\\n     */\\n    function addNogglesColor(Color calldata color) external onlyOwner onlyUnlocked {\\n        nogglesColors.push(color);\\n    }\\n\\n    /**\\n     * @dev Adds a new crown to the list of available crowns.\\n     * @param part The crown to add.\\n     * @notice Only the contract owner can call this function.\\n     * @dev Throws an error if the number of crowns is already at the maximum (255).\\n     */\\n    function addCrown(ImagePart calldata part) external onlyOwner onlyUnlocked {\\n        crowns.push(part);\\n    }\\n\\n    /**\\n     * @dev Adds a new doodad to the list of available doodads.\\n     * @param part The doodad to add.\\n     * @notice Only the contract owner can call this function.\\n     * @dev Throws an error if the number of doodads is already at the maximum (255).\\n     */\\n    function addDoodad(ImagePart calldata part) external onlyOwner onlyUnlocked {\\n        doodads.push(part);\\n    }\\n\\n    /**\\n     * @dev Adds a new garland to the list of available garlands.\\n     * @param part The garland to add.\\n     * @notice Only the contract owner can call this function.\\n     * @dev Throws an error if the number of garlands is already at the maximum (255).\\n     */\\n    function addGarland(ImagePart calldata part) external onlyOwner onlyUnlocked {\\n        garlands.push(part);\\n    }\\n\\n    /**\\n     * @dev Adds a new shield to the list of available shields.\\n     * @param part The shield to add.\\n     * @notice Only the contract owner can call this function.\\n     * @dev Throws an error if the number of shields is already at the maximum (255).\\n     */\\n    function addShield(ImagePart calldata part) external onlyOwner onlyUnlocked {\\n        shields.push(part);\\n    }\\n\\n    /**\\n     * @dev Adds a new quadrant palette to the list of available quadrant palettes.\\n     * @param palette The quadrant palette to add.\\n     * @notice Only the contract owner can call this function.\\n     * @dev Throws an error if the number of quadrant palettes is already at the maximum (255).\\n     */\\n    function addQuadrantPalette(Palette calldata palette) external onlyOwner onlyUnlocked {\\n        quadrantPalettes.push(palette);\\n    }\\n\\n    /**\\n     * @dev Adds a new rep to the list of available reps.\\n     * @param part The rep to add.\\n     * @notice Only the contract owner can call this function.\\n     * @dev Throws an error if the number of reps is already at the maximum (255).\\n     */\\n    function addRep(ImagePart calldata part) external onlyOwner onlyUnlocked {\\n        reps.push(part);\\n    }\\n\\n    /**\\n     * @dev Adds a new skill to the list of available skills.\\n     * @param part The skill to add.\\n     * @notice Only the contract owner can call this function.\\n     * @dev Throws an error if the number of skills is already at the maximum (255).\\n     */\\n    function addSkill(ImagePart calldata part) external onlyOwner onlyUnlocked {\\n        skills.push(part);\\n    }\\n\\n    /**\\n     * @dev Adds a new class to the list of available classes.\\n     * @param part The class to add.\\n     * @notice Only the contract owner can call this function.\\n     * @dev Throws an error if the number of classes is already at the maximum (255).\\n     */\\n    function addClass(ImagePart calldata part) external onlyOwner onlyUnlocked {\\n        classes.push(part);\\n    }\\n\\n    /**\\n     * @dev Adds a new trait to the list of available traits.\\n     * @param part The trait to add.\\n     * @notice Only the contract owner can call this function.\\n     * @dev Throws an error if the number of traits is already at the maximum (255).\\n     */\\n    function addTrait(ImagePart calldata part) external onlyOwner onlyUnlocked {\\n        traits.push(part);\\n    }\\n\\n    /**\\n     * @dev Returns the names of available colors.\\n     * @return The names of available colors.\\n     */\\n    function getColorNames(Color[] memory colors) private pure returns (string[] memory) {\\n        string[] memory names = new string[](colors.length);\\n        for (uint256 i = 0; i < colors.length; i++) {\\n            names[i] = colors[i].name;\\n        }\\n        return names;\\n    }\\n\\n    /**\\n     * @dev Returns the names of available color palettes.\\n     * @return The names of available color palettess.\\n     */\\n    function getPaletteNames(Palette[] memory palettes) private pure returns (string[] memory) {\\n        string[] memory names = new string[](palettes.length);\\n        for (uint256 i = 0; i < palettes.length; i++) {\\n            names[i] = palettes[i].name;\\n        }\\n        return names;\\n    }\\n\\n    /**\\n     * @dev Returns the names of available image parts.\\n     * @return The names of available image parts.\\n     */\\n    function getImagePartNames(ImagePart[] memory parts) private pure returns (string[] memory) {\\n        string[] memory names = new string[](parts.length);\\n        for (uint256 i = 0; i < parts.length; i++) {\\n            names[i] = parts[i].name;\\n        }\\n        return names;\\n    }\\n\\n    /**\\n     * @dev Returns all available parts.\\n     * @return All available parts.\\n     */\\n    function getAllParts() external view returns (AllParts memory) {\\n        return\\n            AllParts(\\n                getColorNames(bgColors),\\n                getColorNames(nogglesColors),\\n                getImagePartNames(crowns),\\n                getImagePartNames(doodads),\\n                getImagePartNames(garlands),\\n                getImagePartNames(shields),\\n                getPaletteNames(quadrantPalettes),\\n                getImagePartNames(reps),\\n                getImagePartNames(skills),\\n                getImagePartNames(classes),\\n                getImagePartNames(traits)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x62ffe0cef46063b5c0c4770ba2b766edfca13847d39fdcb22e4398b5d6d25a55\",\"license\":\"MIT\"},\"contracts/interfaces/IPartsStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\ninterface IPartsStore {\\n    struct Color {\\n        string name;\\n        string color;\\n    }\\n\\n    struct Palette {\\n        string name;\\n        string primary;\\n        string secondary;\\n    }\\n\\n    struct ImagePart {\\n        string name;\\n        string svg;\\n    }\\n\\n    struct AllParts {\\n        string[] bgColors;\\n        string[] nogglesColors;\\n        string[] crowns;\\n        string[] doodads;\\n        string[] garlands;\\n        string[] shields;\\n        string[] quadrantPalettes;\\n        string[] reps;\\n        string[] skills;\\n        string[] classes;\\n        string[] traits;\\n    }\\n\\n    function bgColorsCount() external view returns (uint256);\\n\\n    function nogglesColorsCount() external view returns (uint256);\\n\\n    function crownsCount() external view returns (uint256);\\n\\n    function doodadsCount() external view returns (uint256);\\n\\n    function garlandsCount() external view returns (uint256);\\n\\n    function shieldsCount() external view returns (uint256);\\n\\n    function quadrantPalettesCount() external view returns (uint256);\\n\\n    function repsCount() external view returns (uint256);\\n\\n    function skillsCount() external view returns (uint256);\\n\\n    function classesCount() external view returns (uint256);\\n\\n    function traitsCount() external view returns (uint256);\\n\\n    function getBgColor(uint8 id) external view returns (Color memory);\\n\\n    function getNogglesColor(uint8 id) external view returns (Color memory);\\n\\n    function getCrown(uint8 id) external view returns (ImagePart memory);\\n\\n    function getDoodad(uint8 id) external view returns (ImagePart memory);\\n\\n    function getGarland(uint8 id) external view returns (ImagePart memory);\\n\\n    function getShield(uint8 id) external view returns (ImagePart memory);\\n\\n    function getQuadrantPalette(uint8 id) external view returns (Palette memory);\\n\\n    function getRep(uint8 id) external view returns (ImagePart memory);\\n\\n    function getSkill(uint8 id) external view returns (ImagePart memory);\\n\\n    function getClass(uint8 id) external view returns (ImagePart memory);\\n\\n    function getTrait(uint8 id) external view returns (ImagePart memory);\\n\\n    function addBgColor(Color calldata color) external;\\n\\n    function addNogglesColor(Color calldata color) external;\\n\\n    function addCrown(ImagePart calldata part) external;\\n\\n    function addDoodad(ImagePart calldata part) external;\\n\\n    function addGarland(ImagePart calldata part) external;\\n\\n    function addShield(ImagePart calldata part) external;\\n\\n    function addQuadrantPalette(Palette calldata palette) external;\\n\\n    function addRep(ImagePart calldata part) external;\\n\\n    function addSkill(ImagePart calldata part) external;\\n\\n    function addClass(ImagePart calldata part) external;\\n\\n    function addTrait(ImagePart calldata part) external;\\n\\n    function getAllParts() external returns (AllParts memory);\\n}\\n\",\"keccak256\":\"0x2c4900a6007078e078250e3988a4970f43caf889a629c0200d093f32ac163409\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600c805460ff1916905534801561001a57600080fd5b5061002433610029565b610079565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61320480620000896000396000f3fe608060405234801561001057600080fd5b50600436106103365760003560e01c80638da5cb5b116101b2578063d2c957e9116100f9578063e703c186116100a2578063f2fde38b1161007c578063f2fde38b14610681578063f83d08ba14610694578063f862ab1b1461069c578063f87b5d6a146106af57600080fd5b8063e703c18614610653578063e98636641461065b578063ee9a808f1461066e57600080fd5b8063e2c24605116100d3578063e2c246051461061a578063e3ec8b981461062d578063e465b0551461064057600080fd5b8063d2c957e9146105ec578063d8a4234d146105ff578063ddee33b51461061257600080fd5b8063b09c691c1161015b578063ceed017511610135578063ceed01751461059a578063cf309012146105ad578063d19893c3146105ca57600080fd5b8063b09c691c1461056c578063b122c74f1461057f578063c80adbdb1461058757600080fd5b80639df263dd1161018c5780639df263dd146105315780639f76a1e514610546578063abb26ac41461055957600080fd5b80638da5cb5b146104fb5780639d1f6589146105165780639da775d01461051e57600080fd5b80636f25dcd51161028157806384a5d1c61161022a57806387f307891161020457806387f30789146104c55780638bb5ad96146104cd5780638ce33c25146104e05780638d915d1f146104f357600080fd5b806384a5d1c614610497578063872f5b4c1461049f57806387dddae5146104b257600080fd5b80637cca159e1161025b5780637cca159e1461046957806380942bfe14610471578063817dbe9f1461048457600080fd5b80636f25dcd514610446578063715018a6146104595780637576bf871461046157600080fd5b80633d0cf8cb116102e35780635e39eee0116102bd5780635e39eee01461040d578063621dc7361461042057806365c1b3f11461043357600080fd5b80633d0cf8cb146103d257806350d15fbe146103e75780635bca69ec146103fa57600080fd5b80632d72225b116103145780632d72225b146103975780632f6171cb146103b8578063320d7b4b146103ca57600080fd5b8063077e69cc1461033b57806315c507db146103645780632c0d2de614610384575b600080fd5b61034e6103493660046129f1565b6106c2565b60405161035b9190612a61565b60405180910390f35b6103776103723660046129f1565b6108d2565b60405161035b9190612af0565b6103776103923660046129f1565b6109b7565b6103aa6103a5366004612b03565b6109e1565b60405161035b929190612b1c565b6007545b60405190815260200161035b565b600a546103bc565b6103e56103e0366004612b59565b610b25565b005b6103aa6103f5366004612b03565b610bb8565b6103aa610408366004612b03565b610bc8565b61037761041b3660046129f1565b610bd8565b6103aa61042e366004612b03565b610c02565b6103e5610441366004612b96565b610c12565b6103776104543660046129f1565b610c9c565b6103e5610cc6565b6006546103bc565b6002546103bc565b6103e561047f366004612b59565b610cda565b6103aa610492366004612b03565b610d64565b6009546103bc565b6103e56104ad366004612b59565b610d74565b6103776104c03660046129f1565b610dfe565b6001546103bc565b6103776104db3660046129f1565b610e28565b6103e56104ee366004612b59565b610e52565b600b546103bc565b6000546040516001600160a01b03909116815260200161035b565b6004546103bc565b6103e561052c366004612b59565b610edc565b610539610f66565b60405161035b9190612c26565b6103e5610554366004612b59565b6120fe565b6103e5610567366004612b59565b612188565b6103e561057a366004612b59565b612212565b6008546103bc565b6103aa610595366004612b03565b61229c565b6103aa6105a8366004612b03565b6122ac565b600c546105ba9060ff1681565b604051901515815260200161035b565b6105dd6105d8366004612b03565b6122bc565b60405161035b93929190612d77565b6103e56105fa366004612b59565b61248e565b61037761060d3660046129f1565b612515565b6005546103bc565b6103aa610628366004612b03565b61253f565b61037761063b3660046129f1565b61254f565b61037761064e3660046129f1565b612579565b6003546103bc565b6103e5610669366004612b59565b6125a3565b6103aa61067c366004612b03565b61262d565b6103e561068f366004612db0565b61263d565b6103e56126cd565b6103aa6106aa366004612b03565b6126e4565b6103776106bd3660046129f1565b6126f4565b6106e660405180606001604052806060815260200160608152602001606081525090565b60078260ff16815481106106fc576106fc612dd9565b906000526020600020906003020160405180606001604052908160008201805461072590612def565b80601f016020809104026020016040519081016040528092919081815260200182805461075190612def565b801561079e5780601f106107735761010080835404028352916020019161079e565b820191906000526020600020905b81548152906001019060200180831161078157829003601f168201915b505050505081526020016001820180546107b790612def565b80601f01602080910402602001604051908101604052809291908181526020018280546107e390612def565b80156108305780601f1061080557610100808354040283529160200191610830565b820191906000526020600020905b81548152906001019060200180831161081357829003601f168201915b5050505050815260200160028201805461084990612def565b80601f016020809104026020016040519081016040528092919081815260200182805461087590612def565b80156108c25780601f10610897576101008083540402835291602001916108c2565b820191906000526020600020905b8154815290600101906020018083116108a557829003601f168201915b5050505050815250509050919050565b604080518082019091526060808252602082015260018260ff16815481106108fc576108fc612dd9565b906000526020600020906002020160405180604001604052908160008201805461092590612def565b80601f016020809104026020016040519081016040528092919081815260200182805461095190612def565b801561099e5780601f106109735761010080835404028352916020019161099e565b820191906000526020600020905b81548152906001019060200180831161098157829003601f168201915b5050505050815260200160018201805461084990612def565b604080518082019091526060808252602082015260028260ff16815481106108fc576108fc612dd9565b600b81815481106109f157600080fd5b9060005260206000209060020201600091509050806000018054610a1490612def565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4090612def565b8015610a8d5780601f10610a6257610100808354040283529160200191610a8d565b820191906000526020600020905b815481529060010190602001808311610a7057829003601f168201915b505050505090806001018054610aa290612def565b80601f0160208091040260200160405190810160405280929190818152602001828054610ace90612def565b8015610b1b5780601f10610af057610100808354040283529160200191610b1b565b820191906000526020600020905b815481529060010190602001808311610afe57829003601f168201915b5050505050905082565b610b2d61271e565b600c5460ff1615610b735760405162461bcd60e51b815260206004820152601e60248201526000805160206131af83398151915260448201526064015b60405180910390fd5b60018054808201825560009190915281906002027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601610bb3828261307f565b505050565b600981815481106109f157600080fd5b600881815481106109f157600080fd5b604080518082019091526060808252602082015260048260ff16815481106108fc576108fc612dd9565b600581815481106109f157600080fd5b610c1a61271e565b600c5460ff1615610c5b5760405162461bcd60e51b815260206004820152601e60248201526000805160206131af8339815191526044820152606401610b6a565b6007805460018101825560009190915281906003027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801610bb3828261308d565b604080518082019091526060808252602082015260038260ff16815481106108fc576108fc612dd9565b610cce61271e565b610cd86000612778565b565b610ce261271e565b600c5460ff1615610d235760405162461bcd60e51b815260206004820152601e60248201526000805160206131af8339815191526044820152606401610b6a565b6003805460018101825560009190915281906002027fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01610bb3828261307f565b600a81815481106109f157600080fd5b610d7c61271e565b600c5460ff1615610dbd5760405162461bcd60e51b815260206004820152601e60248201526000805160206131af8339815191526044820152606401610b6a565b600a805460018101825560009190915281906002027fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a801610bb3828261307f565b604080518082019091526060808252602082015260088260ff16815481106108fc576108fc612dd9565b6040805180820190915260608082526020820152600a8260ff16815481106108fc576108fc612dd9565b610e5a61271e565b600c5460ff1615610e9b5760405162461bcd60e51b815260206004820152601e60248201526000805160206131af8339815191526044820152606401610b6a565b6008805460018101825560009190915281906002027ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301610bb3828261307f565b610ee461271e565b600c5460ff1615610f255760405162461bcd60e51b815260206004820152601e60248201526000805160206131af8339815191526044820152606401610b6a565b6006805460018101825560009190915281906002027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01610bb3828261307f565b610fc360405180610160016040528060608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b6040518061016001604052806111536001805480602002602001604051908101604052809291908181526020016000905b8282101561114a578382906000526020600020906002020160405180604001604052908160008201805461102790612def565b80601f016020809104026020016040519081016040528092919081815260200182805461105390612def565b80156110a05780601f10611075576101008083540402835291602001916110a0565b820191906000526020600020905b81548152906001019060200180831161108357829003601f168201915b505050505081526020016001820180546110b990612def565b80601f01602080910402602001604051908101604052809291908181526020018280546110e590612def565b80156111325780601f1061110757610100808354040283529160200191611132565b820191906000526020600020905b81548152906001019060200180831161111557829003601f168201915b50505050508152505081526020019060010190610ff4565b505050506127e0565b81526020016112d36002805480602002602001604051908101604052809291908181526020016000905b8282101561114a57838290600052602060002090600202016040518060400160405290816000820180546111b090612def565b80601f01602080910402602001604051908101604052809291908181526020018280546111dc90612def565b80156112295780601f106111fe57610100808354040283529160200191611229565b820191906000526020600020905b81548152906001019060200180831161120c57829003601f168201915b5050505050815260200160018201805461124290612def565b80601f016020809104026020016040519081016040528092919081815260200182805461126e90612def565b80156112bb5780601f10611290576101008083540402835291602001916112bb565b820191906000526020600020905b81548152906001019060200180831161129e57829003601f168201915b5050505050815250508152602001906001019061117d565b815260200161145c6003805480602002602001604051908101604052809291908181526020016000905b82821015611453578382906000526020600020906002020160405180604001604052908160008201805461133090612def565b80601f016020809104026020016040519081016040528092919081815260200182805461135c90612def565b80156113a95780601f1061137e576101008083540402835291602001916113a9565b820191906000526020600020905b81548152906001019060200180831161138c57829003601f168201915b505050505081526020016001820180546113c290612def565b80601f01602080910402602001604051908101604052809291908181526020018280546113ee90612def565b801561143b5780601f106114105761010080835404028352916020019161143b565b820191906000526020600020905b81548152906001019060200180831161141e57829003601f168201915b505050505081525050815260200190600101906112fd565b50505050612895565b81526020016115dc6004805480602002602001604051908101604052809291908181526020016000905b8282101561145357838290600052602060002090600202016040518060400160405290816000820180546114b990612def565b80601f01602080910402602001604051908101604052809291908181526020018280546114e590612def565b80156115325780601f1061150757610100808354040283529160200191611532565b820191906000526020600020905b81548152906001019060200180831161151557829003601f168201915b5050505050815260200160018201805461154b90612def565b80601f016020809104026020016040519081016040528092919081815260200182805461157790612def565b80156115c45780601f10611599576101008083540402835291602001916115c4565b820191906000526020600020905b8154815290600101906020018083116115a757829003601f168201915b50505050508152505081526020019060010190611486565b815260200161175c6005805480602002602001604051908101604052809291908181526020016000905b82821015611453578382906000526020600020906002020160405180604001604052908160008201805461163990612def565b80601f016020809104026020016040519081016040528092919081815260200182805461166590612def565b80156116b25780601f10611687576101008083540402835291602001916116b2565b820191906000526020600020905b81548152906001019060200180831161169557829003601f168201915b505050505081526020016001820180546116cb90612def565b80601f01602080910402602001604051908101604052809291908181526020018280546116f790612def565b80156117445780601f1061171957610100808354040283529160200191611744565b820191906000526020600020905b81548152906001019060200180831161172757829003601f168201915b50505050508152505081526020019060010190611606565b81526020016118dc6006805480602002602001604051908101604052809291908181526020016000905b8282101561145357838290600052602060002090600202016040518060400160405290816000820180546117b990612def565b80601f01602080910402602001604051908101604052809291908181526020018280546117e590612def565b80156118325780601f1061180757610100808354040283529160200191611832565b820191906000526020600020905b81548152906001019060200180831161181557829003601f168201915b5050505050815260200160018201805461184b90612def565b80601f016020809104026020016040519081016040528092919081815260200182805461187790612def565b80156118c45780601f10611899576101008083540402835291602001916118c4565b820191906000526020600020905b8154815290600101906020018083116118a757829003601f168201915b50505050508152505081526020019060010190611786565b8152602001611af76007805480602002602001604051908101604052809291908181526020016000905b82821015611aee578382906000526020600020906003020160405180606001604052908160008201805461193990612def565b80601f016020809104026020016040519081016040528092919081815260200182805461196590612def565b80156119b25780601f10611987576101008083540402835291602001916119b2565b820191906000526020600020905b81548152906001019060200180831161199557829003601f168201915b505050505081526020016001820180546119cb90612def565b80601f01602080910402602001604051908101604052809291908181526020018280546119f790612def565b8015611a445780601f10611a1957610100808354040283529160200191611a44565b820191906000526020600020905b815481529060010190602001808311611a2757829003601f168201915b50505050508152602001600282018054611a5d90612def565b80601f0160208091040260200160405190810160405280929190818152602001828054611a8990612def565b8015611ad65780601f10611aab57610100808354040283529160200191611ad6565b820191906000526020600020905b815481529060010190602001808311611ab957829003601f168201915b50505050508152505081526020019060010190611906565b50505050612943565b8152602001611c776008805480602002602001604051908101604052809291908181526020016000905b828210156114535783829060005260206000209060020201604051806040016040529081600082018054611b5490612def565b80601f0160208091040260200160405190810160405280929190818152602001828054611b8090612def565b8015611bcd5780601f10611ba257610100808354040283529160200191611bcd565b820191906000526020600020905b815481529060010190602001808311611bb057829003601f168201915b50505050508152602001600182018054611be690612def565b80601f0160208091040260200160405190810160405280929190818152602001828054611c1290612def565b8015611c5f5780601f10611c3457610100808354040283529160200191611c5f565b820191906000526020600020905b815481529060010190602001808311611c4257829003601f168201915b50505050508152505081526020019060010190611b21565b8152602001611df76009805480602002602001604051908101604052809291908181526020016000905b828210156114535783829060005260206000209060020201604051806040016040529081600082018054611cd490612def565b80601f0160208091040260200160405190810160405280929190818152602001828054611d0090612def565b8015611d4d5780601f10611d2257610100808354040283529160200191611d4d565b820191906000526020600020905b815481529060010190602001808311611d3057829003601f168201915b50505050508152602001600182018054611d6690612def565b80601f0160208091040260200160405190810160405280929190818152602001828054611d9290612def565b8015611ddf5780601f10611db457610100808354040283529160200191611ddf565b820191906000526020600020905b815481529060010190602001808311611dc257829003601f168201915b50505050508152505081526020019060010190611ca1565b8152602001611f77600a805480602002602001604051908101604052809291908181526020016000905b828210156114535783829060005260206000209060020201604051806040016040529081600082018054611e5490612def565b80601f0160208091040260200160405190810160405280929190818152602001828054611e8090612def565b8015611ecd5780601f10611ea257610100808354040283529160200191611ecd565b820191906000526020600020905b815481529060010190602001808311611eb057829003601f168201915b50505050508152602001600182018054611ee690612def565b80601f0160208091040260200160405190810160405280929190818152602001828054611f1290612def565b8015611f5f5780601f10611f3457610100808354040283529160200191611f5f565b820191906000526020600020905b815481529060010190602001808311611f4257829003601f168201915b50505050508152505081526020019060010190611e21565b81526020016120f7600b805480602002602001604051908101604052809291908181526020016000905b828210156114535783829060005260206000209060020201604051806040016040529081600082018054611fd490612def565b80601f016020809104026020016040519081016040528092919081815260200182805461200090612def565b801561204d5780601f106120225761010080835404028352916020019161204d565b820191906000526020600020905b81548152906001019060200180831161203057829003601f168201915b5050505050815260200160018201805461206690612def565b80601f016020809104026020016040519081016040528092919081815260200182805461209290612def565b80156120df5780601f106120b4576101008083540402835291602001916120df565b820191906000526020600020905b8154815290600101906020018083116120c257829003601f168201915b50505050508152505081526020019060010190611fa1565b9052919050565b61210661271e565b600c5460ff16156121475760405162461bcd60e51b815260206004820152601e60248201526000805160206131af8339815191526044820152606401610b6a565b600b805460018101825560009190915281906002027f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901610bb3828261307f565b61219061271e565b600c5460ff16156121d15760405162461bcd60e51b815260206004820152601e60248201526000805160206131af8339815191526044820152606401610b6a565b6005805460018101825560009190915281906002027f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001610bb3828261307f565b61221a61271e565b600c5460ff161561225b5760405162461bcd60e51b815260206004820152601e60248201526000805160206131af8339815191526044820152606401610b6a565b6004805460018101825560009190915281906002027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01610bb3828261307f565b600281815481106109f157600080fd5b600481815481106109f157600080fd5b600781815481106122cc57600080fd5b90600052602060002090600302016000915090508060000180546122ef90612def565b80601f016020809104026020016040519081016040528092919081815260200182805461231b90612def565b80156123685780601f1061233d57610100808354040283529160200191612368565b820191906000526020600020905b81548152906001019060200180831161234b57829003601f168201915b50505050509080600101805461237d90612def565b80601f01602080910402602001604051908101604052809291908181526020018280546123a990612def565b80156123f65780601f106123cb576101008083540402835291602001916123f6565b820191906000526020600020905b8154815290600101906020018083116123d957829003601f168201915b50505050509080600201805461240b90612def565b80601f016020809104026020016040519081016040528092919081815260200182805461243790612def565b80156124845780601f1061245957610100808354040283529160200191612484565b820191906000526020600020905b81548152906001019060200180831161246757829003601f168201915b5050505050905083565b61249661271e565b600c5460ff16156124d75760405162461bcd60e51b815260206004820152601e60248201526000805160206131af8339815191526044820152606401610b6a565b6002805460018101825560008290528291027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01610bb3828261307f565b604080518082019091526060808252602082015260058260ff16815481106108fc576108fc612dd9565b600181815481106109f157600080fd5b604080518082019091526060808252602082015260068260ff16815481106108fc576108fc612dd9565b604080518082019091526060808252602082015260098260ff16815481106108fc576108fc612dd9565b6125ab61271e565b600c5460ff16156125ec5760405162461bcd60e51b815260206004820152601e60248201526000805160206131af8339815191526044820152606401610b6a565b6009805460018101825560009190915281906002027f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af01610bb3828261307f565b600381815481106109f157600080fd5b61264561271e565b6001600160a01b0381166126c15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610b6a565b6126ca81612778565b50565b6126d561271e565b600c805460ff19166001179055565b600681815481106109f157600080fd5b6040805180820190915260608082526020820152600b8260ff16815481106108fc576108fc612dd9565b6000546001600160a01b03163314610cd85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b6a565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60606000825167ffffffffffffffff8111156127fe576127fe612e71565b60405190808252806020026020018201604052801561283157816020015b606081526020019060019003908161281c5790505b50905060005b835181101561288e5783818151811061285257612852612dd9565b60200260200101516000015182828151811061287057612870612dd9565b6020026020010181905250808061288690613187565b915050612837565b5092915050565b60606000825167ffffffffffffffff8111156128b3576128b3612e71565b6040519080825280602002602001820160405280156128e657816020015b60608152602001906001900390816128d15790505b50905060005b835181101561288e5783818151811061290757612907612dd9565b60200260200101516000015182828151811061292557612925612dd9565b6020026020010181905250808061293b90613187565b9150506128ec565b60606000825167ffffffffffffffff81111561296157612961612e71565b60405190808252806020026020018201604052801561299457816020015b606081526020019060019003908161297f5790505b50905060005b835181101561288e578381815181106129b5576129b5612dd9565b6020026020010151600001518282815181106129d3576129d3612dd9565b602002602001018190525080806129e990613187565b91505061299a565b600060208284031215612a0357600080fd5b813560ff81168114612a1457600080fd5b9392505050565b6000815180845260005b81811015612a4157602081850181015186830182015201612a25565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000825160606020840152612a7d6080840182612a1b565b90506020840151601f1980858403016040860152612a9b8383612a1b565b9250604086015191508085840301606086015250612ab98282612a1b565b95945050505050565b6000815160408452612ad76040850182612a1b565b905060208301518482036020860152612ab98282612a1b565b602081526000612a146020830184612ac2565b600060208284031215612b1557600080fd5b5035919050565b604081526000612b2f6040830185612a1b565b8281036020840152612ab98185612a1b565b600060408284031215612b5357600080fd5b50919050565b600060208284031215612b6b57600080fd5b813567ffffffffffffffff811115612b8257600080fd5b612b8e84828501612b41565b949350505050565b600060208284031215612ba857600080fd5b813567ffffffffffffffff811115612bbf57600080fd5b820160608185031215612a1457600080fd5b600081518084526020808501808196508360051b8101915082860160005b85811015612c19578284038952612c07848351612a1b565b98850198935090840190600101612bef565b5091979650505050505050565b6020815260008251610160806020850152612c45610180850183612bd1565b91506020850151601f1980868503016040870152612c638483612bd1565b93506040870151915080868503016060870152612c808483612bd1565b93506060870151915080868503016080870152612c9d8483612bd1565b935060808701519150808685030160a0870152612cba8483612bd1565b935060a08701519150808685030160c0870152612cd78483612bd1565b935060c08701519150808685030160e0870152612cf48483612bd1565b935060e08701519150610100818786030181880152612d138584612bd1565b945080880151925050610120818786030181880152612d328584612bd1565b945080880151925050610140818786030181880152612d518584612bd1565b908801518782039092018488015293509050612d6d8382612bd1565b9695505050505050565b606081526000612d8a6060830186612a1b565b8281036020840152612d9c8186612a1b565b90508281036040840152612d6d8185612a1b565b600060208284031215612dc257600080fd5b81356001600160a01b0381168114612a1457600080fd5b634e487b7160e01b600052603260045260246000fd5b600181811c90821680612e0357607f821691505b602082108103612b5357634e487b7160e01b600052602260045260246000fd5b6000808335601e19843603018112612e3a57600080fd5b83018035915067ffffffffffffffff821115612e5557600080fd5b602001915036819003821315612e6a57600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b601f821115610bb357600081815260208120601f850160051c81016020861015612eae5750805b601f850160051c820191505b81811015612ecd57828155600101612eba565b505050505050565b67ffffffffffffffff831115612eed57612eed612e71565b612f0183612efb8354612def565b83612e87565b6000601f841160018114612f355760008515612f1d5750838201355b600019600387901b1c1916600186901b178355612f8f565b600083815260209020601f19861690835b82811015612f665786850135825560209485019460019092019101612f46565b5086821015612f835760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b612fa08283612e23565b67ffffffffffffffff811115612fb857612fb8612e71565b612fcc81612fc68554612def565b85612e87565b6000601f8211600181146130005760008315612fe85750838201355b600019600385901b1c1916600184901b17855561305a565b600085815260209020601f19841690835b828110156130315786850135825560209485019460019092019101613011565b508482101561304e5760001960f88660031b161c19848701351681555b505060018360011b0185555b5050505061306b6020830183612e23565b613079818360018601612ed5565b50505050565b6130898282612f96565b5050565b6130978283612e23565b67ffffffffffffffff8111156130af576130af612e71565b6130bd81612fc68554612def565b6000601f8211600181146130f157600083156130d95750838201355b600019600385901b1c1916600184901b17855561314b565b600085815260209020601f19841690835b828110156131225786850135825560209485019460019092019101613102565b508482101561313f5760001960f88660031b161c19848701351681555b505060018360011b0185555b5050505061315c6020830183612e23565b61316a818360018601612ed5565b50506131796040830183612e23565b613079818360028601612ed5565b6000600182016131a757634e487b7160e01b600052601160045260246000fd5b506001019056fe506172747353746f72653a20636f6e7472616374206973206c6f636b65640000a264697066735822122068192029208bfaf7fd4abbe2b027e2039d8007154dc54037d366b1868ed05cb864736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Contract for managing various image parts of Polkadot Builders Crests such as colors, image parts, and palettes",
    "kind": "dev",
    "methods": {
      "addBgColor((string,string))": {
        "details": "Adds a new background color to the list of available background colors.Throws an error if the number of background colors is already at the maximum (255).",
        "params": {
          "color": "The color to add."
        }
      },
      "addClass((string,string))": {
        "details": "Adds a new class to the list of available classes.Throws an error if the number of classes is already at the maximum (255).",
        "params": {
          "part": "The class to add."
        }
      },
      "addCrown((string,string))": {
        "details": "Adds a new crown to the list of available crowns.Throws an error if the number of crowns is already at the maximum (255).",
        "params": {
          "part": "The crown to add."
        }
      },
      "addDoodad((string,string))": {
        "details": "Adds a new doodad to the list of available doodads.Throws an error if the number of doodads is already at the maximum (255).",
        "params": {
          "part": "The doodad to add."
        }
      },
      "addGarland((string,string))": {
        "details": "Adds a new garland to the list of available garlands.Throws an error if the number of garlands is already at the maximum (255).",
        "params": {
          "part": "The garland to add."
        }
      },
      "addNogglesColor((string,string))": {
        "details": "Adds a new Noggles color to the list of available Noggles colors.Throws an error if the number of Noggles colors is already at the maximum (255).",
        "params": {
          "color": "The color to add."
        }
      },
      "addQuadrantPalette((string,string,string))": {
        "details": "Adds a new quadrant palette to the list of available quadrant palettes.Throws an error if the number of quadrant palettes is already at the maximum (255).",
        "params": {
          "palette": "The quadrant palette to add."
        }
      },
      "addRep((string,string))": {
        "details": "Adds a new rep to the list of available reps.Throws an error if the number of reps is already at the maximum (255).",
        "params": {
          "part": "The rep to add."
        }
      },
      "addShield((string,string))": {
        "details": "Adds a new shield to the list of available shields.Throws an error if the number of shields is already at the maximum (255).",
        "params": {
          "part": "The shield to add."
        }
      },
      "addSkill((string,string))": {
        "details": "Adds a new skill to the list of available skills.Throws an error if the number of skills is already at the maximum (255).",
        "params": {
          "part": "The skill to add."
        }
      },
      "addTrait((string,string))": {
        "details": "Adds a new trait to the list of available traits.Throws an error if the number of traits is already at the maximum (255).",
        "params": {
          "part": "The trait to add."
        }
      },
      "bgColorsCount()": {
        "details": "Returns the count of background colors",
        "returns": {
          "_0": "the count of background colors"
        }
      },
      "classesCount()": {
        "details": "Returns the count of classes",
        "returns": {
          "_0": "the count of classes"
        }
      },
      "crownsCount()": {
        "details": "Returns the count of crowns",
        "returns": {
          "_0": "the count of crowns"
        }
      },
      "doodadsCount()": {
        "details": "Returns the count of doodads",
        "returns": {
          "_0": "the count of doodads"
        }
      },
      "garlandsCount()": {
        "details": "Returns the count of garlands",
        "returns": {
          "_0": "the count of garlands"
        }
      },
      "getAllParts()": {
        "details": "Returns all available parts.",
        "returns": {
          "_0": "All available parts."
        }
      },
      "getBgColor(uint8)": {
        "details": "Returns the background color at the given index",
        "params": {
          "id": "the index of the background color to retrieve"
        },
        "returns": {
          "_0": "the background color at the given index"
        }
      },
      "getClass(uint8)": {
        "details": "Returns the image part with the given ID.",
        "params": {
          "id": "The ID of the image part to retrieve."
        },
        "returns": {
          "_0": "The ImagePart struct containing information about the image part."
        }
      },
      "getCrown(uint8)": {
        "details": "Returns the crown at the given index",
        "params": {
          "id": "the index of the crown to retrieve"
        },
        "returns": {
          "_0": "the crown at the given index"
        }
      },
      "getDoodad(uint8)": {
        "details": "Returns the doodad at the given index",
        "params": {
          "id": "the index of the doodad to retrieve"
        },
        "returns": {
          "_0": "the doodad at the given index"
        }
      },
      "getGarland(uint8)": {
        "details": "Returns the garland at the given index",
        "params": {
          "id": "the index of the garland to retrieve"
        },
        "returns": {
          "_0": "the garland at the given index"
        }
      },
      "getNogglesColor(uint8)": {
        "details": "Returns the noggles color at the given index",
        "params": {
          "id": "the index of the noggles color to retrieve"
        },
        "returns": {
          "_0": "the noggles color at the given index"
        }
      },
      "getQuadrantPalette(uint8)": {
        "details": "Returns the quadrant palette at the given index",
        "params": {
          "id": "the index of the quadrant palette to retrieve"
        },
        "returns": {
          "_0": "the quadrant palette at the given index"
        }
      },
      "getRep(uint8)": {
        "details": "Returns the rep at the given index",
        "params": {
          "id": "the index of the rep to retrieve"
        },
        "returns": {
          "_0": "the rep at the given index"
        }
      },
      "getShield(uint8)": {
        "details": "Returns the shield at the given index",
        "params": {
          "id": "the index of the shield to retrieve"
        },
        "returns": {
          "_0": "the shield at the given index"
        }
      },
      "getSkill(uint8)": {
        "details": "Returns the skill at the given index",
        "params": {
          "id": "the index of the skill to retrieve"
        },
        "returns": {
          "_0": "the skill at the given index"
        }
      },
      "getTrait(uint8)": {
        "details": "Returns the image trait with the given ID.",
        "params": {
          "id": "The ID of the image trait to retrieve."
        },
        "returns": {
          "_0": "The ImagePart struct containing information about the image trait."
        }
      },
      "lock()": {
        "details": "Locks the store from further additions"
      },
      "nogglesColorsCount()": {
        "details": "Returns the count of noggles colors",
        "returns": {
          "_0": "the count of noggles colors"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "quadrantPalettesCount()": {
        "details": "Returns the count of quadrant palettes",
        "returns": {
          "_0": "the count of quadrant palettes"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "repsCount()": {
        "details": "Returns the count of reps",
        "returns": {
          "_0": "the count of reps"
        }
      },
      "shieldsCount()": {
        "details": "Returns the count of shields",
        "returns": {
          "_0": "the count of shields"
        }
      },
      "skillsCount()": {
        "details": "Returns the count of skills",
        "returns": {
          "_0": "the count of skills"
        }
      },
      "traitsCount()": {
        "details": "Returns the count of traits",
        "returns": {
          "_0": "the count of traits"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "PartsStore contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addBgColor((string,string))": {
        "notice": "Only the contract owner can call this function."
      },
      "addClass((string,string))": {
        "notice": "Only the contract owner can call this function."
      },
      "addCrown((string,string))": {
        "notice": "Only the contract owner can call this function."
      },
      "addDoodad((string,string))": {
        "notice": "Only the contract owner can call this function."
      },
      "addGarland((string,string))": {
        "notice": "Only the contract owner can call this function."
      },
      "addNogglesColor((string,string))": {
        "notice": "Only the contract owner can call this function."
      },
      "addQuadrantPalette((string,string,string))": {
        "notice": "Only the contract owner can call this function."
      },
      "addRep((string,string))": {
        "notice": "Only the contract owner can call this function."
      },
      "addShield((string,string))": {
        "notice": "Only the contract owner can call this function."
      },
      "addSkill((string,string))": {
        "notice": "Only the contract owner can call this function."
      },
      "addTrait((string,string))": {
        "notice": "Only the contract owner can call this function."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/PartsStore.sol:PartsStore",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11190,
        "contract": "contracts/PartsStore.sol:PartsStore",
        "label": "bgColors",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(Color)11937_storage)dyn_storage"
      },
      {
        "astId": 11194,
        "contract": "contracts/PartsStore.sol:PartsStore",
        "label": "nogglesColors",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Color)11937_storage)dyn_storage"
      },
      {
        "astId": 11198,
        "contract": "contracts/PartsStore.sol:PartsStore",
        "label": "crowns",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(ImagePart)11949_storage)dyn_storage"
      },
      {
        "astId": 11202,
        "contract": "contracts/PartsStore.sol:PartsStore",
        "label": "doodads",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(ImagePart)11949_storage)dyn_storage"
      },
      {
        "astId": 11206,
        "contract": "contracts/PartsStore.sol:PartsStore",
        "label": "garlands",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(ImagePart)11949_storage)dyn_storage"
      },
      {
        "astId": 11210,
        "contract": "contracts/PartsStore.sol:PartsStore",
        "label": "shields",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(ImagePart)11949_storage)dyn_storage"
      },
      {
        "astId": 11214,
        "contract": "contracts/PartsStore.sol:PartsStore",
        "label": "quadrantPalettes",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_struct(Palette)11944_storage)dyn_storage"
      },
      {
        "astId": 11218,
        "contract": "contracts/PartsStore.sol:PartsStore",
        "label": "reps",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(ImagePart)11949_storage)dyn_storage"
      },
      {
        "astId": 11222,
        "contract": "contracts/PartsStore.sol:PartsStore",
        "label": "skills",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(ImagePart)11949_storage)dyn_storage"
      },
      {
        "astId": 11226,
        "contract": "contracts/PartsStore.sol:PartsStore",
        "label": "classes",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_struct(ImagePart)11949_storage)dyn_storage"
      },
      {
        "astId": 11230,
        "contract": "contracts/PartsStore.sol:PartsStore",
        "label": "traits",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_struct(ImagePart)11949_storage)dyn_storage"
      },
      {
        "astId": 11233,
        "contract": "contracts/PartsStore.sol:PartsStore",
        "label": "locked",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Color)11937_storage)dyn_storage": {
        "base": "t_struct(Color)11937_storage",
        "encoding": "dynamic_array",
        "label": "struct IPartsStore.Color[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ImagePart)11949_storage)dyn_storage": {
        "base": "t_struct(ImagePart)11949_storage",
        "encoding": "dynamic_array",
        "label": "struct IPartsStore.ImagePart[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Palette)11944_storage)dyn_storage": {
        "base": "t_struct(Palette)11944_storage",
        "encoding": "dynamic_array",
        "label": "struct IPartsStore.Palette[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Color)11937_storage": {
        "encoding": "inplace",
        "label": "struct IPartsStore.Color",
        "members": [
          {
            "astId": 11934,
            "contract": "contracts/PartsStore.sol:PartsStore",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 11936,
            "contract": "contracts/PartsStore.sol:PartsStore",
            "label": "color",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ImagePart)11949_storage": {
        "encoding": "inplace",
        "label": "struct IPartsStore.ImagePart",
        "members": [
          {
            "astId": 11946,
            "contract": "contracts/PartsStore.sol:PartsStore",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 11948,
            "contract": "contracts/PartsStore.sol:PartsStore",
            "label": "svg",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Palette)11944_storage": {
        "encoding": "inplace",
        "label": "struct IPartsStore.Palette",
        "members": [
          {
            "astId": 11939,
            "contract": "contracts/PartsStore.sol:PartsStore",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 11941,
            "contract": "contracts/PartsStore.sol:PartsStore",
            "label": "primary",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 11943,
            "contract": "contracts/PartsStore.sol:PartsStore",
            "label": "secondary",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      }
    }
  }
}