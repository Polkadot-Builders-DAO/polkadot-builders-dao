{
  "address": "0x8162876a0bD2bE9d48a2023d20d5955d51eC055D",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "color",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.Color",
          "name": "color",
          "type": "tuple"
        }
      ],
      "name": "addBgColor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "svg",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.ImagePart",
          "name": "part",
          "type": "tuple"
        }
      ],
      "name": "addClass",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "svg",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.ImagePart",
          "name": "part",
          "type": "tuple"
        }
      ],
      "name": "addCrown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "svg",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.ImagePart",
          "name": "part",
          "type": "tuple"
        }
      ],
      "name": "addDoodad",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "svg",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.ImagePart",
          "name": "part",
          "type": "tuple"
        }
      ],
      "name": "addGarland",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "color",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.Color",
          "name": "color",
          "type": "tuple"
        }
      ],
      "name": "addNogglesColor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "primary",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "secondary",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.Palette",
          "name": "palette",
          "type": "tuple"
        }
      ],
      "name": "addQuadrantPalette",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "svg",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.ImagePart",
          "name": "part",
          "type": "tuple"
        }
      ],
      "name": "addRep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "svg",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.ImagePart",
          "name": "part",
          "type": "tuple"
        }
      ],
      "name": "addShield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "svg",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.ImagePart",
          "name": "part",
          "type": "tuple"
        }
      ],
      "name": "addSkill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "svg",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.ImagePart",
          "name": "part",
          "type": "tuple"
        }
      ],
      "name": "addTrait",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bgColors",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "color",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bgColorsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "classes",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "svg",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "classesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "crowns",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "svg",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crownsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "doodads",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "svg",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "doodadsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "garlands",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "svg",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "garlandsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllParts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string[]",
              "name": "bgColors",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "nogglesColors",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "crowns",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "doodads",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "garlands",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "shields",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "quadrantPalettes",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "reps",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "skills",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "classes",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "traits",
              "type": "string[]"
            }
          ],
          "internalType": "struct IPartsStore.AllParts",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        }
      ],
      "name": "getBgColor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "color",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.Color",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        }
      ],
      "name": "getClass",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "svg",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.ImagePart",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        }
      ],
      "name": "getCrown",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "svg",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.ImagePart",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        }
      ],
      "name": "getDoodad",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "svg",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.ImagePart",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        }
      ],
      "name": "getGarland",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "svg",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.ImagePart",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        }
      ],
      "name": "getNogglesColor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "color",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.Color",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        }
      ],
      "name": "getQuadrantPalette",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "primary",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "secondary",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.Palette",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        }
      ],
      "name": "getRep",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "svg",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.ImagePart",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        }
      ],
      "name": "getShield",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "svg",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.ImagePart",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        }
      ],
      "name": "getSkill",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "svg",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.ImagePart",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        }
      ],
      "name": "getTrait",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "svg",
              "type": "string"
            }
          ],
          "internalType": "struct IPartsStore.ImagePart",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "locked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nogglesColors",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "color",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nogglesColorsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "quadrantPalettes",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "primary",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "secondary",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quadrantPalettesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reps",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "svg",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "shields",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "svg",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shieldsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "skills",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "svg",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "skillsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "traits",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "svg",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traitsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf77a4d0625fd9067b7576e6adbd524355d3782ed07ec1d43dcb840109938fd00",
  "receipt": {
    "to": null,
    "from": "0x6bdFDC29A4bd39Bf97D4C75c7f03b9dcbb9374af",
    "contractAddress": "0x8162876a0bD2bE9d48a2023d20d5955d51eC055D",
    "transactionIndex": 0,
    "gasUsed": "2928701",
    "logsBloom": "0x
    "blockHash": "0xd272c18edfd6631d4ba7c30473edb25407c0a05850b94aaa7d4a504652fc999e",
    "transactionHash": "0xf77a4d0625fd9067b7576e6adbd524355d3782ed07ec1d43dcb840109938fd00",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4065851,
        "transactionHash": "0xf77a4d0625fd9067b7576e6adbd524355d3782ed07ec1d43dcb840109938fd00",
        "address": "0x8162876a0bD2bE9d48a2023d20d5955d51eC055D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006bdfdc29a4bd39bf97d4c75c7f03b9dcbb9374af"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd272c18edfd6631d4ba7c30473edb25407c0a05850b94aaa7d4a504652fc999e"
      }
    ],
    "blockNumber": 4065851,
    "cumulativeGasUsed": "2928701",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "84ca75526b28510547d3ce718e5855d8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.Color\",\"name\":\"color\",\"type\":\"tuple\"}],\"name\":\"addBgColor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"part\",\"type\":\"tuple\"}],\"name\":\"addClass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"part\",\"type\":\"tuple\"}],\"name\":\"addCrown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"part\",\"type\":\"tuple\"}],\"name\":\"addDoodad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"part\",\"type\":\"tuple\"}],\"name\":\"addGarland\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.Color\",\"name\":\"color\",\"type\":\"tuple\"}],\"name\":\"addNogglesColor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"primary\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"secondary\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.Palette\",\"name\":\"palette\",\"type\":\"tuple\"}],\"name\":\"addQuadrantPalette\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"part\",\"type\":\"tuple\"}],\"name\":\"addRep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"part\",\"type\":\"tuple\"}],\"name\":\"addShield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"part\",\"type\":\"tuple\"}],\"name\":\"addSkill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"part\",\"type\":\"tuple\"}],\"name\":\"addTrait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bgColors\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bgColorsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"classes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"classesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"crowns\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crownsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"doodads\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doodadsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"garlands\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"garlandsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllParts\",\"outputs\":[{\"components\":[{\"internalType\":\"string[]\",\"name\":\"bgColors\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"nogglesColors\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"crowns\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"doodads\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"garlands\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"shields\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"quadrantPalettes\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"reps\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"skills\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"classes\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"traits\",\"type\":\"string[]\"}],\"internalType\":\"struct IPartsStore.AllParts\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getBgColor\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.Color\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getClass\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getCrown\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getDoodad\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getGarland\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getNogglesColor\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.Color\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getQuadrantPalette\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"primary\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"secondary\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.Palette\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getRep\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getShield\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getSkill\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"}],\"name\":\"getTrait\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nogglesColors\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nogglesColorsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quadrantPalettes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"primary\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"secondary\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quadrantPalettesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reps\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shields\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shieldsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"skills\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skillsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"traits\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traitsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract for managing various image parts of Polkadot Builders Crests such as colors, image parts, and palettes\",\"kind\":\"dev\",\"methods\":{\"addBgColor((string,string))\":{\"details\":\"Adds a new background color to the list of available background colors.Throws an error if the number of background colors is already at the maximum (255).\",\"params\":{\"color\":\"The color to add.\"}},\"addClass((string,string))\":{\"details\":\"Adds a new class to the list of available classes.Throws an error if the number of classes is already at the maximum (255).\",\"params\":{\"part\":\"The class to add.\"}},\"addCrown((string,string))\":{\"details\":\"Adds a new crown to the list of available crowns.Throws an error if the number of crowns is already at the maximum (255).\",\"params\":{\"part\":\"The crown to add.\"}},\"addDoodad((string,string))\":{\"details\":\"Adds a new doodad to the list of available doodads.Throws an error if the number of doodads is already at the maximum (255).\",\"params\":{\"part\":\"The doodad to add.\"}},\"addGarland((string,string))\":{\"details\":\"Adds a new garland to the list of available garlands.Throws an error if the number of garlands is already at the maximum (255).\",\"params\":{\"part\":\"The garland to add.\"}},\"addNogglesColor((string,string))\":{\"details\":\"Adds a new Noggles color to the list of available Noggles colors.Throws an error if the number of Noggles colors is already at the maximum (255).\",\"params\":{\"color\":\"The color to add.\"}},\"addQuadrantPalette((string,string,string))\":{\"details\":\"Adds a new quadrant palette to the list of available quadrant palettes.Throws an error if the number of quadrant palettes is already at the maximum (255).\",\"params\":{\"palette\":\"The quadrant palette to add.\"}},\"addRep((string,string))\":{\"details\":\"Adds a new rep to the list of available reps.Throws an error if the number of reps is already at the maximum (255).\",\"params\":{\"part\":\"The rep to add.\"}},\"addShield((string,string))\":{\"details\":\"Adds a new shield to the list of available shields.Throws an error if the number of shields is already at the maximum (255).\",\"params\":{\"part\":\"The shield to add.\"}},\"addSkill((string,string))\":{\"details\":\"Adds a new skill to the list of available skills.Throws an error if the number of skills is already at the maximum (255).\",\"params\":{\"part\":\"The skill to add.\"}},\"addTrait((string,string))\":{\"details\":\"Adds a new trait to the list of available traits.Throws an error if the number of traits is already at the maximum (255).\",\"params\":{\"part\":\"The trait to add.\"}},\"bgColorsCount()\":{\"details\":\"Returns the count of background colors\",\"returns\":{\"_0\":\"the count of background colors\"}},\"classesCount()\":{\"details\":\"Returns the count of classes\",\"returns\":{\"_0\":\"the count of classes\"}},\"crownsCount()\":{\"details\":\"Returns the count of crowns\",\"returns\":{\"_0\":\"the count of crowns\"}},\"doodadsCount()\":{\"details\":\"Returns the count of doodads\",\"returns\":{\"_0\":\"the count of doodads\"}},\"garlandsCount()\":{\"details\":\"Returns the count of garlands\",\"returns\":{\"_0\":\"the count of garlands\"}},\"getAllParts()\":{\"details\":\"Returns all available parts.\",\"returns\":{\"_0\":\"All available parts.\"}},\"getBgColor(uint8)\":{\"details\":\"Returns the background color at the given index\",\"params\":{\"id\":\"the index of the background color to retrieve\"},\"returns\":{\"_0\":\"the background color at the given index\"}},\"getClass(uint8)\":{\"details\":\"Returns the image part with the given ID.\",\"params\":{\"id\":\"The ID of the image part to retrieve.\"},\"returns\":{\"_0\":\"The ImagePart struct containing information about the image part.\"}},\"getCrown(uint8)\":{\"details\":\"Returns the crown at the given index\",\"params\":{\"id\":\"the index of the crown to retrieve\"},\"returns\":{\"_0\":\"the crown at the given index\"}},\"getDoodad(uint8)\":{\"details\":\"Returns the doodad at the given index\",\"params\":{\"id\":\"the index of the doodad to retrieve\"},\"returns\":{\"_0\":\"the doodad at the given index\"}},\"getGarland(uint8)\":{\"details\":\"Returns the garland at the given index\",\"params\":{\"id\":\"the index of the garland to retrieve\"},\"returns\":{\"_0\":\"the garland at the given index\"}},\"getNogglesColor(uint8)\":{\"details\":\"Returns the noggles color at the given index\",\"params\":{\"id\":\"the index of the noggles color to retrieve\"},\"returns\":{\"_0\":\"the noggles color at the given index\"}},\"getQuadrantPalette(uint8)\":{\"details\":\"Returns the quadrant palette at the given index\",\"params\":{\"id\":\"the index of the quadrant palette to retrieve\"},\"returns\":{\"_0\":\"the quadrant palette at the given index\"}},\"getRep(uint8)\":{\"details\":\"Returns the rep at the given index\",\"params\":{\"id\":\"the index of the rep to retrieve\"},\"returns\":{\"_0\":\"the rep at the given index\"}},\"getShield(uint8)\":{\"details\":\"Returns the shield at the given index\",\"params\":{\"id\":\"the index of the shield to retrieve\"},\"returns\":{\"_0\":\"the shield at the given index\"}},\"getSkill(uint8)\":{\"details\":\"Returns the skill at the given index\",\"params\":{\"id\":\"the index of the skill to retrieve\"},\"returns\":{\"_0\":\"the skill at the given index\"}},\"getTrait(uint8)\":{\"details\":\"Returns the image trait with the given ID.\",\"params\":{\"id\":\"The ID of the image trait to retrieve.\"},\"returns\":{\"_0\":\"The ImagePart struct containing information about the image trait.\"}},\"lock()\":{\"details\":\"Locks the store from further additions\"},\"nogglesColorsCount()\":{\"details\":\"Returns the count of noggles colors\",\"returns\":{\"_0\":\"the count of noggles colors\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"quadrantPalettesCount()\":{\"details\":\"Returns the count of quadrant palettes\",\"returns\":{\"_0\":\"the count of quadrant palettes\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"repsCount()\":{\"details\":\"Returns the count of reps\",\"returns\":{\"_0\":\"the count of reps\"}},\"shieldsCount()\":{\"details\":\"Returns the count of shields\",\"returns\":{\"_0\":\"the count of shields\"}},\"skillsCount()\":{\"details\":\"Returns the count of skills\",\"returns\":{\"_0\":\"the count of skills\"}},\"traitsCount()\":{\"details\":\"Returns the count of traits\",\"returns\":{\"_0\":\"the count of traits\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"PartsStore contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addBgColor((string,string))\":{\"notice\":\"Only the contract owner can call this function.\"},\"addClass((string,string))\":{\"notice\":\"Only the contract owner can call this function.\"},\"addCrown((string,string))\":{\"notice\":\"Only the contract owner can call this function.\"},\"addDoodad((string,string))\":{\"notice\":\"Only the contract owner can call this function.\"},\"addGarland((string,string))\":{\"notice\":\"Only the contract owner can call this function.\"},\"addNogglesColor((string,string))\":{\"notice\":\"Only the contract owner can call this function.\"},\"addQuadrantPalette((string,string,string))\":{\"notice\":\"Only the contract owner can call this function.\"},\"addRep((string,string))\":{\"notice\":\"Only the contract owner can call this function.\"},\"addShield((string,string))\":{\"notice\":\"Only the contract owner can call this function.\"},\"addSkill((string,string))\":{\"notice\":\"Only the contract owner can call this function.\"},\"addTrait((string,string))\":{\"notice\":\"Only the contract owner can call this function.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PartsStore.sol\":\"PartsStore\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/PartsStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IPartsStore} from \\\"./interfaces/IPartsStore.sol\\\";\\n\\n/**\\n * @title PartsStore contract\\n * @dev Contract for managing various image parts of Polkadot Builders Crests such as colors, image parts, and palettes\\n */\\ncontract PartsStore is IPartsStore, Ownable {\\n    Color[] public bgColors;\\n    Color[] public nogglesColors;\\n    ImagePart[] public crowns;\\n    ImagePart[] public doodads;\\n    ImagePart[] public garlands;\\n    ImagePart[] public shields;\\n    Palette[] public quadrantPalettes;\\n    ImagePart[] public reps;\\n    ImagePart[] public skills;\\n    ImagePart[] public classes;\\n    ImagePart[] public traits;\\n\\n    bool public locked = false;\\n\\n    /**\\n     * @dev Modifier to check if the contract is locked\\n     */\\n    modifier onlyUnlocked() {\\n        require(!locked, \\\"PartsStore: contract is locked\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the store from further additions\\n     */\\n    function lock() external onlyOwner {\\n        locked = true;\\n    }\\n\\n    /**\\n     * @dev Returns the count of background colors\\n     * @return the count of background colors\\n     */\\n    function bgColorsCount() external view returns (uint256) {\\n        return bgColors.length;\\n    }\\n\\n    /**\\n     * @dev Returns the count of noggles colors\\n     * @return the count of noggles colors\\n     */\\n    function nogglesColorsCount() external view returns (uint256) {\\n        return nogglesColors.length;\\n    }\\n\\n    /**\\n     * @dev Returns the count of crowns\\n     * @return the count of crowns\\n     */\\n    function crownsCount() external view returns (uint256) {\\n        return crowns.length;\\n    }\\n\\n    /**\\n     * @dev Returns the count of doodads\\n     * @return the count of doodads\\n     */\\n    function doodadsCount() external view returns (uint256) {\\n        return doodads.length;\\n    }\\n\\n    /**\\n     * @dev Returns the count of garlands\\n     * @return the count of garlands\\n     */\\n    function garlandsCount() external view returns (uint256) {\\n        return garlands.length;\\n    }\\n\\n    /**\\n     * @dev Returns the count of shields\\n     * @return the count of shields\\n     */\\n    function shieldsCount() external view returns (uint256) {\\n        return shields.length;\\n    }\\n\\n    /**\\n     * @dev Returns the count of quadrant palettes\\n     * @return the count of quadrant palettes\\n     */\\n    function quadrantPalettesCount() external view returns (uint256) {\\n        return quadrantPalettes.length;\\n    }\\n\\n    /**\\n     * @dev Returns the count of reps\\n     * @return the count of reps\\n     */\\n    function repsCount() external view returns (uint256) {\\n        return reps.length;\\n    }\\n\\n    /**\\n     * @dev Returns the count of skills\\n     * @return the count of skills\\n     */\\n    function skillsCount() external view returns (uint256) {\\n        return skills.length;\\n    }\\n\\n    /**\\n     * @dev Returns the count of classes\\n     * @return the count of classes\\n     */\\n    function classesCount() external view returns (uint256) {\\n        return classes.length;\\n    }\\n\\n    /**\\n     * @dev Returns the count of traits\\n     * @return the count of traits\\n     */\\n    function traitsCount() external view returns (uint256) {\\n        return traits.length;\\n    }\\n\\n    /**\\n     * @dev Returns the background color at the given index\\n     * @param id the index of the background color to retrieve\\n     * @return the background color at the given index\\n     */\\n    function getBgColor(uint8 id) external view returns (Color memory) {\\n        return bgColors[id];\\n    }\\n\\n    /**\\n     * @dev Returns the noggles color at the given index\\n     * @param id the index of the noggles color to retrieve\\n     * @return the noggles color at the given index\\n     */\\n    function getNogglesColor(uint8 id) external view returns (Color memory) {\\n        return nogglesColors[id];\\n    }\\n\\n    /**\\n     * @dev Returns the crown at the given index\\n     * @param id the index of the crown to retrieve\\n     * @return the crown at the given index\\n     */\\n    function getCrown(uint8 id) external view returns (ImagePart memory) {\\n        return crowns[id];\\n    }\\n\\n    /**\\n     * @dev Returns the doodad at the given index\\n     * @param id the index of the doodad to retrieve\\n     * @return the doodad at the given index\\n     */\\n    function getDoodad(uint8 id) external view returns (ImagePart memory) {\\n        return doodads[id];\\n    }\\n\\n    /**\\n     * @dev Returns the garland at the given index\\n     * @param id the index of the garland to retrieve\\n     * @return the garland at the given index\\n     */\\n    function getGarland(uint8 id) external view returns (ImagePart memory) {\\n        return garlands[id];\\n    }\\n\\n    /**\\n     * @dev Returns the shield at the given index\\n     * @param id the index of the shield to retrieve\\n     * @return the shield at the given index\\n     */\\n    function getShield(uint8 id) external view returns (ImagePart memory) {\\n        return shields[id];\\n    }\\n\\n    /**\\n     * @dev Returns the quadrant palette at the given index\\n     * @param id the index of the quadrant palette to retrieve\\n     * @return the quadrant palette at the given index\\n     */\\n    function getQuadrantPalette(uint8 id) external view returns (Palette memory) {\\n        return quadrantPalettes[id];\\n    }\\n\\n    /**\\n     * @dev Returns the rep at the given index\\n     * @param id the index of the rep to retrieve\\n     * @return the rep at the given index\\n     */\\n    function getRep(uint8 id) external view returns (ImagePart memory) {\\n        return reps[id];\\n    }\\n\\n    /**\\n     * @dev Returns the skill at the given index\\n     * @param id the index of the skill to retrieve\\n     * @return the skill at the given index\\n     */\\n    function getSkill(uint8 id) external view returns (ImagePart memory) {\\n        return skills[id];\\n    }\\n\\n    /**\\n     * @dev Returns the image part with the given ID.\\n     * @param id The ID of the image part to retrieve.\\n     * @return The ImagePart struct containing information about the image part.\\n     */\\n    function getClass(uint8 id) external view returns (ImagePart memory) {\\n        return classes[id];\\n    }\\n\\n    /**\\n     * @dev Returns the image trait with the given ID.\\n     * @param id The ID of the image trait to retrieve.\\n     * @return The ImagePart struct containing information about the image trait.\\n     */\\n    function getTrait(uint8 id) external view returns (ImagePart memory) {\\n        return traits[id];\\n    }\\n\\n    /**\\n     * @dev Adds a new background color to the list of available background colors.\\n     * @param color The color to add.\\n     * @notice Only the contract owner can call this function.\\n     * @dev Throws an error if the number of background colors is already at the maximum (255).\\n     */\\n    function addBgColor(Color calldata color) external onlyOwner onlyUnlocked {\\n        bgColors.push(color);\\n    }\\n\\n    /**\\n     * @dev Adds a new Noggles color to the list of available Noggles colors.\\n     * @param color The color to add.\\n     * @notice Only the contract owner can call this function.\\n     * @dev Throws an error if the number of Noggles colors is already at the maximum (255).\\n     */\\n    function addNogglesColor(Color calldata color) external onlyOwner onlyUnlocked {\\n        nogglesColors.push(color);\\n    }\\n\\n    /**\\n     * @dev Adds a new crown to the list of available crowns.\\n     * @param part The crown to add.\\n     * @notice Only the contract owner can call this function.\\n     * @dev Throws an error if the number of crowns is already at the maximum (255).\\n     */\\n    function addCrown(ImagePart calldata part) external onlyOwner onlyUnlocked {\\n        crowns.push(part);\\n    }\\n\\n    /**\\n     * @dev Adds a new doodad to the list of available doodads.\\n     * @param part The doodad to add.\\n     * @notice Only the contract owner can call this function.\\n     * @dev Throws an error if the number of doodads is already at the maximum (255).\\n     */\\n    function addDoodad(ImagePart calldata part) external onlyOwner onlyUnlocked {\\n        doodads.push(part);\\n    }\\n\\n    /**\\n     * @dev Adds a new garland to the list of available garlands.\\n     * @param part The garland to add.\\n     * @notice Only the contract owner can call this function.\\n     * @dev Throws an error if the number of garlands is already at the maximum (255).\\n     */\\n    function addGarland(ImagePart calldata part) external onlyOwner onlyUnlocked {\\n        garlands.push(part);\\n    }\\n\\n    /**\\n     * @dev Adds a new shield to the list of available shields.\\n     * @param part The shield to add.\\n     * @notice Only the contract owner can call this function.\\n     * @dev Throws an error if the number of shields is already at the maximum (255).\\n     */\\n    function addShield(ImagePart calldata part) external onlyOwner onlyUnlocked {\\n        shields.push(part);\\n    }\\n\\n    /**\\n     * @dev Adds a new quadrant palette to the list of available quadrant palettes.\\n     * @param palette The quadrant palette to add.\\n     * @notice Only the contract owner can call this function.\\n     * @dev Throws an error if the number of quadrant palettes is already at the maximum (255).\\n     */\\n    function addQuadrantPalette(Palette calldata palette) external onlyOwner onlyUnlocked {\\n        quadrantPalettes.push(palette);\\n    }\\n\\n    /**\\n     * @dev Adds a new rep to the list of available reps.\\n     * @param part The rep to add.\\n     * @notice Only the contract owner can call this function.\\n     * @dev Throws an error if the number of reps is already at the maximum (255).\\n     */\\n    function addRep(ImagePart calldata part) external onlyOwner onlyUnlocked {\\n        reps.push(part);\\n    }\\n\\n    /**\\n     * @dev Adds a new skill to the list of available skills.\\n     * @param part The skill to add.\\n     * @notice Only the contract owner can call this function.\\n     * @dev Throws an error if the number of skills is already at the maximum (255).\\n     */\\n    function addSkill(ImagePart calldata part) external onlyOwner onlyUnlocked {\\n        skills.push(part);\\n    }\\n\\n    /**\\n     * @dev Adds a new class to the list of available classes.\\n     * @param part The class to add.\\n     * @notice Only the contract owner can call this function.\\n     * @dev Throws an error if the number of classes is already at the maximum (255).\\n     */\\n    function addClass(ImagePart calldata part) external onlyOwner onlyUnlocked {\\n        classes.push(part);\\n    }\\n\\n    /**\\n     * @dev Adds a new trait to the list of available traits.\\n     * @param part The trait to add.\\n     * @notice Only the contract owner can call this function.\\n     * @dev Throws an error if the number of traits is already at the maximum (255).\\n     */\\n    function addTrait(ImagePart calldata part) external onlyOwner onlyUnlocked {\\n        traits.push(part);\\n    }\\n\\n    /**\\n     * @dev Returns the names of available colors.\\n     * @return The names of available colors.\\n     */\\n    function getColorNames(Color[] memory colors) private pure returns (string[] memory) {\\n        string[] memory names = new string[](colors.length);\\n        for (uint256 i = 0; i < colors.length; i++) {\\n            names[i] = colors[i].name;\\n        }\\n        return names;\\n    }\\n\\n    /**\\n     * @dev Returns the names of available color palettes.\\n     * @return The names of available color palettess.\\n     */\\n    function getPaletteNames(Palette[] memory palettes) private pure returns (string[] memory) {\\n        string[] memory names = new string[](palettes.length);\\n        for (uint256 i = 0; i < palettes.length; i++) {\\n            names[i] = palettes[i].name;\\n        }\\n        return names;\\n    }\\n\\n    /**\\n     * @dev Returns the names of available image parts.\\n     * @return The names of available image parts.\\n     */\\n    function getImagePartNames(ImagePart[] memory parts) private pure returns (string[] memory) {\\n        string[] memory names = new string[](parts.length);\\n        for (uint256 i = 0; i < parts.length; i++) {\\n            names[i] = parts[i].name;\\n        }\\n        return names;\\n    }\\n\\n    /**\\n     * @dev Returns all available parts.\\n     * @return All available parts.\\n     */\\n    function getAllParts() external view returns (AllParts memory) {\\n        return\\n            AllParts(\\n                getColorNames(bgColors),\\n                getColorNames(nogglesColors),\\n                getImagePartNames(crowns),\\n                getImagePartNames(doodads),\\n                getImagePartNames(garlands),\\n                getImagePartNames(shields),\\n                getPaletteNames(quadrantPalettes),\\n                getImagePartNames(reps),\\n                getImagePartNames(skills),\\n                getImagePartNames(classes),\\n                getImagePartNames(traits)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x62ffe0cef46063b5c0c4770ba2b766edfca13847d39fdcb22e4398b5d6d25a55\",\"license\":\"MIT\"},\"contracts/interfaces/IPartsStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\ninterface IPartsStore {\\n    struct Color {\\n        string name;\\n        string color;\\n    }\\n\\n    struct Palette {\\n        string name;\\n        string primary;\\n        string secondary;\\n    }\\n\\n    struct ImagePart {\\n        string name;\\n        string svg;\\n    }\\n\\n    struct AllParts {\\n        string[] bgColors;\\n        string[] nogglesColors;\\n        string[] crowns;\\n        string[] doodads;\\n        string[] garlands;\\n        string[] shields;\\n        string[] quadrantPalettes;\\n        string[] reps;\\n        string[] skills;\\n        string[] classes;\\n        string[] traits;\\n    }\\n\\n    function bgColorsCount() external view returns (uint256);\\n\\n    function nogglesColorsCount() external view returns (uint256);\\n\\n    function crownsCount() external view returns (uint256);\\n\\n    function doodadsCount() external view returns (uint256);\\n\\n    function garlandsCount() external view returns (uint256);\\n\\n    function shieldsCount() external view returns (uint256);\\n\\n    function quadrantPalettesCount() external view returns (uint256);\\n\\n    function repsCount() external view returns (uint256);\\n\\n    function skillsCount() external view returns (uint256);\\n\\n    function classesCount() external view returns (uint256);\\n\\n    function traitsCount() external view returns (uint256);\\n\\n    function getBgColor(uint8 id) external view returns (Color memory);\\n\\n    function getNogglesColor(uint8 id) external view returns (Color memory);\\n\\n    function getCrown(uint8 id) external view returns (ImagePart memory);\\n\\n    function getDoodad(uint8 id) external view returns (ImagePart memory);\\n\\n    function getGarland(uint8 id) external view returns (ImagePart memory);\\n\\n    function getShield(uint8 id) external view returns (ImagePart memory);\\n\\n    function getQuadrantPalette(uint8 id) external view returns (Palette memory);\\n\\n    function getRep(uint8 id) external view returns (ImagePart memory);\\n\\n    function getSkill(uint8 id) external view returns (ImagePart memory);\\n\\n    function getClass(uint8 id) external view returns (ImagePart memory);\\n\\n    function getTrait(uint8 id) external view returns (ImagePart memory);\\n\\n    function addBgColor(Color calldata color) external;\\n\\n    function addNogglesColor(Color calldata color) external;\\n\\n    function addCrown(ImagePart calldata part) external;\\n\\n    function addDoodad(ImagePart calldata part) external;\\n\\n    function addGarland(ImagePart calldata part) external;\\n\\n    function addShield(ImagePart calldata part) external;\\n\\n    function addQuadrantPalette(Palette calldata palette) external;\\n\\n    function addRep(ImagePart calldata part) external;\\n\\n    function addSkill(ImagePart calldata part) external;\\n\\n    function addClass(ImagePart calldata part) external;\\n\\n    function addTrait(ImagePart calldata part) external;\\n\\n    function getAllParts() external returns (AllParts memory);\\n}\\n\",\"keccak256\":\"0x2c4900a6007078e078250e3988a4970f43caf889a629c0200d093f32ac163409\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600c805460ff191690553480156200001b57600080fd5b5062000027336200002d565b6200007d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61338c806200008d6000396000f3fe608060405234801561001057600080fd5b50600436106103365760003560e01c80638da5cb5b116101b2578063d2c957e9116100f9578063e703c186116100a2578063f2fde38b1161007c578063f2fde38b1461068e578063f83d08ba146106a1578063f862ab1b146106a9578063f87b5d6a146106bc57600080fd5b8063e703c18614610660578063e986366414610668578063ee9a808f1461067b57600080fd5b8063e2c24605116100d3578063e2c2460514610627578063e3ec8b981461063a578063e465b0551461064d57600080fd5b8063d2c957e9146105f9578063d8a4234d1461060c578063ddee33b51461061f57600080fd5b8063b09c691c1161015b578063ceed017511610135578063ceed0175146105a7578063cf309012146105ba578063d19893c3146105d757600080fd5b8063b09c691c14610579578063b122c74f1461058c578063c80adbdb1461059457600080fd5b80639df263dd1161018c5780639df263dd1461053e5780639f76a1e514610553578063abb26ac41461056657600080fd5b80638da5cb5b146104fb5780639d1f6589146105235780639da775d01461052b57600080fd5b80636f25dcd51161028157806384a5d1c61161022a57806387f307891161020457806387f30789146104c55780638bb5ad96146104cd5780638ce33c25146104e05780638d915d1f146104f357600080fd5b806384a5d1c614610497578063872f5b4c1461049f57806387dddae5146104b257600080fd5b80637cca159e1161025b5780637cca159e1461046957806380942bfe14610471578063817dbe9f1461048457600080fd5b80636f25dcd514610446578063715018a6146104595780637576bf871461046157600080fd5b80633d0cf8cb116102e35780635e39eee0116102bd5780635e39eee01461040d578063621dc7361461042057806365c1b3f11461043357600080fd5b80633d0cf8cb146103d257806350d15fbe146103e75780635bca69ec146103fa57600080fd5b80632d72225b116103145780632d72225b146103975780632f6171cb146103b8578063320d7b4b146103ca57600080fd5b8063077e69cc1461033b57806315c507db146103645780632c0d2de614610384575b600080fd5b61034e610349366004612b09565b6106cf565b60405161035b9190612b79565b60405180910390f35b610377610372366004612b09565b6108df565b60405161035b9190612c08565b610377610392366004612b09565b6109c4565b6103aa6103a5366004612c1b565b6109ee565b60405161035b929190612c34565b6007545b60405190815260200161035b565b600a546103bc565b6103e56103e0366004612c71565b610b32565b005b6103aa6103f5366004612c1b565b610bd7565b6103aa610408366004612c1b565b610be7565b61037761041b366004612b09565b610bf7565b6103aa61042e366004612c1b565b610c21565b6103e5610441366004612cae565b610c31565b610377610454366004612b09565b610ccd565b6103e5610cf7565b6006546103bc565b6002546103bc565b6103e561047f366004612c71565b610d0b565b6103aa610492366004612c1b565b610da7565b6009546103bc565b6103e56104ad366004612c71565b610db7565b6103776104c0366004612b09565b610e53565b6001546103bc565b6103776104db366004612b09565b610e7d565b6103e56104ee366004612c71565b610ea7565b600b546103bc565b60005460405173ffffffffffffffffffffffffffffffffffffffff909116815260200161035b565b6004546103bc565b6103e5610539366004612c71565b610f43565b610546610fdf565b60405161035b9190612d3e565b6103e5610561366004612c71565b612177565b6103e5610574366004612c71565b612213565b6103e5610587366004612c71565b6122af565b6008546103bc565b6103aa6105a2366004612c1b565b61234b565b6103aa6105b5366004612c1b565b61235b565b600c546105c79060ff1681565b604051901515815260200161035b565b6105ea6105e5366004612c1b565b61236b565b60405161035b93929190612e8f565b6103e5610607366004612c71565b61253d565b61037761061a366004612b09565b6125d6565b6005546103bc565b6103aa610635366004612c1b565b612600565b610377610648366004612b09565b612610565b61037761065b366004612b09565b61263a565b6003546103bc565b6103e5610676366004612c71565b612664565b6103aa610689366004612c1b565b612700565b6103e561069c366004612ec8565b612710565b6103e56127ad565b6103aa6106b7366004612c1b565b6127e2565b6103776106ca366004612b09565b6127f2565b6106f360405180606001604052806060815260200160608152602001606081525090565b60078260ff168154811061070957610709612efe565b906000526020600020906003020160405180606001604052908160008201805461073290612f2d565b80601f016020809104026020016040519081016040528092919081815260200182805461075e90612f2d565b80156107ab5780601f10610780576101008083540402835291602001916107ab565b820191906000526020600020905b81548152906001019060200180831161078e57829003601f168201915b505050505081526020016001820180546107c490612f2d565b80601f01602080910402602001604051908101604052809291908181526020018280546107f090612f2d565b801561083d5780601f106108125761010080835404028352916020019161083d565b820191906000526020600020905b81548152906001019060200180831161082057829003601f168201915b5050505050815260200160028201805461085690612f2d565b80601f016020809104026020016040519081016040528092919081815260200182805461088290612f2d565b80156108cf5780601f106108a4576101008083540402835291602001916108cf565b820191906000526020600020905b8154815290600101906020018083116108b257829003601f168201915b5050505050815250509050919050565b604080518082019091526060808252602082015260018260ff168154811061090957610909612efe565b906000526020600020906002020160405180604001604052908160008201805461093290612f2d565b80601f016020809104026020016040519081016040528092919081815260200182805461095e90612f2d565b80156109ab5780601f10610980576101008083540402835291602001916109ab565b820191906000526020600020905b81548152906001019060200180831161098e57829003601f168201915b5050505050815260200160018201805461085690612f2d565b604080518082019091526060808252602082015260028260ff168154811061090957610909612efe565b600b81815481106109fe57600080fd5b9060005260206000209060020201600091509050806000018054610a2190612f2d565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4d90612f2d565b8015610a9a5780601f10610a6f57610100808354040283529160200191610a9a565b820191906000526020600020905b815481529060010190602001808311610a7d57829003601f168201915b505050505090806001018054610aaf90612f2d565b80601f0160208091040260200160405190810160405280929190818152602001828054610adb90612f2d565b8015610b285780601f10610afd57610100808354040283529160200191610b28565b820191906000526020600020905b815481529060010190602001808311610b0b57829003601f168201915b5050505050905082565b610b3a61281c565b600c5460ff1615610b925760405162461bcd60e51b815260206004820152601e60248201527f506172747353746f72653a20636f6e7472616374206973206c6f636b6564000060448201526064015b60405180910390fd5b60018054808201825560009190915281906002027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601610bd2828261320d565b505050565b600981815481106109fe57600080fd5b600881815481106109fe57600080fd5b604080518082019091526060808252602082015260048260ff168154811061090957610909612efe565b600581815481106109fe57600080fd5b610c3961281c565b600c5460ff1615610c8c5760405162461bcd60e51b815260206004820152601e60248201527f506172747353746f72653a20636f6e7472616374206973206c6f636b656400006044820152606401610b89565b6007805460018101825560009190915281906003027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801610bd2828261321b565b604080518082019091526060808252602082015260038260ff168154811061090957610909612efe565b610cff61281c565b610d096000612883565b565b610d1361281c565b600c5460ff1615610d665760405162461bcd60e51b815260206004820152601e60248201527f506172747353746f72653a20636f6e7472616374206973206c6f636b656400006044820152606401610b89565b6003805460018101825560009190915281906002027fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01610bd2828261320d565b600a81815481106109fe57600080fd5b610dbf61281c565b600c5460ff1615610e125760405162461bcd60e51b815260206004820152601e60248201527f506172747353746f72653a20636f6e7472616374206973206c6f636b656400006044820152606401610b89565b600a805460018101825560009190915281906002027fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a801610bd2828261320d565b604080518082019091526060808252602082015260088260ff168154811061090957610909612efe565b6040805180820190915260608082526020820152600a8260ff168154811061090957610909612efe565b610eaf61281c565b600c5460ff1615610f025760405162461bcd60e51b815260206004820152601e60248201527f506172747353746f72653a20636f6e7472616374206973206c6f636b656400006044820152606401610b89565b6008805460018101825560009190915281906002027ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301610bd2828261320d565b610f4b61281c565b600c5460ff1615610f9e5760405162461bcd60e51b815260206004820152601e60248201527f506172747353746f72653a20636f6e7472616374206973206c6f636b656400006044820152606401610b89565b6006805460018101825560009190915281906002027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01610bd2828261320d565b61103c60405180610160016040528060608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b6040518061016001604052806111cc6001805480602002602001604051908101604052809291908181526020016000905b828210156111c357838290600052602060002090600202016040518060400160405290816000820180546110a090612f2d565b80601f01602080910402602001604051908101604052809291908181526020018280546110cc90612f2d565b80156111195780601f106110ee57610100808354040283529160200191611119565b820191906000526020600020905b8154815290600101906020018083116110fc57829003601f168201915b5050505050815260200160018201805461113290612f2d565b80601f016020809104026020016040519081016040528092919081815260200182805461115e90612f2d565b80156111ab5780601f10611180576101008083540402835291602001916111ab565b820191906000526020600020905b81548152906001019060200180831161118e57829003601f168201915b5050505050815250508152602001906001019061106d565b505050506128f8565b815260200161134c6002805480602002602001604051908101604052809291908181526020016000905b828210156111c3578382906000526020600020906002020160405180604001604052908160008201805461122990612f2d565b80601f016020809104026020016040519081016040528092919081815260200182805461125590612f2d565b80156112a25780601f10611277576101008083540402835291602001916112a2565b820191906000526020600020905b81548152906001019060200180831161128557829003601f168201915b505050505081526020016001820180546112bb90612f2d565b80601f01602080910402602001604051908101604052809291908181526020018280546112e790612f2d565b80156113345780601f1061130957610100808354040283529160200191611334565b820191906000526020600020905b81548152906001019060200180831161131757829003601f168201915b505050505081525050815260200190600101906111f6565b81526020016114d56003805480602002602001604051908101604052809291908181526020016000905b828210156114cc57838290600052602060002090600202016040518060400160405290816000820180546113a990612f2d565b80601f01602080910402602001604051908101604052809291908181526020018280546113d590612f2d565b80156114225780601f106113f757610100808354040283529160200191611422565b820191906000526020600020905b81548152906001019060200180831161140557829003601f168201915b5050505050815260200160018201805461143b90612f2d565b80601f016020809104026020016040519081016040528092919081815260200182805461146790612f2d565b80156114b45780601f10611489576101008083540402835291602001916114b4565b820191906000526020600020905b81548152906001019060200180831161149757829003601f168201915b50505050508152505081526020019060010190611376565b505050506129ad565b81526020016116556004805480602002602001604051908101604052809291908181526020016000905b828210156114cc578382906000526020600020906002020160405180604001604052908160008201805461153290612f2d565b80601f016020809104026020016040519081016040528092919081815260200182805461155e90612f2d565b80156115ab5780601f10611580576101008083540402835291602001916115ab565b820191906000526020600020905b81548152906001019060200180831161158e57829003601f168201915b505050505081526020016001820180546115c490612f2d565b80601f01602080910402602001604051908101604052809291908181526020018280546115f090612f2d565b801561163d5780601f106116125761010080835404028352916020019161163d565b820191906000526020600020905b81548152906001019060200180831161162057829003601f168201915b505050505081525050815260200190600101906114ff565b81526020016117d56005805480602002602001604051908101604052809291908181526020016000905b828210156114cc57838290600052602060002090600202016040518060400160405290816000820180546116b290612f2d565b80601f01602080910402602001604051908101604052809291908181526020018280546116de90612f2d565b801561172b5780601f106117005761010080835404028352916020019161172b565b820191906000526020600020905b81548152906001019060200180831161170e57829003601f168201915b5050505050815260200160018201805461174490612f2d565b80601f016020809104026020016040519081016040528092919081815260200182805461177090612f2d565b80156117bd5780601f10611792576101008083540402835291602001916117bd565b820191906000526020600020905b8154815290600101906020018083116117a057829003601f168201915b5050505050815250508152602001906001019061167f565b81526020016119556006805480602002602001604051908101604052809291908181526020016000905b828210156114cc578382906000526020600020906002020160405180604001604052908160008201805461183290612f2d565b80601f016020809104026020016040519081016040528092919081815260200182805461185e90612f2d565b80156118ab5780601f10611880576101008083540402835291602001916118ab565b820191906000526020600020905b81548152906001019060200180831161188e57829003601f168201915b505050505081526020016001820180546118c490612f2d565b80601f01602080910402602001604051908101604052809291908181526020018280546118f090612f2d565b801561193d5780601f106119125761010080835404028352916020019161193d565b820191906000526020600020905b81548152906001019060200180831161192057829003601f168201915b505050505081525050815260200190600101906117ff565b8152602001611b706007805480602002602001604051908101604052809291908181526020016000905b82821015611b6757838290600052602060002090600302016040518060600160405290816000820180546119b290612f2d565b80601f01602080910402602001604051908101604052809291908181526020018280546119de90612f2d565b8015611a2b5780601f10611a0057610100808354040283529160200191611a2b565b820191906000526020600020905b815481529060010190602001808311611a0e57829003601f168201915b50505050508152602001600182018054611a4490612f2d565b80601f0160208091040260200160405190810160405280929190818152602001828054611a7090612f2d565b8015611abd5780601f10611a9257610100808354040283529160200191611abd565b820191906000526020600020905b815481529060010190602001808311611aa057829003601f168201915b50505050508152602001600282018054611ad690612f2d565b80601f0160208091040260200160405190810160405280929190818152602001828054611b0290612f2d565b8015611b4f5780601f10611b2457610100808354040283529160200191611b4f565b820191906000526020600020905b815481529060010190602001808311611b3257829003601f168201915b5050505050815250508152602001906001019061197f565b50505050612a5b565b8152602001611cf06008805480602002602001604051908101604052809291908181526020016000905b828210156114cc5783829060005260206000209060020201604051806040016040529081600082018054611bcd90612f2d565b80601f0160208091040260200160405190810160405280929190818152602001828054611bf990612f2d565b8015611c465780601f10611c1b57610100808354040283529160200191611c46565b820191906000526020600020905b815481529060010190602001808311611c2957829003601f168201915b50505050508152602001600182018054611c5f90612f2d565b80601f0160208091040260200160405190810160405280929190818152602001828054611c8b90612f2d565b8015611cd85780601f10611cad57610100808354040283529160200191611cd8565b820191906000526020600020905b815481529060010190602001808311611cbb57829003601f168201915b50505050508152505081526020019060010190611b9a565b8152602001611e706009805480602002602001604051908101604052809291908181526020016000905b828210156114cc5783829060005260206000209060020201604051806040016040529081600082018054611d4d90612f2d565b80601f0160208091040260200160405190810160405280929190818152602001828054611d7990612f2d565b8015611dc65780601f10611d9b57610100808354040283529160200191611dc6565b820191906000526020600020905b815481529060010190602001808311611da957829003601f168201915b50505050508152602001600182018054611ddf90612f2d565b80601f0160208091040260200160405190810160405280929190818152602001828054611e0b90612f2d565b8015611e585780601f10611e2d57610100808354040283529160200191611e58565b820191906000526020600020905b815481529060010190602001808311611e3b57829003601f168201915b50505050508152505081526020019060010190611d1a565b8152602001611ff0600a805480602002602001604051908101604052809291908181526020016000905b828210156114cc5783829060005260206000209060020201604051806040016040529081600082018054611ecd90612f2d565b80601f0160208091040260200160405190810160405280929190818152602001828054611ef990612f2d565b8015611f465780601f10611f1b57610100808354040283529160200191611f46565b820191906000526020600020905b815481529060010190602001808311611f2957829003601f168201915b50505050508152602001600182018054611f5f90612f2d565b80601f0160208091040260200160405190810160405280929190818152602001828054611f8b90612f2d565b8015611fd85780601f10611fad57610100808354040283529160200191611fd8565b820191906000526020600020905b815481529060010190602001808311611fbb57829003601f168201915b50505050508152505081526020019060010190611e9a565b8152602001612170600b805480602002602001604051908101604052809291908181526020016000905b828210156114cc578382906000526020600020906002020160405180604001604052908160008201805461204d90612f2d565b80601f016020809104026020016040519081016040528092919081815260200182805461207990612f2d565b80156120c65780601f1061209b576101008083540402835291602001916120c6565b820191906000526020600020905b8154815290600101906020018083116120a957829003601f168201915b505050505081526020016001820180546120df90612f2d565b80601f016020809104026020016040519081016040528092919081815260200182805461210b90612f2d565b80156121585780601f1061212d57610100808354040283529160200191612158565b820191906000526020600020905b81548152906001019060200180831161213b57829003601f168201915b5050505050815250508152602001906001019061201a565b9052919050565b61217f61281c565b600c5460ff16156121d25760405162461bcd60e51b815260206004820152601e60248201527f506172747353746f72653a20636f6e7472616374206973206c6f636b656400006044820152606401610b89565b600b805460018101825560009190915281906002027f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901610bd2828261320d565b61221b61281c565b600c5460ff161561226e5760405162461bcd60e51b815260206004820152601e60248201527f506172747353746f72653a20636f6e7472616374206973206c6f636b656400006044820152606401610b89565b6005805460018101825560009190915281906002027f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001610bd2828261320d565b6122b761281c565b600c5460ff161561230a5760405162461bcd60e51b815260206004820152601e60248201527f506172747353746f72653a20636f6e7472616374206973206c6f636b656400006044820152606401610b89565b6004805460018101825560009190915281906002027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01610bd2828261320d565b600281815481106109fe57600080fd5b600481815481106109fe57600080fd5b6007818154811061237b57600080fd5b906000526020600020906003020160009150905080600001805461239e90612f2d565b80601f01602080910402602001604051908101604052809291908181526020018280546123ca90612f2d565b80156124175780601f106123ec57610100808354040283529160200191612417565b820191906000526020600020905b8154815290600101906020018083116123fa57829003601f168201915b50505050509080600101805461242c90612f2d565b80601f016020809104026020016040519081016040528092919081815260200182805461245890612f2d565b80156124a55780601f1061247a576101008083540402835291602001916124a5565b820191906000526020600020905b81548152906001019060200180831161248857829003601f168201915b5050505050908060020180546124ba90612f2d565b80601f01602080910402602001604051908101604052809291908181526020018280546124e690612f2d565b80156125335780601f1061250857610100808354040283529160200191612533565b820191906000526020600020905b81548152906001019060200180831161251657829003601f168201915b5050505050905083565b61254561281c565b600c5460ff16156125985760405162461bcd60e51b815260206004820152601e60248201527f506172747353746f72653a20636f6e7472616374206973206c6f636b656400006044820152606401610b89565b6002805460018101825560008290528291027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01610bd2828261320d565b604080518082019091526060808252602082015260058260ff168154811061090957610909612efe565b600181815481106109fe57600080fd5b604080518082019091526060808252602082015260068260ff168154811061090957610909612efe565b604080518082019091526060808252602082015260098260ff168154811061090957610909612efe565b61266c61281c565b600c5460ff16156126bf5760405162461bcd60e51b815260206004820152601e60248201527f506172747353746f72653a20636f6e7472616374206973206c6f636b656400006044820152606401610b89565b6009805460018101825560009190915281906002027f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af01610bd2828261320d565b600381815481106109fe57600080fd5b61271861281c565b73ffffffffffffffffffffffffffffffffffffffff81166127a15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610b89565b6127aa81612883565b50565b6127b561281c565b600c80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b600681815481106109fe57600080fd5b6040805180820190915260608082526020820152600b8260ff168154811061090957610909612efe565b60005473ffffffffffffffffffffffffffffffffffffffff163314610d095760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b89565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60606000825167ffffffffffffffff81111561291657612916612fe6565b60405190808252806020026020018201604052801561294957816020015b60608152602001906001900390816129345790505b50905060005b83518110156129a65783818151811061296a5761296a612efe565b60200260200101516000015182828151811061298857612988612efe565b6020026020010181905250808061299e90613315565b91505061294f565b5092915050565b60606000825167ffffffffffffffff8111156129cb576129cb612fe6565b6040519080825280602002602001820160405280156129fe57816020015b60608152602001906001900390816129e95790505b50905060005b83518110156129a657838181518110612a1f57612a1f612efe565b602002602001015160000151828281518110612a3d57612a3d612efe565b60200260200101819052508080612a5390613315565b915050612a04565b60606000825167ffffffffffffffff811115612a7957612a79612fe6565b604051908082528060200260200182016040528015612aac57816020015b6060815260200190600190039081612a975790505b50905060005b83518110156129a657838181518110612acd57612acd612efe565b602002602001015160000151828281518110612aeb57612aeb612efe565b60200260200101819052508080612b0190613315565b915050612ab2565b600060208284031215612b1b57600080fd5b813560ff81168114612b2c57600080fd5b9392505050565b6000815180845260005b81811015612b5957602081850181015186830182015201612b3d565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000825160606020840152612b956080840182612b33565b90506020840151601f1980858403016040860152612bb38383612b33565b9250604086015191508085840301606086015250612bd18282612b33565b95945050505050565b6000815160408452612bef6040850182612b33565b905060208301518482036020860152612bd18282612b33565b602081526000612b2c6020830184612bda565b600060208284031215612c2d57600080fd5b5035919050565b604081526000612c476040830185612b33565b8281036020840152612bd18185612b33565b600060408284031215612c6b57600080fd5b50919050565b600060208284031215612c8357600080fd5b813567ffffffffffffffff811115612c9a57600080fd5b612ca684828501612c59565b949350505050565b600060208284031215612cc057600080fd5b813567ffffffffffffffff811115612cd757600080fd5b820160608185031215612b2c57600080fd5b600081518084526020808501808196508360051b8101915082860160005b85811015612d31578284038952612d1f848351612b33565b98850198935090840190600101612d07565b5091979650505050505050565b6020815260008251610160806020850152612d5d610180850183612ce9565b91506020850151601f1980868503016040870152612d7b8483612ce9565b93506040870151915080868503016060870152612d988483612ce9565b93506060870151915080868503016080870152612db58483612ce9565b935060808701519150808685030160a0870152612dd28483612ce9565b935060a08701519150808685030160c0870152612def8483612ce9565b935060c08701519150808685030160e0870152612e0c8483612ce9565b935060e08701519150610100818786030181880152612e2b8584612ce9565b945080880151925050610120818786030181880152612e4a8584612ce9565b945080880151925050610140818786030181880152612e698584612ce9565b908801518782039092018488015293509050612e858382612ce9565b9695505050505050565b606081526000612ea26060830186612b33565b8281036020840152612eb48186612b33565b90508281036040840152612e858185612b33565b600060208284031215612eda57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114612b2c57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c90821680612f4157607f821691505b602082108103612c6b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612faf57600080fd5b83018035915067ffffffffffffffff821115612fca57600080fd5b602001915036819003821315612fdf57600080fd5b9250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f821115610bd257600081815260208120601f850160051c8101602086101561303c5750805b601f850160051c820191505b8181101561305b57828155600101613048565b505050505050565b67ffffffffffffffff83111561307b5761307b612fe6565b61308f836130898354612f2d565b83613015565b6000601f8411600181146130c357600085156130ab5750838201355b600019600387901b1c1916600186901b17835561311d565b600083815260209020601f19861690835b828110156130f457868501358255602094850194600190920191016130d4565b50868210156131115760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b61312e8283612f7a565b67ffffffffffffffff81111561314657613146612fe6565b61315a816131548554612f2d565b85613015565b6000601f82116001811461318e57600083156131765750838201355b600019600385901b1c1916600184901b1785556131e8565b600085815260209020601f19841690835b828110156131bf578685013582556020948501946001909201910161319f565b50848210156131dc5760001960f88660031b161c19848701351681555b505060018360011b0185555b505050506131f96020830183612f7a565b613207818360018601613063565b50505050565b6132178282613124565b5050565b6132258283612f7a565b67ffffffffffffffff81111561323d5761323d612fe6565b61324b816131548554612f2d565b6000601f82116001811461327f57600083156132675750838201355b600019600385901b1c1916600184901b1785556132d9565b600085815260209020601f19841690835b828110156132b05786850135825560209485019460019092019101613290565b50848210156132cd5760001960f88660031b161c19848701351681555b505060018360011b0185555b505050506132ea6020830183612f7a565b6132f8818360018601613063565b50506133076040830183612f7a565b613207818360028601613063565b6000600019820361334f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea2646970667358221220fe1be7fa8b0635f5203f34b58b97a708e2505f378d3c77cadd3e07d5c0d78ccb64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103365760003560e01c80638da5cb5b116101b2578063d2c957e9116100f9578063e703c186116100a2578063f2fde38b1161007c578063f2fde38b1461068e578063f83d08ba146106a1578063f862ab1b146106a9578063f87b5d6a146106bc57600080fd5b8063e703c18614610660578063e986366414610668578063ee9a808f1461067b57600080fd5b8063e2c24605116100d3578063e2c2460514610627578063e3ec8b981461063a578063e465b0551461064d57600080fd5b8063d2c957e9146105f9578063d8a4234d1461060c578063ddee33b51461061f57600080fd5b8063b09c691c1161015b578063ceed017511610135578063ceed0175146105a7578063cf309012146105ba578063d19893c3146105d757600080fd5b8063b09c691c14610579578063b122c74f1461058c578063c80adbdb1461059457600080fd5b80639df263dd1161018c5780639df263dd1461053e5780639f76a1e514610553578063abb26ac41461056657600080fd5b80638da5cb5b146104fb5780639d1f6589146105235780639da775d01461052b57600080fd5b80636f25dcd51161028157806384a5d1c61161022a57806387f307891161020457806387f30789146104c55780638bb5ad96146104cd5780638ce33c25146104e05780638d915d1f146104f357600080fd5b806384a5d1c614610497578063872f5b4c1461049f57806387dddae5146104b257600080fd5b80637cca159e1161025b5780637cca159e1461046957806380942bfe14610471578063817dbe9f1461048457600080fd5b80636f25dcd514610446578063715018a6146104595780637576bf871461046157600080fd5b80633d0cf8cb116102e35780635e39eee0116102bd5780635e39eee01461040d578063621dc7361461042057806365c1b3f11461043357600080fd5b80633d0cf8cb146103d257806350d15fbe146103e75780635bca69ec146103fa57600080fd5b80632d72225b116103145780632d72225b146103975780632f6171cb146103b8578063320d7b4b146103ca57600080fd5b8063077e69cc1461033b57806315c507db146103645780632c0d2de614610384575b600080fd5b61034e610349366004612b09565b6106cf565b60405161035b9190612b79565b60405180910390f35b610377610372366004612b09565b6108df565b60405161035b9190612c08565b610377610392366004612b09565b6109c4565b6103aa6103a5366004612c1b565b6109ee565b60405161035b929190612c34565b6007545b60405190815260200161035b565b600a546103bc565b6103e56103e0366004612c71565b610b32565b005b6103aa6103f5366004612c1b565b610bd7565b6103aa610408366004612c1b565b610be7565b61037761041b366004612b09565b610bf7565b6103aa61042e366004612c1b565b610c21565b6103e5610441366004612cae565b610c31565b610377610454366004612b09565b610ccd565b6103e5610cf7565b6006546103bc565b6002546103bc565b6103e561047f366004612c71565b610d0b565b6103aa610492366004612c1b565b610da7565b6009546103bc565b6103e56104ad366004612c71565b610db7565b6103776104c0366004612b09565b610e53565b6001546103bc565b6103776104db366004612b09565b610e7d565b6103e56104ee366004612c71565b610ea7565b600b546103bc565b60005460405173ffffffffffffffffffffffffffffffffffffffff909116815260200161035b565b6004546103bc565b6103e5610539366004612c71565b610f43565b610546610fdf565b60405161035b9190612d3e565b6103e5610561366004612c71565b612177565b6103e5610574366004612c71565b612213565b6103e5610587366004612c71565b6122af565b6008546103bc565b6103aa6105a2366004612c1b565b61234b565b6103aa6105b5366004612c1b565b61235b565b600c546105c79060ff1681565b604051901515815260200161035b565b6105ea6105e5366004612c1b565b61236b565b60405161035b93929190612e8f565b6103e5610607366004612c71565b61253d565b61037761061a366004612b09565b6125d6565b6005546103bc565b6103aa610635366004612c1b565b612600565b610377610648366004612b09565b612610565b61037761065b366004612b09565b61263a565b6003546103bc565b6103e5610676366004612c71565b612664565b6103aa610689366004612c1b565b612700565b6103e561069c366004612ec8565b612710565b6103e56127ad565b6103aa6106b7366004612c1b565b6127e2565b6103776106ca366004612b09565b6127f2565b6106f360405180606001604052806060815260200160608152602001606081525090565b60078260ff168154811061070957610709612efe565b906000526020600020906003020160405180606001604052908160008201805461073290612f2d565b80601f016020809104026020016040519081016040528092919081815260200182805461075e90612f2d565b80156107ab5780601f10610780576101008083540402835291602001916107ab565b820191906000526020600020905b81548152906001019060200180831161078e57829003601f168201915b505050505081526020016001820180546107c490612f2d565b80601f01602080910402602001604051908101604052809291908181526020018280546107f090612f2d565b801561083d5780601f106108125761010080835404028352916020019161083d565b820191906000526020600020905b81548152906001019060200180831161082057829003601f168201915b5050505050815260200160028201805461085690612f2d565b80601f016020809104026020016040519081016040528092919081815260200182805461088290612f2d565b80156108cf5780601f106108a4576101008083540402835291602001916108cf565b820191906000526020600020905b8154815290600101906020018083116108b257829003601f168201915b5050505050815250509050919050565b604080518082019091526060808252602082015260018260ff168154811061090957610909612efe565b906000526020600020906002020160405180604001604052908160008201805461093290612f2d565b80601f016020809104026020016040519081016040528092919081815260200182805461095e90612f2d565b80156109ab5780601f10610980576101008083540402835291602001916109ab565b820191906000526020600020905b81548152906001019060200180831161098e57829003601f168201915b5050505050815260200160018201805461085690612f2d565b604080518082019091526060808252602082015260028260ff168154811061090957610909612efe565b600b81815481106109fe57600080fd5b9060005260206000209060020201600091509050806000018054610a2190612f2d565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4d90612f2d565b8015610a9a5780601f10610a6f57610100808354040283529160200191610a9a565b820191906000526020600020905b815481529060010190602001808311610a7d57829003601f168201915b505050505090806001018054610aaf90612f2d565b80601f0160208091040260200160405190810160405280929190818152602001828054610adb90612f2d565b8015610b285780601f10610afd57610100808354040283529160200191610b28565b820191906000526020600020905b815481529060010190602001808311610b0b57829003601f168201915b5050505050905082565b610b3a61281c565b600c5460ff1615610b925760405162461bcd60e51b815260206004820152601e60248201527f506172747353746f72653a20636f6e7472616374206973206c6f636b6564000060448201526064015b60405180910390fd5b60018054808201825560009190915281906002027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601610bd2828261320d565b505050565b600981815481106109fe57600080fd5b600881815481106109fe57600080fd5b604080518082019091526060808252602082015260048260ff168154811061090957610909612efe565b600581815481106109fe57600080fd5b610c3961281c565b600c5460ff1615610c8c5760405162461bcd60e51b815260206004820152601e60248201527f506172747353746f72653a20636f6e7472616374206973206c6f636b656400006044820152606401610b89565b6007805460018101825560009190915281906003027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801610bd2828261321b565b604080518082019091526060808252602082015260038260ff168154811061090957610909612efe565b610cff61281c565b610d096000612883565b565b610d1361281c565b600c5460ff1615610d665760405162461bcd60e51b815260206004820152601e60248201527f506172747353746f72653a20636f6e7472616374206973206c6f636b656400006044820152606401610b89565b6003805460018101825560009190915281906002027fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01610bd2828261320d565b600a81815481106109fe57600080fd5b610dbf61281c565b600c5460ff1615610e125760405162461bcd60e51b815260206004820152601e60248201527f506172747353746f72653a20636f6e7472616374206973206c6f636b656400006044820152606401610b89565b600a805460018101825560009190915281906002027fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a801610bd2828261320d565b604080518082019091526060808252602082015260088260ff168154811061090957610909612efe565b6040805180820190915260608082526020820152600a8260ff168154811061090957610909612efe565b610eaf61281c565b600c5460ff1615610f025760405162461bcd60e51b815260206004820152601e60248201527f506172747353746f72653a20636f6e7472616374206973206c6f636b656400006044820152606401610b89565b6008805460018101825560009190915281906002027ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301610bd2828261320d565b610f4b61281c565b600c5460ff1615610f9e5760405162461bcd60e51b815260206004820152601e60248201527f506172747353746f72653a20636f6e7472616374206973206c6f636b656400006044820152606401610b89565b6006805460018101825560009190915281906002027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01610bd2828261320d565b61103c60405180610160016040528060608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b6040518061016001604052806111cc6001805480602002602001604051908101604052809291908181526020016000905b828210156111c357838290600052602060002090600202016040518060400160405290816000820180546110a090612f2d565b80601f01602080910402602001604051908101604052809291908181526020018280546110cc90612f2d565b80156111195780601f106110ee57610100808354040283529160200191611119565b820191906000526020600020905b8154815290600101906020018083116110fc57829003601f168201915b5050505050815260200160018201805461113290612f2d565b80601f016020809104026020016040519081016040528092919081815260200182805461115e90612f2d565b80156111ab5780601f10611180576101008083540402835291602001916111ab565b820191906000526020600020905b81548152906001019060200180831161118e57829003601f168201915b5050505050815250508152602001906001019061106d565b505050506128f8565b815260200161134c6002805480602002602001604051908101604052809291908181526020016000905b828210156111c3578382906000526020600020906002020160405180604001604052908160008201805461122990612f2d565b80601f016020809104026020016040519081016040528092919081815260200182805461125590612f2d565b80156112a25780601f10611277576101008083540402835291602001916112a2565b820191906000526020600020905b81548152906001019060200180831161128557829003601f168201915b505050505081526020016001820180546112bb90612f2d565b80601f01602080910402602001604051908101604052809291908181526020018280546112e790612f2d565b80156113345780601f1061130957610100808354040283529160200191611334565b820191906000526020600020905b81548152906001019060200180831161131757829003601f168201915b505050505081525050815260200190600101906111f6565b81526020016114d56003805480602002602001604051908101604052809291908181526020016000905b828210156114cc57838290600052602060002090600202016040518060400160405290816000820180546113a990612f2d565b80601f01602080910402602001604051908101604052809291908181526020018280546113d590612f2d565b80156114225780601f106113f757610100808354040283529160200191611422565b820191906000526020600020905b81548152906001019060200180831161140557829003601f168201915b5050505050815260200160018201805461143b90612f2d565b80601f016020809104026020016040519081016040528092919081815260200182805461146790612f2d565b80156114b45780601f10611489576101008083540402835291602001916114b4565b820191906000526020600020905b81548152906001019060200180831161149757829003601f168201915b50505050508152505081526020019060010190611376565b505050506129ad565b81526020016116556004805480602002602001604051908101604052809291908181526020016000905b828210156114cc578382906000526020600020906002020160405180604001604052908160008201805461153290612f2d565b80601f016020809104026020016040519081016040528092919081815260200182805461155e90612f2d565b80156115ab5780601f10611580576101008083540402835291602001916115ab565b820191906000526020600020905b81548152906001019060200180831161158e57829003601f168201915b505050505081526020016001820180546115c490612f2d565b80601f01602080910402602001604051908101604052809291908181526020018280546115f090612f2d565b801561163d5780601f106116125761010080835404028352916020019161163d565b820191906000526020600020905b81548152906001019060200180831161162057829003601f168201915b505050505081525050815260200190600101906114ff565b81526020016117d56005805480602002602001604051908101604052809291908181526020016000905b828210156114cc57838290600052602060002090600202016040518060400160405290816000820180546116b290612f2d565b80601f01602080910402602001604051908101604052809291908181526020018280546116de90612f2d565b801561172b5780601f106117005761010080835404028352916020019161172b565b820191906000526020600020905b81548152906001019060200180831161170e57829003601f168201915b5050505050815260200160018201805461174490612f2d565b80601f016020809104026020016040519081016040528092919081815260200182805461177090612f2d565b80156117bd5780601f10611792576101008083540402835291602001916117bd565b820191906000526020600020905b8154815290600101906020018083116117a057829003601f168201915b5050505050815250508152602001906001019061167f565b81526020016119556006805480602002602001604051908101604052809291908181526020016000905b828210156114cc578382906000526020600020906002020160405180604001604052908160008201805461183290612f2d565b80601f016020809104026020016040519081016040528092919081815260200182805461185e90612f2d565b80156118ab5780601f10611880576101008083540402835291602001916118ab565b820191906000526020600020905b81548152906001019060200180831161188e57829003601f168201915b505050505081526020016001820180546118c490612f2d565b80601f01602080910402602001604051908101604052809291908181526020018280546118f090612f2d565b801561193d5780601f106119125761010080835404028352916020019161193d565b820191906000526020600020905b81548152906001019060200180831161192057829003601f168201915b505050505081525050815260200190600101906117ff565b8152602001611b706007805480602002602001604051908101604052809291908181526020016000905b82821015611b6757838290600052602060002090600302016040518060600160405290816000820180546119b290612f2d565b80601f01602080910402602001604051908101604052809291908181526020018280546119de90612f2d565b8015611a2b5780601f10611a0057610100808354040283529160200191611a2b565b820191906000526020600020905b815481529060010190602001808311611a0e57829003601f168201915b50505050508152602001600182018054611a4490612f2d565b80601f0160208091040260200160405190810160405280929190818152602001828054611a7090612f2d565b8015611abd5780601f10611a9257610100808354040283529160200191611abd565b820191906000526020600020905b815481529060010190602001808311611aa057829003601f168201915b50505050508152602001600282018054611ad690612f2d565b80601f0160208091040260200160405190810160405280929190818152602001828054611b0290612f2d565b8015611b4f5780601f10611b2457610100808354040283529160200191611b4f565b820191906000526020600020905b815481529060010190602001808311611b3257829003601f168201915b5050505050815250508152602001906001019061197f565b50505050612a5b565b8152602001611cf06008805480602002602001604051908101604052809291908181526020016000905b828210156114cc5783829060005260206000209060020201604051806040016040529081600082018054611bcd90612f2d565b80601f0160208091040260200160405190810160405280929190818152602001828054611bf990612f2d565b8015611c465780601f10611c1b57610100808354040283529160200191611c46565b820191906000526020600020905b815481529060010190602001808311611c2957829003601f168201915b50505050508152602001600182018054611c5f90612f2d565b80601f0160208091040260200160405190810160405280929190818152602001828054611c8b90612f2d565b8015611cd85780601f10611cad57610100808354040283529160200191611cd8565b820191906000526020600020905b815481529060010190602001808311611cbb57829003601f168201915b50505050508152505081526020019060010190611b9a565b8152602001611e706009805480602002602001604051908101604052809291908181526020016000905b828210156114cc5783829060005260206000209060020201604051806040016040529081600082018054611d4d90612f2d565b80601f0160208091040260200160405190810160405280929190818152602001828054611d7990612f2d565b8015611dc65780601f10611d9b57610100808354040283529160200191611dc6565b820191906000526020600020905b815481529060010190602001808311611da957829003601f168201915b50505050508152602001600182018054611ddf90612f2d565b80601f0160208091040260200160405190810160405280929190818152602001828054611e0b90612f2d565b8015611e585780601f10611e2d57610100808354040283529160200191611e58565b820191906000526020600020905b815481529060010190602001808311611e3b57829003601f168201915b50505050508152505081526020019060010190611d1a565b8152602001611ff0600a805480602002602001604051908101604052809291908181526020016000905b828210156114cc5783829060005260206000209060020201604051806040016040529081600082018054611ecd90612f2d565b80601f0160208091040260200160405190810160405280929190818152602001828054611ef990612f2d565b8015611f465780601f10611f1b57610100808354040283529160200191611f46565b820191906000526020600020905b815481529060010190602001808311611f2957829003601f168201915b50505050508152602001600182018054611f5f90612f2d565b80601f0160208091040260200160405190810160405280929190818152602001828054611f8b90612f2d565b8015611fd85780601f10611fad57610100808354040283529160200191611fd8565b820191906000526020600020905b815481529060010190602001808311611fbb57829003601f168201915b50505050508152505081526020019060010190611e9a565b8152602001612170600b805480602002602001604051908101604052809291908181526020016000905b828210156114cc578382906000526020600020906002020160405180604001604052908160008201805461204d90612f2d565b80601f016020809104026020016040519081016040528092919081815260200182805461207990612f2d565b80156120c65780601f1061209b576101008083540402835291602001916120c6565b820191906000526020600020905b8154815290600101906020018083116120a957829003601f168201915b505050505081526020016001820180546120df90612f2d565b80601f016020809104026020016040519081016040528092919081815260200182805461210b90612f2d565b80156121585780601f1061212d57610100808354040283529160200191612158565b820191906000526020600020905b81548152906001019060200180831161213b57829003601f168201915b5050505050815250508152602001906001019061201a565b9052919050565b61217f61281c565b600c5460ff16156121d25760405162461bcd60e51b815260206004820152601e60248201527f506172747353746f72653a20636f6e7472616374206973206c6f636b656400006044820152606401610b89565b600b805460018101825560009190915281906002027f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901610bd2828261320d565b61221b61281c565b600c5460ff161561226e5760405162461bcd60e51b815260206004820152601e60248201527f506172747353746f72653a20636f6e7472616374206973206c6f636b656400006044820152606401610b89565b6005805460018101825560009190915281906002027f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001610bd2828261320d565b6122b761281c565b600c5460ff161561230a5760405162461bcd60e51b815260206004820152601e60248201527f506172747353746f72653a20636f6e7472616374206973206c6f636b656400006044820152606401610b89565b6004805460018101825560009190915281906002027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01610bd2828261320d565b600281815481106109fe57600080fd5b600481815481106109fe57600080fd5b6007818154811061237b57600080fd5b906000526020600020906003020160009150905080600001805461239e90612f2d565b80601f01602080910402602001604051908101604052809291908181526020018280546123ca90612f2d565b80156124175780601f106123ec57610100808354040283529160200191612417565b820191906000526020600020905b8154815290600101906020018083116123fa57829003601f168201915b50505050509080600101805461242c90612f2d565b80601f016020809104026020016040519081016040528092919081815260200182805461245890612f2d565b80156124a55780601f1061247a576101008083540402835291602001916124a5565b820191906000526020600020905b81548152906001019060200180831161248857829003601f168201915b5050505050908060020180546124ba90612f2d565b80601f01602080910402602001604051908101604052809291908181526020018280546124e690612f2d565b80156125335780601f1061250857610100808354040283529160200191612533565b820191906000526020600020905b81548152906001019060200180831161251657829003601f168201915b5050505050905083565b61254561281c565b600c5460ff16156125985760405162461bcd60e51b815260206004820152601e60248201527f506172747353746f72653a20636f6e7472616374206973206c6f636b656400006044820152606401610b89565b6002805460018101825560008290528291027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01610bd2828261320d565b604080518082019091526060808252602082015260058260ff168154811061090957610909612efe565b600181815481106109fe57600080fd5b604080518082019091526060808252602082015260068260ff168154811061090957610909612efe565b604080518082019091526060808252602082015260098260ff168154811061090957610909612efe565b61266c61281c565b600c5460ff16156126bf5760405162461bcd60e51b815260206004820152601e60248201527f506172747353746f72653a20636f6e7472616374206973206c6f636b656400006044820152606401610b89565b6009805460018101825560009190915281906002027f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af01610bd2828261320d565b600381815481106109fe57600080fd5b61271861281c565b73ffffffffffffffffffffffffffffffffffffffff81166127a15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610b89565b6127aa81612883565b50565b6127b561281c565b600c80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b600681815481106109fe57600080fd5b6040805180820190915260608082526020820152600b8260ff168154811061090957610909612efe565b60005473ffffffffffffffffffffffffffffffffffffffff163314610d095760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b89565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60606000825167ffffffffffffffff81111561291657612916612fe6565b60405190808252806020026020018201604052801561294957816020015b60608152602001906001900390816129345790505b50905060005b83518110156129a65783818151811061296a5761296a612efe565b60200260200101516000015182828151811061298857612988612efe565b6020026020010181905250808061299e90613315565b91505061294f565b5092915050565b60606000825167ffffffffffffffff8111156129cb576129cb612fe6565b6040519080825280602002602001820160405280156129fe57816020015b60608152602001906001900390816129e95790505b50905060005b83518110156129a657838181518110612a1f57612a1f612efe565b602002602001015160000151828281518110612a3d57612a3d612efe565b60200260200101819052508080612a5390613315565b915050612a04565b60606000825167ffffffffffffffff811115612a7957612a79612fe6565b604051908082528060200260200182016040528015612aac57816020015b6060815260200190600190039081612a975790505b50905060005b83518110156129a657838181518110612acd57612acd612efe565b602002602001015160000151828281518110612aeb57612aeb612efe565b60200260200101819052508080612b0190613315565b915050612ab2565b600060208284031215612b1b57600080fd5b813560ff81168114612b2c57600080fd5b9392505050565b6000815180845260005b81811015612b5957602081850181015186830182015201612b3d565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000825160606020840152612b956080840182612b33565b90506020840151601f1980858403016040860152612bb38383612b33565b9250604086015191508085840301606086015250612bd18282612b33565b95945050505050565b6000815160408452612bef6040850182612b33565b905060208301518482036020860152612bd18282612b33565b602081526000612b2c6020830184612bda565b600060208284031215612c2d57600080fd5b5035919050565b604081526000612c476040830185612b33565b8281036020840152612bd18185612b33565b600060408284031215612c6b57600080fd5b50919050565b600060208284031215612c8357600080fd5b813567ffffffffffffffff811115612c9a57600080fd5b612ca684828501612c59565b949350505050565b600060208284031215612cc057600080fd5b813567ffffffffffffffff811115612cd757600080fd5b820160608185031215612b2c57600080fd5b600081518084526020808501808196508360051b8101915082860160005b85811015612d31578284038952612d1f848351612b33565b98850198935090840190600101612d07565b5091979650505050505050565b6020815260008251610160806020850152612d5d610180850183612ce9565b91506020850151601f1980868503016040870152612d7b8483612ce9565b93506040870151915080868503016060870152612d988483612ce9565b93506060870151915080868503016080870152612db58483612ce9565b935060808701519150808685030160a0870152612dd28483612ce9565b935060a08701519150808685030160c0870152612def8483612ce9565b935060c08701519150808685030160e0870152612e0c8483612ce9565b935060e08701519150610100818786030181880152612e2b8584612ce9565b945080880151925050610120818786030181880152612e4a8584612ce9565b945080880151925050610140818786030181880152612e698584612ce9565b908801518782039092018488015293509050612e858382612ce9565b9695505050505050565b606081526000612ea26060830186612b33565b8281036020840152612eb48186612b33565b90508281036040840152612e858185612b33565b600060208284031215612eda57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114612b2c57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c90821680612f4157607f821691505b602082108103612c6b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612faf57600080fd5b83018035915067ffffffffffffffff821115612fca57600080fd5b602001915036819003821315612fdf57600080fd5b9250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f821115610bd257600081815260208120601f850160051c8101602086101561303c5750805b601f850160051c820191505b8181101561305b57828155600101613048565b505050505050565b67ffffffffffffffff83111561307b5761307b612fe6565b61308f836130898354612f2d565b83613015565b6000601f8411600181146130c357600085156130ab5750838201355b600019600387901b1c1916600186901b17835561311d565b600083815260209020601f19861690835b828110156130f457868501358255602094850194600190920191016130d4565b50868210156131115760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b61312e8283612f7a565b67ffffffffffffffff81111561314657613146612fe6565b61315a816131548554612f2d565b85613015565b6000601f82116001811461318e57600083156131765750838201355b600019600385901b1c1916600184901b1785556131e8565b600085815260209020601f19841690835b828110156131bf578685013582556020948501946001909201910161319f565b50848210156131dc5760001960f88660031b161c19848701351681555b505060018360011b0185555b505050506131f96020830183612f7a565b613207818360018601613063565b50505050565b6132178282613124565b5050565b6132258283612f7a565b67ffffffffffffffff81111561323d5761323d612fe6565b61324b816131548554612f2d565b6000601f82116001811461327f57600083156132675750838201355b600019600385901b1c1916600184901b1785556132d9565b600085815260209020601f19841690835b828110156132b05786850135825560209485019460019092019101613290565b50848210156132cd5760001960f88660031b161c19848701351681555b505060018360011b0185555b505050506132ea6020830183612f7a565b6132f8818360018601613063565b50506133076040830183612f7a565b613207818360028601613063565b6000600019820361334f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea2646970667358221220fe1be7fa8b0635f5203f34b58b97a708e2505f378d3c77cadd3e07d5c0d78ccb64736f6c63430008110033",
  "devdoc": {
    "details": "Contract for managing various image parts of Polkadot Builders Crests such as colors, image parts, and palettes",
    "kind": "dev",
    "methods": {
      "addBgColor((string,string))": {
        "details": "Adds a new background color to the list of available background colors.Throws an error if the number of background colors is already at the maximum (255).",
        "params": {
          "color": "The color to add."
        }
      },
      "addClass((string,string))": {
        "details": "Adds a new class to the list of available classes.Throws an error if the number of classes is already at the maximum (255).",
        "params": {
          "part": "The class to add."
        }
      },
      "addCrown((string,string))": {
        "details": "Adds a new crown to the list of available crowns.Throws an error if the number of crowns is already at the maximum (255).",
        "params": {
          "part": "The crown to add."
        }
      },
      "addDoodad((string,string))": {
        "details": "Adds a new doodad to the list of available doodads.Throws an error if the number of doodads is already at the maximum (255).",
        "params": {
          "part": "The doodad to add."
        }
      },
      "addGarland((string,string))": {
        "details": "Adds a new garland to the list of available garlands.Throws an error if the number of garlands is already at the maximum (255).",
        "params": {
          "part": "The garland to add."
        }
      },
      "addNogglesColor((string,string))": {
        "details": "Adds a new Noggles color to the list of available Noggles colors.Throws an error if the number of Noggles colors is already at the maximum (255).",
        "params": {
          "color": "The color to add."
        }
      },
      "addQuadrantPalette((string,string,string))": {
        "details": "Adds a new quadrant palette to the list of available quadrant palettes.Throws an error if the number of quadrant palettes is already at the maximum (255).",
        "params": {
          "palette": "The quadrant palette to add."
        }
      },
      "addRep((string,string))": {
        "details": "Adds a new rep to the list of available reps.Throws an error if the number of reps is already at the maximum (255).",
        "params": {
          "part": "The rep to add."
        }
      },
      "addShield((string,string))": {
        "details": "Adds a new shield to the list of available shields.Throws an error if the number of shields is already at the maximum (255).",
        "params": {
          "part": "The shield to add."
        }
      },
      "addSkill((string,string))": {
        "details": "Adds a new skill to the list of available skills.Throws an error if the number of skills is already at the maximum (255).",
        "params": {
          "part": "The skill to add."
        }
      },
      "addTrait((string,string))": {
        "details": "Adds a new trait to the list of available traits.Throws an error if the number of traits is already at the maximum (255).",
        "params": {
          "part": "The trait to add."
        }
      },
      "bgColorsCount()": {
        "details": "Returns the count of background colors",
        "returns": {
          "_0": "the count of background colors"
        }
      },
      "classesCount()": {
        "details": "Returns the count of classes",
        "returns": {
          "_0": "the count of classes"
        }
      },
      "crownsCount()": {
        "details": "Returns the count of crowns",
        "returns": {
          "_0": "the count of crowns"
        }
      },
      "doodadsCount()": {
        "details": "Returns the count of doodads",
        "returns": {
          "_0": "the count of doodads"
        }
      },
      "garlandsCount()": {
        "details": "Returns the count of garlands",
        "returns": {
          "_0": "the count of garlands"
        }
      },
      "getAllParts()": {
        "details": "Returns all available parts.",
        "returns": {
          "_0": "All available parts."
        }
      },
      "getBgColor(uint8)": {
        "details": "Returns the background color at the given index",
        "params": {
          "id": "the index of the background color to retrieve"
        },
        "returns": {
          "_0": "the background color at the given index"
        }
      },
      "getClass(uint8)": {
        "details": "Returns the image part with the given ID.",
        "params": {
          "id": "The ID of the image part to retrieve."
        },
        "returns": {
          "_0": "The ImagePart struct containing information about the image part."
        }
      },
      "getCrown(uint8)": {
        "details": "Returns the crown at the given index",
        "params": {
          "id": "the index of the crown to retrieve"
        },
        "returns": {
          "_0": "the crown at the given index"
        }
      },
      "getDoodad(uint8)": {
        "details": "Returns the doodad at the given index",
        "params": {
          "id": "the index of the doodad to retrieve"
        },
        "returns": {
          "_0": "the doodad at the given index"
        }
      },
      "getGarland(uint8)": {
        "details": "Returns the garland at the given index",
        "params": {
          "id": "the index of the garland to retrieve"
        },
        "returns": {
          "_0": "the garland at the given index"
        }
      },
      "getNogglesColor(uint8)": {
        "details": "Returns the noggles color at the given index",
        "params": {
          "id": "the index of the noggles color to retrieve"
        },
        "returns": {
          "_0": "the noggles color at the given index"
        }
      },
      "getQuadrantPalette(uint8)": {
        "details": "Returns the quadrant palette at the given index",
        "params": {
          "id": "the index of the quadrant palette to retrieve"
        },
        "returns": {
          "_0": "the quadrant palette at the given index"
        }
      },
      "getRep(uint8)": {
        "details": "Returns the rep at the given index",
        "params": {
          "id": "the index of the rep to retrieve"
        },
        "returns": {
          "_0": "the rep at the given index"
        }
      },
      "getShield(uint8)": {
        "details": "Returns the shield at the given index",
        "params": {
          "id": "the index of the shield to retrieve"
        },
        "returns": {
          "_0": "the shield at the given index"
        }
      },
      "getSkill(uint8)": {
        "details": "Returns the skill at the given index",
        "params": {
          "id": "the index of the skill to retrieve"
        },
        "returns": {
          "_0": "the skill at the given index"
        }
      },
      "getTrait(uint8)": {
        "details": "Returns the image trait with the given ID.",
        "params": {
          "id": "The ID of the image trait to retrieve."
        },
        "returns": {
          "_0": "The ImagePart struct containing information about the image trait."
        }
      },
      "lock()": {
        "details": "Locks the store from further additions"
      },
      "nogglesColorsCount()": {
        "details": "Returns the count of noggles colors",
        "returns": {
          "_0": "the count of noggles colors"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "quadrantPalettesCount()": {
        "details": "Returns the count of quadrant palettes",
        "returns": {
          "_0": "the count of quadrant palettes"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "repsCount()": {
        "details": "Returns the count of reps",
        "returns": {
          "_0": "the count of reps"
        }
      },
      "shieldsCount()": {
        "details": "Returns the count of shields",
        "returns": {
          "_0": "the count of shields"
        }
      },
      "skillsCount()": {
        "details": "Returns the count of skills",
        "returns": {
          "_0": "the count of skills"
        }
      },
      "traitsCount()": {
        "details": "Returns the count of traits",
        "returns": {
          "_0": "the count of traits"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "PartsStore contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addBgColor((string,string))": {
        "notice": "Only the contract owner can call this function."
      },
      "addClass((string,string))": {
        "notice": "Only the contract owner can call this function."
      },
      "addCrown((string,string))": {
        "notice": "Only the contract owner can call this function."
      },
      "addDoodad((string,string))": {
        "notice": "Only the contract owner can call this function."
      },
      "addGarland((string,string))": {
        "notice": "Only the contract owner can call this function."
      },
      "addNogglesColor((string,string))": {
        "notice": "Only the contract owner can call this function."
      },
      "addQuadrantPalette((string,string,string))": {
        "notice": "Only the contract owner can call this function."
      },
      "addRep((string,string))": {
        "notice": "Only the contract owner can call this function."
      },
      "addShield((string,string))": {
        "notice": "Only the contract owner can call this function."
      },
      "addSkill((string,string))": {
        "notice": "Only the contract owner can call this function."
      },
      "addTrait((string,string))": {
        "notice": "Only the contract owner can call this function."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/PartsStore.sol:PartsStore",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11298,
        "contract": "contracts/PartsStore.sol:PartsStore",
        "label": "bgColors",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(Color)12045_storage)dyn_storage"
      },
      {
        "astId": 11302,
        "contract": "contracts/PartsStore.sol:PartsStore",
        "label": "nogglesColors",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Color)12045_storage)dyn_storage"
      },
      {
        "astId": 11306,
        "contract": "contracts/PartsStore.sol:PartsStore",
        "label": "crowns",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(ImagePart)12057_storage)dyn_storage"
      },
      {
        "astId": 11310,
        "contract": "contracts/PartsStore.sol:PartsStore",
        "label": "doodads",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(ImagePart)12057_storage)dyn_storage"
      },
      {
        "astId": 11314,
        "contract": "contracts/PartsStore.sol:PartsStore",
        "label": "garlands",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(ImagePart)12057_storage)dyn_storage"
      },
      {
        "astId": 11318,
        "contract": "contracts/PartsStore.sol:PartsStore",
        "label": "shields",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(ImagePart)12057_storage)dyn_storage"
      },
      {
        "astId": 11322,
        "contract": "contracts/PartsStore.sol:PartsStore",
        "label": "quadrantPalettes",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_struct(Palette)12052_storage)dyn_storage"
      },
      {
        "astId": 11326,
        "contract": "contracts/PartsStore.sol:PartsStore",
        "label": "reps",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(ImagePart)12057_storage)dyn_storage"
      },
      {
        "astId": 11330,
        "contract": "contracts/PartsStore.sol:PartsStore",
        "label": "skills",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(ImagePart)12057_storage)dyn_storage"
      },
      {
        "astId": 11334,
        "contract": "contracts/PartsStore.sol:PartsStore",
        "label": "classes",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_struct(ImagePart)12057_storage)dyn_storage"
      },
      {
        "astId": 11338,
        "contract": "contracts/PartsStore.sol:PartsStore",
        "label": "traits",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_struct(ImagePart)12057_storage)dyn_storage"
      },
      {
        "astId": 11341,
        "contract": "contracts/PartsStore.sol:PartsStore",
        "label": "locked",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Color)12045_storage)dyn_storage": {
        "base": "t_struct(Color)12045_storage",
        "encoding": "dynamic_array",
        "label": "struct IPartsStore.Color[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ImagePart)12057_storage)dyn_storage": {
        "base": "t_struct(ImagePart)12057_storage",
        "encoding": "dynamic_array",
        "label": "struct IPartsStore.ImagePart[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Palette)12052_storage)dyn_storage": {
        "base": "t_struct(Palette)12052_storage",
        "encoding": "dynamic_array",
        "label": "struct IPartsStore.Palette[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Color)12045_storage": {
        "encoding": "inplace",
        "label": "struct IPartsStore.Color",
        "members": [
          {
            "astId": 12042,
            "contract": "contracts/PartsStore.sol:PartsStore",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 12044,
            "contract": "contracts/PartsStore.sol:PartsStore",
            "label": "color",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ImagePart)12057_storage": {
        "encoding": "inplace",
        "label": "struct IPartsStore.ImagePart",
        "members": [
          {
            "astId": 12054,
            "contract": "contracts/PartsStore.sol:PartsStore",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 12056,
            "contract": "contracts/PartsStore.sol:PartsStore",
            "label": "svg",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Palette)12052_storage": {
        "encoding": "inplace",
        "label": "struct IPartsStore.Palette",
        "members": [
          {
            "astId": 12047,
            "contract": "contracts/PartsStore.sol:PartsStore",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 12049,
            "contract": "contracts/PartsStore.sol:PartsStore",
            "label": "primary",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 12051,
            "contract": "contracts/PartsStore.sol:PartsStore",
            "label": "secondary",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      }
    }
  }
}