{
  "address": "0xc3077fe8da3df9A3364db590D6D994ac490DE0Ea",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "storeAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        }
      ],
      "name": "generateDna",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "bgColorId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "nogglesColorId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "crownId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "doodadId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "garlandId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "shieldId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "quadrantPalette1Id",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "quadrantPalette2Id",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "repId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "skillId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "classId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "traitId",
              "type": "uint8"
            }
          ],
          "internalType": "struct DnaManager.TokenTraits",
          "name": "img",
          "type": "tuple"
        }
      ],
      "name": "getDnaFromImage",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "dna",
          "type": "uint96"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "dna",
          "type": "uint96"
        }
      ],
      "name": "getImageFromDna",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "bgColorId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "nogglesColorId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "crownId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "doodadId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "garlandId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "shieldId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "quadrantPalette1Id",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "quadrantPalette2Id",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "repId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "skillId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "classId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "traitId",
              "type": "uint8"
            }
          ],
          "internalType": "struct DnaManager.TokenTraits",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x73361ca7eb310da35bf6b1e41b554fd2eaca47594255dc80b5c0092b8863fa74",
  "receipt": {
    "to": null,
    "from": "0x5A78F12fF5dD11ee0b83CF84F47c0FCc602cA5E4",
    "contractAddress": "0xc3077fe8da3df9A3364db590D6D994ac490DE0Ea",
    "transactionIndex": 1,
    "gasUsed": "1137604",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xf7963bb736cebd43369971f566968e0cadc5eead0acce47fa8747872744f751d",
    "transactionHash": "0x73361ca7eb310da35bf6b1e41b554fd2eaca47594255dc80b5c0092b8863fa74",
    "logs": [],
    "blockNumber": 3782141,
    "cumulativeGasUsed": "1439173",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9e7cd3cfef600a1b4c551bb6afd2ef35",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"storeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"generateDna\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"bgColorId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"nogglesColorId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"crownId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"doodadId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"garlandId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"shieldId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"quadrantPalette1Id\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"quadrantPalette2Id\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"repId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skillId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"classId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"traitId\",\"type\":\"uint8\"}],\"internalType\":\"struct DnaManager.TokenTraits\",\"name\":\"img\",\"type\":\"tuple\"}],\"name\":\"getDnaFromImage\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"dna\",\"type\":\"uint96\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"dna\",\"type\":\"uint96\"}],\"name\":\"getImageFromDna\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"bgColorId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"nogglesColorId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"crownId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"doodadId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"garlandId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"shieldId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"quadrantPalette1Id\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"quadrantPalette2Id\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"repId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skillId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"classId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"traitId\",\"type\":\"uint8\"}],\"internalType\":\"struct DnaManager.TokenTraits\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"generateDna(address,uint256)\":{\"details\":\"using an address as param type to prevent 'invalid type' error when executing tests\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/DnaManager.sol\":\"DnaManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IPartsStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\ninterface IPartsStore {\\n    struct Color {\\n        string name;\\n        string color;\\n    }\\n\\n    struct Palette {\\n        string name;\\n        string primary;\\n        string secondary;\\n    }\\n\\n    struct ImagePart {\\n        string name;\\n        string svg;\\n    }\\n\\n    struct AllParts {\\n        string[] bgColors;\\n        string[] nogglesColors;\\n        string[] crowns;\\n        string[] doodads;\\n        string[] garlands;\\n        string[] shields;\\n        string[] quadrantPalettes;\\n        string[] reps;\\n        string[] skills;\\n        string[] classes;\\n        string[] traits;\\n    }\\n\\n    function bgColorsCount() external view returns (uint256);\\n\\n    function nogglesColorsCount() external view returns (uint256);\\n\\n    function crownsCount() external view returns (uint256);\\n\\n    function doodadsCount() external view returns (uint256);\\n\\n    function garlandsCount() external view returns (uint256);\\n\\n    function shieldsCount() external view returns (uint256);\\n\\n    function quadrantPalettesCount() external view returns (uint256);\\n\\n    function repsCount() external view returns (uint256);\\n\\n    function skillsCount() external view returns (uint256);\\n\\n    function classesCount() external view returns (uint256);\\n\\n    function traitsCount() external view returns (uint256);\\n\\n    function getBgColor(uint8 id) external view returns (Color memory);\\n\\n    function getNogglesColor(uint8 id) external view returns (Color memory);\\n\\n    function getCrown(uint8 id) external view returns (ImagePart memory);\\n\\n    function getDoodad(uint8 id) external view returns (ImagePart memory);\\n\\n    function getGarland(uint8 id) external view returns (ImagePart memory);\\n\\n    function getShield(uint8 id) external view returns (ImagePart memory);\\n\\n    function getQuadrantPalette(uint8 id) external view returns (Palette memory);\\n\\n    function getRep(uint8 id) external view returns (ImagePart memory);\\n\\n    function getSkill(uint8 id) external view returns (ImagePart memory);\\n\\n    function getClass(uint8 id) external view returns (ImagePart memory);\\n\\n    function getTrait(uint8 id) external view returns (ImagePart memory);\\n\\n    function addBgColor(Color calldata color) external;\\n\\n    function addNogglesColor(Color calldata color) external;\\n\\n    function addCrown(ImagePart calldata part) external;\\n\\n    function addDoodad(ImagePart calldata part) external;\\n\\n    function addGarland(ImagePart calldata part) external;\\n\\n    function addShield(ImagePart calldata part) external;\\n\\n    function addQuadrantPalette(Palette calldata palette) external;\\n\\n    function addRep(ImagePart calldata part) external;\\n\\n    function addSkill(ImagePart calldata part) external;\\n\\n    function addClass(ImagePart calldata part) external;\\n\\n    function addTrait(ImagePart calldata part) external;\\n\\n    function getAllParts() external returns (AllParts memory);\\n}\\n\",\"keccak256\":\"0x2c4900a6007078e078250e3988a4970f43caf889a629c0200d093f32ac163409\",\"license\":\"MIT\"},\"contracts/lib/DnaManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IPartsStore} from \\\"../interfaces/IPartsStore.sol\\\";\\n\\nlibrary DnaManager {\\n    struct TokenTraits {\\n        uint8 bgColorId;\\n        uint8 nogglesColorId;\\n        uint8 crownId;\\n        uint8 doodadId;\\n        uint8 garlandId;\\n        uint8 shieldId;\\n        uint8 quadrantPalette1Id;\\n        uint8 quadrantPalette2Id;\\n        uint8 repId;\\n        uint8 skillId;\\n        uint8 classId;\\n        uint8 traitId;\\n    }\\n\\n    /**\\n     * @dev using an address as param type to prevent 'invalid type' error when executing tests\\n     */\\n    function generateDna(address storeAddress, uint256 seed) public view returns (uint96) {\\n        IPartsStore store = IPartsStore(storeAddress);\\n\\n        require(store.bgColorsCount() > 0, \\\"No bg colors\\\");\\n        require(store.nogglesColorsCount() > 0, \\\"No noggles colors\\\");\\n        require(store.crownsCount() > 0, \\\"No crowns\\\");\\n        require(store.doodadsCount() > 0, \\\"No doodads\\\");\\n        require(store.garlandsCount() > 0, \\\"No garlands\\\");\\n        require(store.shieldsCount() > 0, \\\"No shields\\\");\\n        require(store.quadrantPalettesCount() > 0, \\\"No logo palettes\\\");\\n        require(store.repsCount() > 0, \\\"No reps\\\");\\n        require(store.skillsCount() > 0, \\\"No skills\\\");\\n        require(store.classesCount() > 0, \\\"No classes\\\");\\n        require(store.traitsCount() > 0, \\\"No traits\\\");\\n\\n        // not truely random but it won't matter, we want a unique dna based on any number, usually a timestamp\\n        uint rand = uint(keccak256(abi.encodePacked(seed)));\\n\\n        return reduceDna(storeAddress, uint96(rand));\\n    }\\n\\n    /**\\n     * @dev using an address as param type to prevent 'invalid type' error when executing tests\\n     */\\n    function reduceDna(address storeAddress, uint96 dna) private view returns (uint96) {\\n        IPartsStore store = IPartsStore(storeAddress);\\n\\n        TokenTraits memory image = TokenTraits({\\n            bgColorId: uint8(dna % store.bgColorsCount()),\\n            nogglesColorId: uint8((dna >> 8) % store.nogglesColorsCount()),\\n            crownId: uint8((dna >> 16) % store.crownsCount()),\\n            doodadId: uint8((dna >> 24) % store.doodadsCount()),\\n            garlandId: uint8((dna >> 32) % store.garlandsCount()),\\n            shieldId: uint8((dna >> 40) % store.shieldsCount()),\\n            quadrantPalette1Id: uint8((dna >> 48) % store.quadrantPalettesCount()),\\n            quadrantPalette2Id: uint8((dna >> 56) % store.quadrantPalettesCount()),\\n            repId: uint8((dna >> 64) % store.repsCount()),\\n            skillId: uint8((dna >> 72) % store.skillsCount()),\\n            classId: uint8((dna >> 80) % store.classesCount()),\\n            traitId: uint8((dna >> 88) % store.traitsCount())\\n        });\\n\\n        return getDnaFromImage(image);\\n    }\\n\\n    function getImageFromDna(uint96 dna) public pure returns (TokenTraits memory) {\\n        return\\n            TokenTraits({\\n                bgColorId: uint8(dna),\\n                nogglesColorId: uint8((dna >> 8)),\\n                crownId: uint8((dna >> 16)),\\n                doodadId: uint8((dna >> 24)),\\n                garlandId: uint8((dna >> 32)),\\n                shieldId: uint8((dna >> 40)),\\n                quadrantPalette1Id: uint8((dna >> 48)),\\n                quadrantPalette2Id: uint8((dna >> 56)),\\n                repId: uint8((dna >> 64)),\\n                skillId: uint8((dna >> 72)),\\n                classId: uint8((dna >> 80)),\\n                traitId: uint8((dna >> 88))\\n            });\\n    }\\n\\n    function getDnaFromImage(TokenTraits memory img) public pure returns (uint96 dna) {\\n        return\\n            uint96(img.bgColorId) |\\n            (uint96(img.nogglesColorId) << 8) |\\n            (uint96(img.crownId) << 16) |\\n            (uint96(img.doodadId) << 24) |\\n            (uint96(img.garlandId) << 32) |\\n            (uint96(img.shieldId) << 40) |\\n            (uint96(img.quadrantPalette1Id) << 48) |\\n            (uint96(img.quadrantPalette2Id) << 56) |\\n            (uint96(img.repId) << 64) |\\n            (uint96(img.skillId) << 72) |\\n            (uint96(img.classId) << 80) |\\n            (uint96(img.traitId) << 88);\\n    }\\n}\\n\",\"keccak256\":\"0x883208347399d1de9656fce508c146032933e579ac3bdf85fef06aa3d7d40f29\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "generateDna(address,uint256)": {
        "details": "using an address as param type to prevent 'invalid type' error when executing tests"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}