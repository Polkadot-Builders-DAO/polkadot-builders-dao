{
  "address": "0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ICrest",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bid",
          "type": "uint256"
        }
      ],
      "name": "Bid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Start",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuction",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentBid",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "bidder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minBid",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isFinished",
              "type": "bool"
            }
          ],
          "internalType": "struct AuctionHouse.AuctionState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "treasury",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "glmr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "extendedDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minFirstBid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBidIncrementPercent",
              "type": "uint256"
            }
          ],
          "internalType": "struct AuctionHouse.AuctionConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "glmr",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "setDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_extendedDuration",
          "type": "uint256"
        }
      ],
      "name": "setExtendedDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_glmr",
          "type": "address"
        }
      ],
      "name": "setGLMR",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minBidIncrementPercent",
          "type": "uint256"
        }
      ],
      "name": "setMinBidIncrementPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minFirstBid",
          "type": "uint256"
        }
      ],
      "name": "setMinFirstBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "start",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x69193f115f46932cee5536ebf15421a54b1a613db3cd005521df3cb07de8d9d7",
  "receipt": {
    "to": null,
    "from": "0x6bdFDC29A4bd39Bf97D4C75c7f03b9dcbb9374af",
    "contractAddress": "0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87",
    "transactionIndex": 3,
    "gasUsed": "1385379",
    "logsBloom": "0x
    "blockHash": "0x5c86c05838a488d85d542bf8a47fb871ad0e8130b7461a587a605f5b179f72c5",
    "transactionHash": "0x69193f115f46932cee5536ebf15421a54b1a613db3cd005521df3cb07de8d9d7",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 4065903,
        "transactionHash": "0x69193f115f46932cee5536ebf15421a54b1a613db3cd005521df3cb07de8d9d7",
        "address": "0x89bE56Ce74C86eA90e429fBb98824aEf435C8e87",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006bdfdc29a4bd39bf97d4c75c7f03b9dcbb9374af"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x5c86c05838a488d85d542bf8a47fb871ad0e8130b7461a587a605f5b179f72c5"
      }
    ],
    "blockNumber": 4065903,
    "cumulativeGasUsed": "2114263",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8417F77904a86436223942a516f00F8aDF933B70",
    "0x6bdFDC29A4bd39Bf97D4C75c7f03b9dcbb9374af"
  ],
  "numDeployments": 2,
  "solcInputHash": "84ca75526b28510547d3ce718e5855d8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ICrest\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Start\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuction\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFinished\",\"type\":\"bool\"}],\"internalType\":\"struct AuctionHouse.AuctionState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"glmr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extendedDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFirstBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBidIncrementPercent\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionHouse.AuctionConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"glmr\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_extendedDuration\",\"type\":\"uint256\"}],\"name\":\"setExtendedDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_glmr\",\"type\":\"address\"}],\"name\":\"setGLMR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBidIncrementPercent\",\"type\":\"uint256\"}],\"name\":\"setMinBidIncrementPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minFirstBid\",\"type\":\"uint256\"}],\"name\":\"setMinFirstBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Polkadot Builders\",\"custom:security-contact\":\"contact@polkadot-builders.xyz\",\"details\":\"This contract allows for the creation and execution of auctions for Polkadot Builder Crests NFTs.\",\"kind\":\"dev\",\"methods\":{\"bid()\":{\"details\":\"Place a bid for the current auction.\"},\"constructor\":{\"details\":\"Initializes the contract with the given token and treasury addresses\",\"params\":{\"_token\":\"The ERC721 token used in the auction\",\"_treasury\":\"The address to receive the auction proceeds\"}},\"getAuction()\":{\"returns\":{\"_0\":\"AuctionState The state of the current auction.\"}},\"getConfig()\":{\"details\":\"Returns the current auction house configuration parametersReturns the current auction house configuration parameters\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Required method for a contract to allow receiving an ERC721 token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pauses the contract\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDuration(uint256)\":{\"details\":\"Sets the duration, in seconds, of the auction\",\"params\":{\"_duration\":\"The new duration, in seconds, of the auction\"}},\"setExtendedDuration(uint256)\":{\"details\":\"Sets the extended duration, in seconds, of the auction\",\"params\":{\"_extendedDuration\":\"The new extended duration, in seconds, of the auction\"}},\"setGLMR(address)\":{\"details\":\"Sets the address of the ERC20 precompiled contract for GLMR\",\"params\":{\"_glmr\":\"The new GLMR contract address\"}},\"setMinBidIncrementPercent(uint256)\":{\"details\":\"Sets the minimum bid increment percentage for the auction\",\"params\":{\"_minBidIncrementPercent\":\"The new minimum bid increment percentage for the auction\"}},\"setMinFirstBid(uint256)\":{\"details\":\"Sets the minimum bid amount for the auction\",\"params\":{\"_minFirstBid\":\"The new minimum bid amount for the auction\"}},\"setTreasury(address)\":{\"details\":\"Sets the address of the treasury account\",\"params\":{\"_treasury\":\"The new treasury address\"}},\"start()\":{\"details\":\"Ends previous auction and starts a new one.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpauses the contract\"}},\"title\":\"Auction House contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bid()\":{\"notice\":\"Place a bid for the current auction.\"},\"getAuction()\":{\"notice\":\"Returns the state of the current auction.\"},\"pause()\":{\"notice\":\"Disallows new auctions to be created\"},\"setDuration(uint256)\":{\"notice\":\"Sets the duration, in seconds, of the auction\"},\"setExtendedDuration(uint256)\":{\"notice\":\"Sets the extended duration, in seconds, of the auction\"},\"setGLMR(address)\":{\"notice\":\"Sets the address of the ERC20 precompiled contract for GLMR\"},\"setTreasury(address)\":{\"notice\":\"Sets the address of the treasury account\"},\"start()\":{\"notice\":\"Ends previous auction and starts a new one.\"},\"unpause()\":{\"notice\":\"Allows new auctions to be created\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AuctionHouse.sol\":\"AuctionHouse\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/AuctionHouse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport {ICrest} from \\\"./interfaces/ICrest.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Auction House contract\\n * @author Polkadot Builders\\n * @dev This contract allows for the creation and execution of auctions for Polkadot Builder Crests NFTs.\\n * @custom:security-contact contact@polkadot-builders.xyz\\n */\\ncontract AuctionHouse is Ownable, ReentrancyGuard, IERC721Receiver, Pausable {\\n    /**\\n     * @dev AuctionConfig struct containing auction configuration parameters\\n     */\\n    struct AuctionConfig {\\n        address treasury;\\n        address token;\\n        address glmr;\\n        uint duration;\\n        uint extendedDuration;\\n        uint minFirstBid;\\n        uint minBidIncrementPercent;\\n    }\\n\\n    /**\\n     * @dev AuctionState struct containing the current state of an auction\\n     */\\n    struct AuctionState {\\n        uint tokenId;\\n        uint startTime;\\n        uint endTime;\\n        uint currentBid;\\n        address bidder;\\n        uint minBid;\\n        bool isFinished;\\n    }\\n\\n    address public treasury;\\n    IERC20 public glmr = IERC20(0x0000000000000000000000000000000000000802);\\n\\n    ICrest private token;\\n    uint private duration = 1 days;\\n    uint private extendedDuration = 10 minutes;\\n    uint private minFirstBid = 1 ether;\\n    uint private minBidIncrementPercent = 1;\\n\\n    uint private startTime;\\n    uint private endTime;\\n    uint private currentBid;\\n    uint private tokenId;\\n    address private bidder;\\n\\n    event Bid(uint tokenId, address bidder, uint bid);\\n    event Start(uint tokenId);\\n\\n    /**\\n     * @dev Initializes the contract with the given token and treasury addresses\\n     * @param _token The ERC721 token used in the auction\\n     * @param _treasury The address to receive the auction proceeds\\n     */\\n    constructor(ICrest _token, address _treasury) {\\n        token = _token;\\n        treasury = _treasury;\\n    }\\n\\n    /**\\n     * @notice Disallows new auctions to be created\\n     * @dev Pauses the contract\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Allows new auctions to be created\\n     * @dev Unpauses the contract\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Sets the address of the treasury account\\n     * @dev Sets the address of the treasury account\\n     * @param _treasury The new treasury address\\n     */\\n    function setTreasury(address _treasury) external onlyOwner {\\n        treasury = _treasury;\\n    }\\n\\n    /**\\n     * @notice Sets the address of the ERC20 precompiled contract for GLMR\\n     * @dev Sets the address of the ERC20 precompiled contract for GLMR\\n     * @param _glmr The new GLMR contract address\\n     */\\n    function setGLMR(IERC20 _glmr) external onlyOwner {\\n        glmr = _glmr;\\n    }\\n\\n    /**\\n     * @notice Sets the duration, in seconds, of the auction\\n     * @dev Sets the duration, in seconds, of the auction\\n     * @param _duration The new duration, in seconds, of the auction\\n     */\\n    function setDuration(uint _duration) external onlyOwner {\\n        duration = _duration;\\n    }\\n\\n    /**\\n     * @notice Sets the extended duration, in seconds, of the auction\\n     * @dev Sets the extended duration, in seconds, of the auction\\n     * @param _extendedDuration The new extended duration, in seconds, of the auction\\n     */\\n    function setExtendedDuration(uint _extendedDuration) external onlyOwner {\\n        extendedDuration = _extendedDuration;\\n    }\\n\\n    /**\\n     * @dev Sets the minimum bid amount for the auction\\n     * @param _minFirstBid The new minimum bid amount for the auction\\n     */\\n    function setMinFirstBid(uint _minFirstBid) external onlyOwner {\\n        minFirstBid = _minFirstBid;\\n    }\\n\\n    /**\\n     * @dev Sets the minimum bid increment percentage for the auction\\n     * @param _minBidIncrementPercent The new minimum bid increment percentage for the auction\\n     */\\n    function setMinBidIncrementPercent(uint _minBidIncrementPercent) external onlyOwner {\\n        minBidIncrementPercent = _minBidIncrementPercent;\\n    }\\n\\n    /**\\n     * @dev Returns the current auction house configuration parameters\\n     * @dev Returns the current auction house configuration parameters\\n     */\\n    function getConfig() external view returns (AuctionConfig memory) {\\n        return\\n            AuctionConfig(\\n                treasury,\\n                address(token),\\n                address(glmr),\\n                duration,\\n                extendedDuration,\\n                minFirstBid,\\n                minBidIncrementPercent\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the state of the current auction.\\n     * @return AuctionState The state of the current auction.\\n     */\\n    function getAuction() external view returns (AuctionState memory) {\\n        return\\n            AuctionState(\\n                tokenId,\\n                startTime,\\n                endTime,\\n                currentBid,\\n                bidder,\\n                getCurrentMinBid(),\\n                bool(block.timestamp > endTime)\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the minimum bid amount required for the current auction.\\n     * @dev Returns the minimum bid amount required for the current auction.\\n     * @return uint The minimum bid amount required for the current auction.\\n     */\\n    function getCurrentMinBid() private view returns (uint) {\\n        if (currentBid == 0) return minFirstBid;\\n        return currentBid + ((currentBid * minBidIncrementPercent) / 100);\\n    }\\n\\n    /**\\n     * @notice Place a bid for the current auction.\\n     * @dev Place a bid for the current auction.\\n     */\\n    function bid() external payable nonReentrant {\\n        require(block.timestamp >= startTime, \\\"Auction hasn't started yet\\\");\\n        require(block.timestamp <= endTime, \\\"Auction has ended\\\");\\n        require(msg.value >= getCurrentMinBid(), \\\"Bid amount is too low\\\");\\n\\n        // refund previous bidder\\n        if (bidder != address(0)) safeSendEther(payable(bidder), currentBid);\\n\\n        // extend auction duration\\n        if (block.timestamp + extendedDuration > endTime)\\n            endTime = block.timestamp + extendedDuration;\\n\\n        bidder = msg.sender;\\n        currentBid = msg.value;\\n\\n        emit Bid(tokenId, bidder, currentBid);\\n    }\\n\\n    /**\\n     * @notice Ends previous auction and starts a new one.\\n     * @dev Ends previous auction and starts a new one.\\n     */\\n    function start() external nonReentrant whenNotPaused {\\n        require(block.timestamp > endTime, \\\"Auction hasn't ended yet\\\");\\n\\n        // send the token to the latest winner\\n        if (bidder != address(0))\\n            token.safeTransferFrom(address(this), bidder, tokenId);\\n            // or burn the nft if there's no bidder\\n        else if (tokenId > 0) token.burn(tokenId);\\n\\n        // send the bid amount to the treasury\\n        if (currentBid > 0) safeSendEther(payable(treasury), currentBid);\\n\\n        // mint a new token\\n        token.mint();\\n\\n        // initialize next auction\\n        startTime = block.timestamp;\\n        endTime = startTime + duration;\\n        currentBid = 0;\\n        bidder = address(0);\\n        tokenId = token.tokenOfOwnerByIndex(address(this), 0);\\n        emit Start(tokenId);\\n    }\\n\\n    /**\\n     * @dev Safely sends Ether to the recipient.\\n     * @param _to The recipient of the Ether.\\n     * @param _amount The amount of Ether to send.\\n     */\\n    function safeSendEther(address payable _to, uint _amount) private {\\n        (bool sent, ) = _to.call{value: _amount}(\\\"\\\");\\n        // transfer may fail if the recipient is a contract. If so, send GLMR over precompiled ERC20 contract\\n        if (!sent) glmr.transfer(_to, _amount);\\n    }\\n\\n    /**\\n     * @dev Required method for a contract to allow receiving an ERC721 token.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xde722014c9d1bac0d307bd79bb37339bae3fe2a4bdfa507ab286d33630e3f346\",\"license\":\"MIT\"},\"contracts/interfaces/ICrest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC721Enumerable} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface ICrest is IERC721Enumerable {\\n    function mint() external;\\n\\n    function mintSpecific(address to, uint96 dna) external;\\n\\n    function burn(uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0x612110efd011539a958f5440a1cfb1b7f01cd5be6298878d11a816eba9a485ca\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600380546001600160a01b03191661080217905562015180600555610258600655670de0b6b3a764000060075560016008553480156200004357600080fd5b50604051620015ed380380620015ed83398101604081905262000066916200011d565b6200007133620000b4565b6001805560028054600480546001600160a01b039586166001600160a01b031990911617905591909216610100026001600160a81b03199091161790556200015c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200011a57600080fd5b50565b600080604083850312156200013157600080fd5b82516200013e8162000104565b6020840151909250620001518162000104565b809150509250929050565b611481806200016c6000396000f3fe6080604052600436106101445760003560e01c80638456cb59116100c0578063c3f909d411610074578063f0f4426011610059578063f0f442601461047e578063f2fde38b1461049e578063f6be71d1146104be57600080fd5b8063c3f909d4146103d7578063e0f0815c1461045e57600080fd5b80638da5cb5b116100a55780638da5cb5b14610377578063b535ef80146103a2578063be9a6555146103c257600080fd5b80638456cb59146103425780638b0587151461035757600080fd5b80633f4ba83a1161011757806361d027b3116100fc57806361d027b314610278578063715018a6146102aa5780637327df25146102bf57600080fd5b80633f4ba83a146102405780635c975abb1461025557600080fd5b806312d8e41b14610149578063150b7a02146101a05780631998aeef146102165780633d44ce3214610220575b600080fd5b34801561015557600080fd5b506003546101769073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b3480156101ac57600080fd5b506101e56101bb36600461129a565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610197565b61021e6104de565b005b34801561022c57600080fd5b5061021e61023b366004611339565b610721565b34801561024c57600080fd5b5061021e61072e565b34801561026157600080fd5b5060025460ff166040519015158152602001610197565b34801561028457600080fd5b5060025461017690610100900473ffffffffffffffffffffffffffffffffffffffff1681565b3480156102b657600080fd5b5061021e61073e565b3480156102cb57600080fd5b506102d4610750565b6040516101979190600060e0820190508251825260208301516020830152604083015160408301526060830151606083015273ffffffffffffffffffffffffffffffffffffffff608084015116608083015260a083015160a083015260c0830151151560c083015292915050565b34801561034e57600080fd5b5061021e61080d565b34801561036357600080fd5b5061021e610372366004611352565b61081d565b34801561038357600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff16610176565b3480156103ae57600080fd5b5061021e6103bd366004611339565b61086c565b3480156103ce57600080fd5b5061021e610879565b3480156103e357600080fd5b506103ec610c05565b6040516101979190600060e08201905073ffffffffffffffffffffffffffffffffffffffff80845116835280602085015116602084015280604085015116604084015250606083015160608301526080830151608083015260a083015160a083015260c083015160c083015292915050565b34801561046a57600080fd5b5061021e610479366004611339565b610cec565b34801561048a57600080fd5b5061021e610499366004611352565b610cf9565b3480156104aa57600080fd5b5061021e6104b9366004611352565b610d4d565b3480156104ca57600080fd5b5061021e6104d9366004611339565b610e04565b6104e6610e11565b600954421015610557576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f41756374696f6e206861736e277420737461727465642079657400000000000060448201526064015b60405180910390fd5b600a544211156105c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f41756374696f6e2068617320656e646564000000000000000000000000000000604482015260640161054e565b6105cb610e84565b341015610634576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f42696420616d6f756e7420697320746f6f206c6f770000000000000000000000604482015260640161054e565b600d5473ffffffffffffffffffffffffffffffffffffffff161561067857600d54600b546106789173ffffffffffffffffffffffffffffffffffffffff1690610ec5565b600a5460065461068890426113a5565b111561069f5760065461069b90426113a5565b600a555b600d80547fffffffffffffffffffffffff0000000000000000000000000000000000000000163390811790915534600b819055600c54604080519182526020820193909352918201527fdcd726e11f8b5e160f00290f0fe3a1abb547474e53a8e7a8f49a85e7b1ca3199906060015b60405180910390a161071f60018055565b565b610729610fd1565b600755565b610736610fd1565b61071f611052565b610746610fd1565b61071f60006110cf565b6107a86040518060e0016040528060008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b6040805160e081018252600c5481526009546020820152600a5491810191909152600b546060820152600d5473ffffffffffffffffffffffffffffffffffffffff16608082015260a081016107fb610e84565b8152600a544211602090910152919050565b610815610fd1565b61071f611144565b610825610fd1565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b610874610fd1565b600655565b610881610e11565b61088961119f565b600a5442116108f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f41756374696f6e206861736e277420656e646564207965740000000000000000604482015260640161054e565b600d5473ffffffffffffffffffffffffffffffffffffffff16156109ae5760048054600d54600c546040517f42842e0e000000000000000000000000000000000000000000000000000000008152309481019490945273ffffffffffffffffffffffffffffffffffffffff9182166024850152604484015216906342842e0e90606401600060405180830381600087803b15801561099157600080fd5b505af11580156109a5573d6000803e3d6000fd5b50505050610a3a565b600c5415610a3a5760048054600c546040517f42966c680000000000000000000000000000000000000000000000000000000081529283015273ffffffffffffffffffffffffffffffffffffffff16906342966c6890602401600060405180830381600087803b158015610a2157600080fd5b505af1158015610a35573d6000803e3d6000fd5b505050505b600b5415610a6d57600254600b54610a6d91610100900473ffffffffffffffffffffffffffffffffffffffff1690610ec5565b60048054604080517f1249c58b000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921692631249c58b92828201926000929082900301818387803b158015610ad657600080fd5b505af1158015610aea573d6000803e3d6000fd5b5050426009819055600554610b01935091506113a5565b600a556000600b819055600d80547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055600480546040517f2f745c590000000000000000000000000000000000000000000000000000000081523092810192909252602482019290925273ffffffffffffffffffffffffffffffffffffffff90911690632f745c5990604401602060405180830381865afa158015610bac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd091906113be565b600c8190556040519081527ff06a29c94c6f4edc1085072972d9441f7603e81c8535a308f214285d0653c8509060200161070e565b610c876040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081525090565b506040805160e08101825260025473ffffffffffffffffffffffffffffffffffffffff610100909104811682526004548116602083015260035416918101919091526005546060820152600654608082015260075460a082015260085460c082015290565b610cf4610fd1565b600855565b610d01610fd1565b6002805473ffffffffffffffffffffffffffffffffffffffff909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b610d55610fd1565b73ffffffffffffffffffffffffffffffffffffffff8116610df8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161054e565b610e01816110cf565b50565b610e0c610fd1565b600555565b600260015403610e7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161054e565b6002600155565b6000600b54600003610e97575060075490565b6064600854600b54610ea991906113d7565b610eb391906113ee565b600b54610ec091906113a5565b905090565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610f1f576040519150601f19603f3d011682016040523d82523d6000602084013e610f24565b606091505b5050905080610fcc576003546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af1158015610fa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fca9190611429565b505b505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461071f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161054e565b61105a61120c565b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61114c61119f565b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586110a53390565b60025460ff161561071f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161054e565b60025460ff1661071f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640161054e565b73ffffffffffffffffffffffffffffffffffffffff81168114610e0157600080fd5b6000806000806000608086880312156112b257600080fd5b85356112bd81611278565b945060208601356112cd81611278565b935060408601359250606086013567ffffffffffffffff808211156112f157600080fd5b818801915088601f83011261130557600080fd5b81358181111561131457600080fd5b89602082850101111561132657600080fd5b9699959850939650602001949392505050565b60006020828403121561134b57600080fd5b5035919050565b60006020828403121561136457600080fd5b813561136f81611278565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156113b8576113b8611376565b92915050565b6000602082840312156113d057600080fd5b5051919050565b80820281158282048414176113b8576113b8611376565b600082611424577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60006020828403121561143b57600080fd5b8151801515811461136f57600080fdfea2646970667358221220f42e863b46c0972fb9e01200f77aae4d54a24d1ab7d44874006c0c380e14a65a64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101445760003560e01c80638456cb59116100c0578063c3f909d411610074578063f0f4426011610059578063f0f442601461047e578063f2fde38b1461049e578063f6be71d1146104be57600080fd5b8063c3f909d4146103d7578063e0f0815c1461045e57600080fd5b80638da5cb5b116100a55780638da5cb5b14610377578063b535ef80146103a2578063be9a6555146103c257600080fd5b80638456cb59146103425780638b0587151461035757600080fd5b80633f4ba83a1161011757806361d027b3116100fc57806361d027b314610278578063715018a6146102aa5780637327df25146102bf57600080fd5b80633f4ba83a146102405780635c975abb1461025557600080fd5b806312d8e41b14610149578063150b7a02146101a05780631998aeef146102165780633d44ce3214610220575b600080fd5b34801561015557600080fd5b506003546101769073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b3480156101ac57600080fd5b506101e56101bb36600461129a565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610197565b61021e6104de565b005b34801561022c57600080fd5b5061021e61023b366004611339565b610721565b34801561024c57600080fd5b5061021e61072e565b34801561026157600080fd5b5060025460ff166040519015158152602001610197565b34801561028457600080fd5b5060025461017690610100900473ffffffffffffffffffffffffffffffffffffffff1681565b3480156102b657600080fd5b5061021e61073e565b3480156102cb57600080fd5b506102d4610750565b6040516101979190600060e0820190508251825260208301516020830152604083015160408301526060830151606083015273ffffffffffffffffffffffffffffffffffffffff608084015116608083015260a083015160a083015260c0830151151560c083015292915050565b34801561034e57600080fd5b5061021e61080d565b34801561036357600080fd5b5061021e610372366004611352565b61081d565b34801561038357600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff16610176565b3480156103ae57600080fd5b5061021e6103bd366004611339565b61086c565b3480156103ce57600080fd5b5061021e610879565b3480156103e357600080fd5b506103ec610c05565b6040516101979190600060e08201905073ffffffffffffffffffffffffffffffffffffffff80845116835280602085015116602084015280604085015116604084015250606083015160608301526080830151608083015260a083015160a083015260c083015160c083015292915050565b34801561046a57600080fd5b5061021e610479366004611339565b610cec565b34801561048a57600080fd5b5061021e610499366004611352565b610cf9565b3480156104aa57600080fd5b5061021e6104b9366004611352565b610d4d565b3480156104ca57600080fd5b5061021e6104d9366004611339565b610e04565b6104e6610e11565b600954421015610557576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f41756374696f6e206861736e277420737461727465642079657400000000000060448201526064015b60405180910390fd5b600a544211156105c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f41756374696f6e2068617320656e646564000000000000000000000000000000604482015260640161054e565b6105cb610e84565b341015610634576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f42696420616d6f756e7420697320746f6f206c6f770000000000000000000000604482015260640161054e565b600d5473ffffffffffffffffffffffffffffffffffffffff161561067857600d54600b546106789173ffffffffffffffffffffffffffffffffffffffff1690610ec5565b600a5460065461068890426113a5565b111561069f5760065461069b90426113a5565b600a555b600d80547fffffffffffffffffffffffff0000000000000000000000000000000000000000163390811790915534600b819055600c54604080519182526020820193909352918201527fdcd726e11f8b5e160f00290f0fe3a1abb547474e53a8e7a8f49a85e7b1ca3199906060015b60405180910390a161071f60018055565b565b610729610fd1565b600755565b610736610fd1565b61071f611052565b610746610fd1565b61071f60006110cf565b6107a86040518060e0016040528060008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b6040805160e081018252600c5481526009546020820152600a5491810191909152600b546060820152600d5473ffffffffffffffffffffffffffffffffffffffff16608082015260a081016107fb610e84565b8152600a544211602090910152919050565b610815610fd1565b61071f611144565b610825610fd1565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b610874610fd1565b600655565b610881610e11565b61088961119f565b600a5442116108f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f41756374696f6e206861736e277420656e646564207965740000000000000000604482015260640161054e565b600d5473ffffffffffffffffffffffffffffffffffffffff16156109ae5760048054600d54600c546040517f42842e0e000000000000000000000000000000000000000000000000000000008152309481019490945273ffffffffffffffffffffffffffffffffffffffff9182166024850152604484015216906342842e0e90606401600060405180830381600087803b15801561099157600080fd5b505af11580156109a5573d6000803e3d6000fd5b50505050610a3a565b600c5415610a3a5760048054600c546040517f42966c680000000000000000000000000000000000000000000000000000000081529283015273ffffffffffffffffffffffffffffffffffffffff16906342966c6890602401600060405180830381600087803b158015610a2157600080fd5b505af1158015610a35573d6000803e3d6000fd5b505050505b600b5415610a6d57600254600b54610a6d91610100900473ffffffffffffffffffffffffffffffffffffffff1690610ec5565b60048054604080517f1249c58b000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921692631249c58b92828201926000929082900301818387803b158015610ad657600080fd5b505af1158015610aea573d6000803e3d6000fd5b5050426009819055600554610b01935091506113a5565b600a556000600b819055600d80547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055600480546040517f2f745c590000000000000000000000000000000000000000000000000000000081523092810192909252602482019290925273ffffffffffffffffffffffffffffffffffffffff90911690632f745c5990604401602060405180830381865afa158015610bac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd091906113be565b600c8190556040519081527ff06a29c94c6f4edc1085072972d9441f7603e81c8535a308f214285d0653c8509060200161070e565b610c876040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081525090565b506040805160e08101825260025473ffffffffffffffffffffffffffffffffffffffff610100909104811682526004548116602083015260035416918101919091526005546060820152600654608082015260075460a082015260085460c082015290565b610cf4610fd1565b600855565b610d01610fd1565b6002805473ffffffffffffffffffffffffffffffffffffffff909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b610d55610fd1565b73ffffffffffffffffffffffffffffffffffffffff8116610df8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161054e565b610e01816110cf565b50565b610e0c610fd1565b600555565b600260015403610e7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161054e565b6002600155565b6000600b54600003610e97575060075490565b6064600854600b54610ea991906113d7565b610eb391906113ee565b600b54610ec091906113a5565b905090565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610f1f576040519150601f19603f3d011682016040523d82523d6000602084013e610f24565b606091505b5050905080610fcc576003546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af1158015610fa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fca9190611429565b505b505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461071f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161054e565b61105a61120c565b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61114c61119f565b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586110a53390565b60025460ff161561071f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161054e565b60025460ff1661071f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640161054e565b73ffffffffffffffffffffffffffffffffffffffff81168114610e0157600080fd5b6000806000806000608086880312156112b257600080fd5b85356112bd81611278565b945060208601356112cd81611278565b935060408601359250606086013567ffffffffffffffff808211156112f157600080fd5b818801915088601f83011261130557600080fd5b81358181111561131457600080fd5b89602082850101111561132657600080fd5b9699959850939650602001949392505050565b60006020828403121561134b57600080fd5b5035919050565b60006020828403121561136457600080fd5b813561136f81611278565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156113b8576113b8611376565b92915050565b6000602082840312156113d057600080fd5b5051919050565b80820281158282048414176113b8576113b8611376565b600082611424577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60006020828403121561143b57600080fd5b8151801515811461136f57600080fdfea2646970667358221220f42e863b46c0972fb9e01200f77aae4d54a24d1ab7d44874006c0c380e14a65a64736f6c63430008110033",
  "devdoc": {
    "author": "Polkadot Builders",
    "custom:security-contact": "contact@polkadot-builders.xyz",
    "details": "This contract allows for the creation and execution of auctions for Polkadot Builder Crests NFTs.",
    "kind": "dev",
    "methods": {
      "bid()": {
        "details": "Place a bid for the current auction."
      },
      "constructor": {
        "details": "Initializes the contract with the given token and treasury addresses",
        "params": {
          "_token": "The ERC721 token used in the auction",
          "_treasury": "The address to receive the auction proceeds"
        }
      },
      "getAuction()": {
        "returns": {
          "_0": "AuctionState The state of the current auction."
        }
      },
      "getConfig()": {
        "details": "Returns the current auction house configuration parametersReturns the current auction house configuration parameters"
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "Required method for a contract to allow receiving an ERC721 token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pauses the contract"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDuration(uint256)": {
        "details": "Sets the duration, in seconds, of the auction",
        "params": {
          "_duration": "The new duration, in seconds, of the auction"
        }
      },
      "setExtendedDuration(uint256)": {
        "details": "Sets the extended duration, in seconds, of the auction",
        "params": {
          "_extendedDuration": "The new extended duration, in seconds, of the auction"
        }
      },
      "setGLMR(address)": {
        "details": "Sets the address of the ERC20 precompiled contract for GLMR",
        "params": {
          "_glmr": "The new GLMR contract address"
        }
      },
      "setMinBidIncrementPercent(uint256)": {
        "details": "Sets the minimum bid increment percentage for the auction",
        "params": {
          "_minBidIncrementPercent": "The new minimum bid increment percentage for the auction"
        }
      },
      "setMinFirstBid(uint256)": {
        "details": "Sets the minimum bid amount for the auction",
        "params": {
          "_minFirstBid": "The new minimum bid amount for the auction"
        }
      },
      "setTreasury(address)": {
        "details": "Sets the address of the treasury account",
        "params": {
          "_treasury": "The new treasury address"
        }
      },
      "start()": {
        "details": "Ends previous auction and starts a new one."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpauses the contract"
      }
    },
    "title": "Auction House contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bid()": {
        "notice": "Place a bid for the current auction."
      },
      "getAuction()": {
        "notice": "Returns the state of the current auction."
      },
      "pause()": {
        "notice": "Disallows new auctions to be created"
      },
      "setDuration(uint256)": {
        "notice": "Sets the duration, in seconds, of the auction"
      },
      "setExtendedDuration(uint256)": {
        "notice": "Sets the extended duration, in seconds, of the auction"
      },
      "setGLMR(address)": {
        "notice": "Sets the address of the ERC20 precompiled contract for GLMR"
      },
      "setTreasury(address)": {
        "notice": "Sets the address of the treasury account"
      },
      "start()": {
        "notice": "Ends previous auction and starts a new one."
      },
      "unpause()": {
        "notice": "Allows new auctions to be created"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/AuctionHouse.sol:AuctionHouse",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3017,
        "contract": "contracts/AuctionHouse.sol:AuctionHouse",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2916,
        "contract": "contracts/AuctionHouse.sol:AuctionHouse",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 10389,
        "contract": "contracts/AuctionHouse.sol:AuctionHouse",
        "label": "treasury",
        "offset": 1,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10395,
        "contract": "contracts/AuctionHouse.sol:AuctionHouse",
        "label": "glmr",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)3179"
      },
      {
        "astId": 10398,
        "contract": "contracts/AuctionHouse.sol:AuctionHouse",
        "label": "token",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ICrest)12038"
      },
      {
        "astId": 10401,
        "contract": "contracts/AuctionHouse.sol:AuctionHouse",
        "label": "duration",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 10404,
        "contract": "contracts/AuctionHouse.sol:AuctionHouse",
        "label": "extendedDuration",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 10407,
        "contract": "contracts/AuctionHouse.sol:AuctionHouse",
        "label": "minFirstBid",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 10410,
        "contract": "contracts/AuctionHouse.sol:AuctionHouse",
        "label": "minBidIncrementPercent",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 10412,
        "contract": "contracts/AuctionHouse.sol:AuctionHouse",
        "label": "startTime",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 10414,
        "contract": "contracts/AuctionHouse.sol:AuctionHouse",
        "label": "endTime",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 10416,
        "contract": "contracts/AuctionHouse.sol:AuctionHouse",
        "label": "currentBid",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 10418,
        "contract": "contracts/AuctionHouse.sol:AuctionHouse",
        "label": "tokenId",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 10420,
        "contract": "contracts/AuctionHouse.sol:AuctionHouse",
        "label": "bidder",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICrest)12038": {
        "encoding": "inplace",
        "label": "contract ICrest",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3179": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}