{
  "address": "0x319D3c22f2eB7F07f12C9ae1b30AB37fa5f00Ebf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "storeAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint96",
          "name": "dna",
          "type": "uint96"
        }
      ],
      "name": "generateTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "storeAddress",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "dna",
          "type": "uint96"
        }
      ],
      "name": "getImageParts",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "color",
                  "type": "string"
                }
              ],
              "internalType": "struct IPartsStore.Color",
              "name": "bgColor",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "color",
                  "type": "string"
                }
              ],
              "internalType": "struct IPartsStore.Color",
              "name": "nogglesColor",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "svg",
                  "type": "string"
                }
              ],
              "internalType": "struct IPartsStore.ImagePart",
              "name": "crown",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "svg",
                  "type": "string"
                }
              ],
              "internalType": "struct IPartsStore.ImagePart",
              "name": "doodads",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "svg",
                  "type": "string"
                }
              ],
              "internalType": "struct IPartsStore.ImagePart",
              "name": "garland",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "svg",
                  "type": "string"
                }
              ],
              "internalType": "struct IPartsStore.ImagePart",
              "name": "shield",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "primary",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "secondary",
                  "type": "string"
                }
              ],
              "internalType": "struct IPartsStore.Palette",
              "name": "quadrantPalette1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "primary",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "secondary",
                  "type": "string"
                }
              ],
              "internalType": "struct IPartsStore.Palette",
              "name": "quadrantPalette2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "svg",
                  "type": "string"
                }
              ],
              "internalType": "struct IPartsStore.ImagePart",
              "name": "rep",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "svg",
                  "type": "string"
                }
              ],
              "internalType": "struct IPartsStore.ImagePart",
              "name": "skill",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "svg",
                  "type": "string"
                }
              ],
              "internalType": "struct IPartsStore.ImagePart",
              "name": "class",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "svg",
                  "type": "string"
                }
              ],
              "internalType": "struct IPartsStore.ImagePart",
              "name": "trait",
              "type": "tuple"
            }
          ],
          "internalType": "struct TokenGenerator.ImageParts",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x30bcc52ef740f4e16e2f5a2d263663be330a7f4f70b352c86e192235e9e04723",
  "receipt": {
    "to": null,
    "from": "0x6bdFDC29A4bd39Bf97D4C75c7f03b9dcbb9374af",
    "contractAddress": "0x319D3c22f2eB7F07f12C9ae1b30AB37fa5f00Ebf",
    "transactionIndex": 4,
    "gasUsed": "2168536",
    "logsBloom": "0x
    "blockHash": "0x86edfeaf60f6dd966309f1d301512e31a68761efc134f5e1f97eecc7cdbec588",
    "transactionHash": "0x30bcc52ef740f4e16e2f5a2d263663be330a7f4f70b352c86e192235e9e04723",
    "logs": [],
    "blockNumber": 3270398,
    "cumulativeGasUsed": "3206841",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "84ca75526b28510547d3ce718e5855d8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"storeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"dna\",\"type\":\"uint96\"}],\"name\":\"generateTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"storeAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"dna\",\"type\":\"uint96\"}],\"name\":\"getImageParts\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.Color\",\"name\":\"bgColor\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.Color\",\"name\":\"nogglesColor\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"crown\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"doodads\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"garland\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"shield\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"primary\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"secondary\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.Palette\",\"name\":\"quadrantPalette1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"primary\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"secondary\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.Palette\",\"name\":\"quadrantPalette2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"rep\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"skill\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"class\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"internalType\":\"struct IPartsStore.ImagePart\",\"name\":\"trait\",\"type\":\"tuple\"}],\"internalType\":\"struct TokenGenerator.ImageParts\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"contact@polkadot-builders.xyz\",\"kind\":\"dev\",\"methods\":{\"generateTokenURI(address,uint256,uint96)\":{\"details\":\"Generates a token URI for an Polkadot Builders Crest NFT based on a provided DNA.\",\"params\":{\"dna\":\"The DNA of the NFT.\",\"storeAddress\":\"Address of the parts store.\",\"tokenId\":\"The ID of the NFT.\"},\"returns\":{\"_0\":\"The generated token URI as a string.\"}},\"getImageParts(address,uint96)\":{\"details\":\"Loads the parts to display in the SVG, for a given DNA\",\"params\":{\"dna\":\"The DNA of the NFT.\",\"storeAddress\":\"Address of the parts store.\"},\"returns\":{\"_0\":\"The the parts to display in the SVG.\"}}},\"title\":\"TokenGenerator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Library to generate token URIs for Polkadot Builder Crests NFTs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/TokenGenerator.sol\":\"TokenGenerator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/interfaces/IPartsStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\ninterface IPartsStore {\\n    struct Color {\\n        string name;\\n        string color;\\n    }\\n\\n    struct Palette {\\n        string name;\\n        string primary;\\n        string secondary;\\n    }\\n\\n    struct ImagePart {\\n        string name;\\n        string svg;\\n    }\\n\\n    struct AllParts {\\n        string[] bgColors;\\n        string[] nogglesColors;\\n        string[] crowns;\\n        string[] doodads;\\n        string[] garlands;\\n        string[] shields;\\n        string[] quadrantPalettes;\\n        string[] reps;\\n        string[] skills;\\n        string[] classes;\\n        string[] traits;\\n    }\\n\\n    function bgColorsCount() external view returns (uint256);\\n\\n    function nogglesColorsCount() external view returns (uint256);\\n\\n    function crownsCount() external view returns (uint256);\\n\\n    function doodadsCount() external view returns (uint256);\\n\\n    function garlandsCount() external view returns (uint256);\\n\\n    function shieldsCount() external view returns (uint256);\\n\\n    function quadrantPalettesCount() external view returns (uint256);\\n\\n    function repsCount() external view returns (uint256);\\n\\n    function skillsCount() external view returns (uint256);\\n\\n    function classesCount() external view returns (uint256);\\n\\n    function traitsCount() external view returns (uint256);\\n\\n    function getBgColor(uint8 id) external view returns (Color memory);\\n\\n    function getNogglesColor(uint8 id) external view returns (Color memory);\\n\\n    function getCrown(uint8 id) external view returns (ImagePart memory);\\n\\n    function getDoodad(uint8 id) external view returns (ImagePart memory);\\n\\n    function getGarland(uint8 id) external view returns (ImagePart memory);\\n\\n    function getShield(uint8 id) external view returns (ImagePart memory);\\n\\n    function getQuadrantPalette(uint8 id) external view returns (Palette memory);\\n\\n    function getRep(uint8 id) external view returns (ImagePart memory);\\n\\n    function getSkill(uint8 id) external view returns (ImagePart memory);\\n\\n    function getClass(uint8 id) external view returns (ImagePart memory);\\n\\n    function getTrait(uint8 id) external view returns (ImagePart memory);\\n\\n    function addBgColor(Color calldata color) external;\\n\\n    function addNogglesColor(Color calldata color) external;\\n\\n    function addCrown(ImagePart calldata part) external;\\n\\n    function addDoodad(ImagePart calldata part) external;\\n\\n    function addGarland(ImagePart calldata part) external;\\n\\n    function addShield(ImagePart calldata part) external;\\n\\n    function addQuadrantPalette(Palette calldata palette) external;\\n\\n    function addRep(ImagePart calldata part) external;\\n\\n    function addSkill(ImagePart calldata part) external;\\n\\n    function addClass(ImagePart calldata part) external;\\n\\n    function addTrait(ImagePart calldata part) external;\\n\\n    function getAllParts() external returns (AllParts memory);\\n}\\n\",\"keccak256\":\"0x2c4900a6007078e078250e3988a4970f43caf889a629c0200d093f32ac163409\",\"license\":\"MIT\"},\"contracts/lib/DnaManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IPartsStore} from \\\"../interfaces/IPartsStore.sol\\\";\\n\\n/**\\n * @title DnaManager\\n * @notice Library to generate and manipulate DNA of Polkadot Builder Crests NFTs.\\n */\\nlibrary DnaManager {\\n    struct DecomposedDna {\\n        uint8 bgColorId;\\n        uint8 nogglesColorId;\\n        uint8 crownId;\\n        uint8 doodadId;\\n        uint8 garlandId;\\n        uint8 shieldId;\\n        uint8 quadrantPalette1Id;\\n        uint8 quadrantPalette2Id;\\n        uint8 repId;\\n        uint8 skillId;\\n        uint8 classId;\\n        uint8 traitId;\\n    }\\n\\n    /**\\n     * @dev Generates a unique DNA for an NFT based on a provided seed.\\n     * @param storeAddress Address of the parts store.\\n     * @param seed The seed to generate the DNA.\\n     * @return The generated DNA as a uint96 value.\\n     */\\n    function generateDna(address storeAddress, uint256 seed) public view returns (uint96) {\\n        IPartsStore store = IPartsStore(storeAddress);\\n\\n        require(store.bgColorsCount() > 0, \\\"No bg colors\\\");\\n        require(store.nogglesColorsCount() > 0, \\\"No noggles colors\\\");\\n        require(store.crownsCount() > 0, \\\"No crowns\\\");\\n        require(store.doodadsCount() > 0, \\\"No doodads\\\");\\n        require(store.garlandsCount() > 0, \\\"No garlands\\\");\\n        require(store.shieldsCount() > 0, \\\"No shields\\\");\\n        require(store.quadrantPalettesCount() > 0, \\\"No logo palettes\\\");\\n        require(store.repsCount() > 0, \\\"No reps\\\");\\n        require(store.skillsCount() > 0, \\\"No skills\\\");\\n        require(store.classesCount() > 0, \\\"No classes\\\");\\n        require(store.traitsCount() > 0, \\\"No traits\\\");\\n\\n        // not truely random but it won't matter, we want a unique dna based on any number, usually a timestamp\\n        uint rand = uint(keccak256(abi.encodePacked(seed)));\\n\\n        return reduceDna(storeAddress, uint96(rand));\\n    }\\n\\n    /**\\n     * @dev Reduces the given DNA to its corresponding traits.\\n     * @param storeAddress Address of the parts store.\\n     * @param dna The DNA to reduce.\\n     * @return The reduced DNA as a uint96 value.\\n     */\\n    function reduceDna(address storeAddress, uint96 dna) private view returns (uint96) {\\n        IPartsStore store = IPartsStore(storeAddress);\\n\\n        DecomposedDna memory image = DecomposedDna({\\n            bgColorId: uint8(dna % store.bgColorsCount()),\\n            nogglesColorId: uint8((dna >> 8) % store.nogglesColorsCount()),\\n            crownId: uint8((dna >> 16) % store.crownsCount()),\\n            doodadId: uint8((dna >> 24) % store.doodadsCount()),\\n            garlandId: uint8((dna >> 32) % store.garlandsCount()),\\n            shieldId: uint8((dna >> 40) % store.shieldsCount()),\\n            quadrantPalette1Id: uint8((dna >> 48) % store.quadrantPalettesCount()),\\n            quadrantPalette2Id: uint8((dna >> 56) % store.quadrantPalettesCount()),\\n            repId: uint8((dna >> 64) % store.repsCount()),\\n            skillId: uint8((dna >> 72) % store.skillsCount()),\\n            classId: uint8((dna >> 80) % store.classesCount()),\\n            traitId: uint8((dna >> 88) % store.traitsCount())\\n        });\\n\\n        return composeDna(image);\\n    }\\n\\n    /**\\n     * @dev Gets the traits of a given DNA.\\n     * @param dna The DNA to get the traits from.\\n     * @return The traits of the DNA.\\n     */\\n    function decomposeDna(uint96 dna) public pure returns (DecomposedDna memory) {\\n        return\\n            DecomposedDna({\\n                bgColorId: uint8(dna),\\n                nogglesColorId: uint8((dna >> 8)),\\n                crownId: uint8((dna >> 16)),\\n                doodadId: uint8((dna >> 24)),\\n                garlandId: uint8((dna >> 32)),\\n                shieldId: uint8((dna >> 40)),\\n                quadrantPalette1Id: uint8((dna >> 48)),\\n                quadrantPalette2Id: uint8((dna >> 56)),\\n                repId: uint8((dna >> 64)),\\n                skillId: uint8((dna >> 72)),\\n                classId: uint8((dna >> 80)),\\n                traitId: uint8((dna >> 88))\\n            });\\n    }\\n\\n    /**\\n     * @dev Gets the DNA of a given traits.\\n     * @param decomposedDna The traits to get the DNA from.\\n     * @return The DNA of the traits.\\n     */\\n    function composeDna(DecomposedDna memory decomposedDna) public pure returns (uint96) {\\n        return\\n            uint96(decomposedDna.bgColorId) |\\n            (uint96(decomposedDna.nogglesColorId) << 8) |\\n            (uint96(decomposedDna.crownId) << 16) |\\n            (uint96(decomposedDna.doodadId) << 24) |\\n            (uint96(decomposedDna.garlandId) << 32) |\\n            (uint96(decomposedDna.shieldId) << 40) |\\n            (uint96(decomposedDna.quadrantPalette1Id) << 48) |\\n            (uint96(decomposedDna.quadrantPalette2Id) << 56) |\\n            (uint96(decomposedDna.repId) << 64) |\\n            (uint96(decomposedDna.skillId) << 72) |\\n            (uint96(decomposedDna.classId) << 80) |\\n            (uint96(decomposedDna.traitId) << 88);\\n    }\\n}\\n\",\"keccak256\":\"0xcd59a2e52db31e05e2e5dd9caa6ab65bb29f303c328b56c38ac299f9287f8ec5\",\"license\":\"MIT\"},\"contracts/lib/TokenGenerator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../interfaces/IPartsStore.sol\\\";\\nimport {Base64} from \\\"base64-sol/base64.sol\\\";\\nimport {DnaManager} from \\\"./DnaManager.sol\\\";\\n\\n/**\\n * @title TokenGenerator\\n * @notice Library to generate token URIs for Polkadot Builder Crests NFTs.\\n * @custom:security-contact contact@polkadot-builders.xyz\\n */\\nlibrary TokenGenerator {\\n    struct ImageParts {\\n        IPartsStore.Color bgColor;\\n        IPartsStore.Color nogglesColor;\\n        IPartsStore.ImagePart crown;\\n        IPartsStore.ImagePart doodads;\\n        IPartsStore.ImagePart garland;\\n        IPartsStore.ImagePart shield;\\n        IPartsStore.Palette quadrantPalette1;\\n        IPartsStore.Palette quadrantPalette2;\\n        IPartsStore.ImagePart rep;\\n        IPartsStore.ImagePart skill;\\n        IPartsStore.ImagePart class;\\n        IPartsStore.ImagePart trait;\\n    }\\n\\n    /**\\n     * @dev Loads the parts to display in the SVG, for a given DNA\\n     * @param storeAddress Address of the parts store.\\n     * @param dna The DNA of the NFT.\\n     * @return The the parts to display in the SVG.\\n     */\\n    function getImageParts(\\n        address storeAddress,\\n        uint96 dna\\n    ) public view returns (ImageParts memory) {\\n        IPartsStore store = IPartsStore(storeAddress);\\n        DnaManager.DecomposedDna memory decomposedDna = DnaManager.decomposeDna(dna);\\n\\n        return\\n            ImageParts({\\n                bgColor: store.getBgColor(decomposedDna.bgColorId),\\n                nogglesColor: store.getNogglesColor(decomposedDna.nogglesColorId),\\n                crown: store.getCrown(decomposedDna.crownId),\\n                doodads: store.getDoodad(decomposedDna.doodadId),\\n                garland: store.getGarland(decomposedDna.garlandId),\\n                shield: store.getShield(decomposedDna.shieldId),\\n                quadrantPalette1: store.getQuadrantPalette(decomposedDna.quadrantPalette1Id),\\n                quadrantPalette2: store.getQuadrantPalette(decomposedDna.quadrantPalette2Id),\\n                rep: store.getRep(decomposedDna.repId),\\n                skill: store.getSkill(decomposedDna.skillId),\\n                class: store.getClass(decomposedDna.classId),\\n                trait: store.getTrait(decomposedDna.traitId)\\n            });\\n    }\\n\\n    /**\\n     * @dev Generates a token URI for an Polkadot Builders Crest NFT based on a provided DNA.\\n     * @param storeAddress Address of the parts store.\\n     * @param tokenId The ID of the NFT.\\n     * @param dna The DNA of the NFT.\\n     * @return The generated token URI as a string.\\n     */\\n    function generateTokenURI(\\n        address storeAddress,\\n        uint256 tokenId,\\n        uint96 dna\\n    ) public view returns (string memory) {\\n        ImageParts memory parts = getImageParts(storeAddress, dna);\\n\\n        // @dev splitting to prevent \\\"stack to deep\\\" error, need to process 16 variables maximum at a time\\n\\n        // prettier-ignore\\n        string memory attributes = string.concat(\\n            ', \\\"attributes\\\": [',\\n            '{\\\"trait_type\\\": \\\"Background\\\",\\\"value\\\":\\\"', parts.bgColor.name, '\\\"},',\\n            '{\\\"trait_type\\\": \\\"Noggles\\\",\\\"value\\\":\\\"', parts.nogglesColor.name, '\\\"},',\\n            '{\\\"trait_type\\\": \\\"Crown\\\",\\\"value\\\":\\\"', parts.crown.name, '\\\"},',\\n            '{\\\"trait_type\\\": \\\"Doodads\\\",\\\"value\\\":\\\"', parts.doodads.name, '\\\"},'\\n        );\\n\\n        // prettier-ignore\\n        string memory quadrantPalettes = string.concat(\\n            '{\\\"trait_type\\\": \\\"Quadrant Palette 1\\\",\\\"value\\\":\\\"', parts.quadrantPalette1.name, '\\\"},',\\n            '{\\\"trait_type\\\": \\\"Quadrant Palette 2\\\",\\\"value\\\":\\\"', parts.quadrantPalette2.name, '\\\"},'\\n        );\\n\\n        // prettier-ignore\\n        string memory logos = string.concat(\\n            '{\\\"trait_type\\\": \\\"Rep\\\",\\\"value\\\":\\\"', parts.rep.name, '\\\"},',\\n            '{\\\"trait_type\\\": \\\"Skill\\\",\\\"value\\\":\\\"', parts.skill.name, '\\\"},',\\n            '{\\\"trait_type\\\": \\\"Class\\\",\\\"value\\\":\\\"', parts.class.name, '\\\"},',\\n            '{\\\"trait_type\\\": \\\"Trait\\\",\\\"value\\\":\\\"', parts.trait.name, '\\\"}]}'\\n        );\\n\\n        // prettier-ignore\\n        return  string.concat(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            string.concat(\\n                                '{\\\"name\\\":\\\"Polkadot Builder Crest #', Strings.toString(tokenId), '\\\", ', \\n                                '\\\"description\\\":\\\"Official mark of a genuine Polkadot Builder.\\\", ',\\n                                '\\\"image\\\": \\\"', getSvgDataUri(parts) , '\\\"',\\n                                attributes,\\n                                quadrantPalettes,\\n                                logos\\n                            )\\n                        )\\n                    )\\n                );\\n    }\\n\\n    /**\\n     * @dev Generates the SVG data URI for an Polkadot Builders Crest NFT based on a provided DNA.\\n     * @param parts The parts to embed into the NFT.\\n     * @return The generated SVG data URI as a string.\\n     */\\n    function getSvgDataUri(ImageParts memory parts) private pure returns (string memory) {\\n        // prettier-ignore\\n        string memory logos = string.concat(\\n            // quadrants top left and bottom right\\n            '<g fill=\\\"', parts.quadrantPalette1.secondary, '\\\"><path d=\\\"M128.353 137.01V248.778H247.604V102.688L128.353 137.01Z\\\" /><path d=\\\"M257.17 258.355V405.343L258.325 404.86C263.116 402.858 375.594 354.852 375.594 271.798V258.373H257.17V258.355Z\\\" /></g>',\\n            '<g fill=\\\"', parts.quadrantPalette1.primary, '\\\">', parts.rep.svg, parts.trait.svg, \\\"</g>\\\",\\n            // quadrants bottom left and top right\\n            '<g fill=\\\"', parts.quadrantPalette2.secondary, '\\\"><path d=\\\"M128.353 258.355V271.781C128.353 354.748 240.848 402.841 245.64 404.86L247.604 405.688V258.355H128.353Z\\\" /><path d=\\\"M375.611 137.01L257.17 102.912V248.778H375.611V137.01Z\\\" /></g>',\\n            '<g fill=\\\"', parts.quadrantPalette2.primary, '\\\">', parts.skill.svg, parts.class.svg, \\\"</g>\\\"\\n        );\\n\\n        // prettier-ignore\\n        string memory noggles = string.concat(\\n            '<path d=\\\"M284.867 88.6242H265.995V126.398H284.867V88.6242Z\\\" fill=\\\"white\\\"/><path d=\\\"M303.74 88.6242H284.867V127.485H303.74V88.6242Z\\\" fill=\\\"#231F20\\\"/><path d=\\\"M219.787 89.2109H201.224V126.381H219.787V89.2109Z\\\" fill=\\\"white\\\"/><path d=\\\"M239.556 88.3826H219.804V128.503H239.556V88.3826Z\\\" fill=\\\"#231F20\\\"/>',\\n            '<path fill=\\\"', parts.nogglesColor.color, '\\\" d=\\\"M257.032 79.8753V98.5637H247.725V79.8753H192.003V98.5637H154.775V129.418L163.91 126.795V107.709H192.003V135.664H247.725V107.709H257.032V135.664H312.754V79.8753H257.032ZM238.366 126.398H201.241V89.2282H238.366V126.398ZM303.395 126.398H266.27V89.2282H303.395V126.398Z\\\"/>'\\n        );\\n\\n        // prettier-ignore\\n        return string.concat(\\n                    \\\"data:image/svg+xml;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            string.concat(\\n                                '<svg width=\\\"500\\\" height=\\\"500\\\" viewBox=\\\"0 0 500 500\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">',\\n                                //background\\n                                '<path d=\\\"M500 0H0V500H500\\\" fill=\\\"', parts.bgColor.color, '\\\" />',\\n                                parts.crown.svg,\\n                                parts.shield.svg,\\n                                logos,\\n                                parts.garland.svg,\\n                                parts.doodads.svg,\\n                                noggles,\\n                                '</svg>'\\n                            )\\n                        )\\n                    )\\n                );\\n    }\\n}\\n\",\"keccak256\":\"0x63e3d5e9e62d5b2b2ba31fffec8b3f78039a521439fff33ad6eafeeb28b00b5a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80633775569714610045578063c9bd208e1461006e575b600080fd5b610058610053366004611091565b61008e565b6040516100659190611193565b60405180910390f35b61008161007c366004611303565b6108ee565b604051610065919061133f565b610096610ea2565b6040517fadc4a3a80000000000000000000000000000000000000000000000000000000081526bffffffffffffffffffffffff83166004820152839060009073__$edc2690de7d32395d8b4c2b49ad9aafb7e$__9063adc4a3a89060240161018060405180830381865af4158015610112573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013691906113e6565b6040805161018081019182905282517f15c507db0000000000000000000000000000000000000000000000000000000090925260ff9091166101848201529091508073ffffffffffffffffffffffffffffffffffffffff84166315c507db6101a48301600060405180830381865afa1580156101b6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101de91908101906115da565b81526020838101516040517f2c0d2de600000000000000000000000000000000000000000000000000000000815260ff909116600482015291019073ffffffffffffffffffffffffffffffffffffffff851690632c0d2de690602401600060405180830381865afa158015610257573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261027f91908101906115da565b815260408084015190517f6f25dcd500000000000000000000000000000000000000000000000000000000815260ff909116600482015260209091019073ffffffffffffffffffffffffffffffffffffffff851690636f25dcd590602401600060405180830381865afa1580156102fa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261032291908101906115da565b815260608301516040517f5e39eee000000000000000000000000000000000000000000000000000000000815260ff909116600482015260209091019073ffffffffffffffffffffffffffffffffffffffff851690635e39eee090602401600060405180830381865afa15801561039d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103c591908101906115da565b815260808301516040517fd8a4234d00000000000000000000000000000000000000000000000000000000815260ff909116600482015260209091019073ffffffffffffffffffffffffffffffffffffffff85169063d8a4234d90602401600060405180830381865afa158015610440573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261046891908101906115da565b815260a08301516040517fe3ec8b9800000000000000000000000000000000000000000000000000000000815260ff909116600482015260209091019073ffffffffffffffffffffffffffffffffffffffff85169063e3ec8b9890602401600060405180830381865afa1580156104e3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261050b91908101906115da565b815260c08301516040517f077e69cc00000000000000000000000000000000000000000000000000000000815260ff909116600482015260209091019073ffffffffffffffffffffffffffffffffffffffff85169063077e69cc90602401600060405180830381865afa158015610586573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105ae9190810190611617565b815260e08301516040517f077e69cc00000000000000000000000000000000000000000000000000000000815260ff909116600482015260209091019073ffffffffffffffffffffffffffffffffffffffff85169063077e69cc90602401600060405180830381865afa158015610629573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106519190810190611617565b81526101008301516040517f87dddae500000000000000000000000000000000000000000000000000000000815260ff909116600482015260209091019073ffffffffffffffffffffffffffffffffffffffff8516906387dddae590602401600060405180830381865afa1580156106cd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106f591908101906115da565b81526101208301516040517fe465b05500000000000000000000000000000000000000000000000000000000815260ff909116600482015260209091019073ffffffffffffffffffffffffffffffffffffffff85169063e465b05590602401600060405180830381865afa158015610771573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261079991908101906115da565b81526101408301516040517f8bb5ad9600000000000000000000000000000000000000000000000000000000815260ff909116600482015260209091019073ffffffffffffffffffffffffffffffffffffffff851690638bb5ad9690602401600060405180830381865afa158015610815573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261083d91908101906115da565b81526101608301516040517ff87b5d6a00000000000000000000000000000000000000000000000000000000815260ff909116600482015260209091019073ffffffffffffffffffffffffffffffffffffffff85169063f87b5d6a90602401600060405180830381865afa1580156108b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108e191908101906115da565b9052925050505b92915050565b606060006108fc858461008e565b805151602080830151516040808501515160608601515191519596506000956109299594919291016116e8565b60408051601f198184030181529082905260c08401515160e0850151519193506000926109599290602001611905565b60408051601f19818403018152908290526101008501515161012086015151610140870151516101608801515193955060009461099994906020016119e6565b60405160208183030381529060405290506109ea6109b688610a16565b6109bf86610ad4565b8585856040516020016109d6959493929190611b32565b604051602081830303815290604052610be8565b6040516020016109fa9190611caf565b6040516020818303038152906040529450505050509392505050565b60606000610a2383610dc0565b600101905060008167ffffffffffffffff811115610a4357610a43611359565b6040519080825280601f01601f191660200182016040528015610a6d576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084610a7757509392505050565b606060008260c00151604001518360c001516020015184610100015160200151856101600151602001518660e00151604001518760e00151602001518861012001516020015189610140015160200151604051602001610b3b989796959493929190611cf4565b60405160208183030381529060405290506000836020015160200151604051602001610b67919061208c565b6040516020818303038152906040529050610bc08460000151602001518560400151602001518660a001516020015185886080015160200151896060015160200151876040516020016109d6979695949392919061239c565b604051602001610bd0919061253e565b60405160208183030381529060405292505050919050565b60608151600003610c0757505060408051602081019091526000815290565b60006040518060600160405280604081526020016126186040913990506000600384516002610c3691906125b2565b610c4091906125c5565b610c4b906004612600565b90506000610c5a8260206125b2565b67ffffffffffffffff811115610c7257610c72611359565b6040519080825280601f01601f191660200182016040528015610c9c576020820181803683370190505b509050818152600183018586518101602084015b81831015610d08576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825350600101610cb0565b600389510660018114610d225760028114610d6c57610db2565b7f3d3d0000000000000000000000000000000000000000000000000000000000007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe830152610db2565b7f3d000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8301525b509398975050505050505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610e09577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610e35576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610e5357662386f26fc10000830492506010015b6305f5e1008310610e6b576305f5e100830492506008015b6127108310610e7f57612710830492506004015b60648310610e91576064830492506002015b600a83106108e85760010192915050565b604080516101c08101909152606061018082018181526101a083019190915281908152602001610ee5604051806040016040528060608152602001606081525090565b8152602001610f07604051806040016040528060608152602001606081525090565b8152602001610f29604051806040016040528060608152602001606081525090565b8152602001610f4b604051806040016040528060608152602001606081525090565b8152602001610f6d604051806040016040528060608152602001606081525090565b8152602001610f9660405180606001604052806060815260200160608152602001606081525090565b8152602001610fbf60405180606001604052806060815260200160608152602001606081525090565b8152602001610fe1604051806040016040528060608152602001606081525090565b8152602001611003604051806040016040528060608152602001606081525090565b8152602001611025604051806040016040528060608152602001606081525090565b8152602001611047604051806040016040528060608152602001606081525090565b905290565b803573ffffffffffffffffffffffffffffffffffffffff8116811461107057600080fd5b919050565b80356bffffffffffffffffffffffff8116811461107057600080fd5b600080604083850312156110a457600080fd5b6110ad8361104c565b91506110bb60208401611075565b90509250929050565b60005b838110156110df5781810151838201526020016110c7565b50506000910152565b600081518084526111008160208601602086016110c4565b601f01601f19169290920160200192915050565b600081516040845261112960408501826110e8565b90506020830151848203602086015261114282826110e8565b95945050505050565b600081516060845261116060608501826110e8565b90506020830151848203602086015261117982826110e8565b9150506040830151848203604086015261114282826110e8565b60208152600082516101808060208501526111b26101a0850183611114565b91506020850151601f19808685030160408701526111d08483611114565b935060408701519150808685030160608701526111ed8483611114565b9350606087015191508086850301608087015261120a8483611114565b935060808701519150808685030160a08701526112278483611114565b935060a08701519150808685030160c08701526112448483611114565b935060c08701519150808685030160e0870152611261848361114b565b935060e08701519150610100818786030181880152611280858461114b565b94508088015192505061012081878603018188015261129f8584611114565b9450808801519250506101408187860301818801526112be8584611114565b9450808801519250506101608187860301818801526112dd8584611114565b9088015187820390920184880152935090506112f98382611114565b9695505050505050565b60008060006060848603121561131857600080fd5b6113218461104c565b92506020840135915061133660408501611075565b90509250925092565b60208152600061135260208301846110e8565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610180810167ffffffffffffffff811182821017156113ac576113ac611359565b60405290565b6040516060810167ffffffffffffffff811182821017156113ac576113ac611359565b805160ff8116811461107057600080fd5b600061018082840312156113f957600080fd5b611401611388565b61140a836113d5565b8152611418602084016113d5565b6020820152611429604084016113d5565b604082015261143a606084016113d5565b606082015261144b608084016113d5565b608082015261145c60a084016113d5565b60a082015261146d60c084016113d5565b60c082015261147e60e084016113d5565b60e08201526101006114918185016113d5565b908201526101206114a38482016113d5565b908201526101406114b58482016113d5565b908201526101606114c78482016113d5565b908201529392505050565b600082601f8301126114e357600080fd5b815167ffffffffffffffff808211156114fe576114fe611359565b604051601f8301601f19908116603f0116810190828211818310171561152657611526611359565b8160405283815286602085880101111561153f57600080fd5b6112f98460208301602089016110c4565b60006040828403121561156257600080fd5b6040516040810167ffffffffffffffff828210818311171561158657611586611359565b81604052829350845191508082111561159e57600080fd5b6115aa868387016114d2565b835260208501519150808211156115c057600080fd5b506115cd858286016114d2565b6020830152505092915050565b6000602082840312156115ec57600080fd5b815167ffffffffffffffff81111561160357600080fd5b61160f84828501611550565b949350505050565b60006020828403121561162957600080fd5b815167ffffffffffffffff8082111561164157600080fd5b908301906060828603121561165557600080fd5b61165d6113b2565b82518281111561166c57600080fd5b611678878286016114d2565b82525060208301518281111561168d57600080fd5b611699878286016114d2565b6020830152506040830151828111156116b157600080fd5b6116bd878286016114d2565b60408301525095945050505050565b600081516116de8185602086016110c4565b9290920192915050565b7f2c202261747472696275746573223a205b00000000000000000000000000000081527f7b2274726169745f74797065223a20224261636b67726f756e64222c2276616c60118201527f7565223a2200000000000000000000000000000000000000000000000000000060318201526000855161176c816036850160208a016110c4565b7f227d2c00000000000000000000000000000000000000000000000000000000006036918401918201527f7b2274726169745f74797065223a20224e6f67676c6573222c2276616c75652260398201527f3a22000000000000000000000000000000000000000000000000000000000000605982015285516117f581605b840160208a016110c4565b01611822605b82017f227d2c00000000000000000000000000000000000000000000000000000000009052565b7f7b2274726169745f74797065223a202243726f776e222c2276616c7565223a22605e820152611855607e8201866116cc565b7f227d2c0000000000000000000000000000000000000000000000000000000000815290507f7b2274726169745f74797065223a2022446f6f64616473222c2276616c75652260038201527f3a2200000000000000000000000000000000000000000000000000000000000060238201526118d4602582015b856116cc565b7f227d2c00000000000000000000000000000000000000000000000000000000008152600301979650505050505050565b60007f7b2274726169745f74797065223a20225175616472616e742050616c657474658083527f2031222c2276616c7565223a22000000000000000000000000000000000000006020840152845161196481602d8601602089016110c4565b80840190507f227d2c000000000000000000000000000000000000000000000000000000000080602d8301528260308301527f2032222c2276616c7565223a22000000000000000000000000000000000000006050830152855192506119d183605d8401602089016110c4565b9101605d810191909152606001949350505050565b7f7b2274726169745f74797065223a2022526570222c2276616c7565223a220000815260008551611a1e81601e850160208a016110c4565b80830190507f227d2c000000000000000000000000000000000000000000000000000000000080601e8301527f7b2274726169745f74797065223a2022536b696c6c222c2276616c7565223a2260218301528651611a83816041850160208b016110c4565b604192019182018190527f7b2274726169745f74797065223a2022436c617373222c2276616c7565223a2260448301528551611ac6816064850160208a016110c4565b60649201918201527f7b2274726169745f74797065223a20225472616974222c2276616c7565223a226067820152611b0160878201856116cc565b7f227d5d7d000000000000000000000000000000000000000000000000000000008152600401979650505050505050565b7f7b226e616d65223a22506f6c6b61646f74204275696c6465722043726573742081527f2300000000000000000000000000000000000000000000000000000000000000602082015260008651611b90816021850160208b016110c4565b7f222c2000000000000000000000000000000000000000000000000000000000006021918401918201527f226465736372697074696f6e223a224f6666696369616c206d61726b206f662060248201527f612067656e75696e6520506f6c6b61646f74204275696c6465722e222c20000060448201527f22696d616765223a20220000000000000000000000000000000000000000000060628201528651611c3f81606c840160208b016110c4565b7f2200000000000000000000000000000000000000000000000000000000000000606c92909101918201528551611c7d81606d840160208a016110c4565b8551910190611c9381606d8401602089016110c4565b611ca2606d82840101866116cc565b9998505050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251611ce781601d8501602087016110c4565b91909101601d0192915050565b7f3c672066696c6c3d220000000000000000000000000000000000000000000000815260008951611d2c816009850160208e016110c4565b7f223e3c7061746820643d224d3132382e333533203133372e3031563234382e376009918401918201527f3738483234372e363034563130322e3638384c3132382e333533203133372e3060298201527f315a22202f3e3c7061746820643d224d3235372e3137203235382e333535563460498201527f30352e3334334c3235382e333235203430342e3836433236332e31313620343060698201527f322e383538203337352e353934203335342e383532203337352e35393420323760898201527f312e373938563235382e333733483235372e3137563235382e3335355a22202f60a98201527f3e3c2f673e00000000000000000000000000000000000000000000000000000060c9820152611e6660ce82017f3c672066696c6c3d2200000000000000000000000000000000000000000000009052565b611e7360d782018b6116cc565b7f223e00000000000000000000000000000000000000000000000000000000000081529050611eae611ea8600283018b6116cc565b896116cc565b7f3c2f673e00000000000000000000000000000000000000000000000000000000815290507f3c672066696c6c3d2200000000000000000000000000000000000000000000006004820152611ff0611f09600d8301896116cc565b7f223e3c7061746820643d224d3132382e333533203235382e333535563237312e81527f373831433132382e333533203335342e373438203234302e383438203430322e60208201527f383431203234352e3634203430342e38364c3234372e363034203430352e363860408201527f38563235382e333535483132382e3335335a22202f3e3c7061746820643d224d60608201527f3337352e363131203133372e30314c3235372e3137203130322e39313256323460808201527f382e373738483337352e363131563133372e30315a22202f3e3c2f673e00000060a082015260bd0190565b7f3c672066696c6c3d2200000000000000000000000000000000000000000000008152905061202260098201876116cc565b7f223e000000000000000000000000000000000000000000000000000000000000815290506120576118ce60028301876116cc565b7f3c2f673e0000000000000000000000000000000000000000000000000000000081526004019b9a5050505050505050505050565b7f3c7061746820643d224d3238342e3836372038382e36323432483236352e393981527f35563132362e333938483238342e3836375638382e363234325a222066696c6c60208201527f3d227768697465222f3e3c7061746820643d224d3330332e37342038382e363260408201527f3432483238342e383637563132372e343835483330332e37345638382e36323460608201527f325a222066696c6c3d2223323331463230222f3e3c7061746820643d224d323160808201527f392e3738372038392e32313039483230312e323234563132362e33383148323160a08201527f392e3738375638392e323130395a222066696c6c3d227768697465222f3e3c7060c08201527f61746820643d224d3233392e3535362038382e33383236483231392e3830345660e08201527f3132382e353033483233392e3535365638382e333832365a222066696c6c3d226101008201527f23323331463230222f3e000000000000000000000000000000000000000000006101208201527f3c706174682066696c6c3d22000000000000000000000000000000000000000061012a82015260006113526122416101368401856116cc565b7f2220643d224d3235372e3033322037392e383735335639382e3536333748323481527f372e3732355637392e38373533483139322e3030335639382e3536333748313560208201527f342e373735563132392e3431384c3136332e3931203132362e3739355631303760408201527f2e373039483139322e303033563133352e363634483234372e3732355631303760608201527f2e373039483235372e303332563133352e363634483331322e3735345637392e60808201527f38373533483235372e3033325a4d3233382e333636203132362e33393848323060a08201527f312e3234315638392e32323832483233382e333636563132362e3339385a4d3360c08201527f30332e333935203132362e333938483236362e32375638392e3232383248333060e08201527f332e333935563132362e3339385a222f3e0000000000000000000000000000006101008201526101110190565b7f3c7376672077696474683d2235303022206865696768743d223530302220766981527f6577426f783d223020302035303020353030222066696c6c3d226e6f6e65222060208201527f786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737660408201527f67223e000000000000000000000000000000000000000000000000000000000060608201527f3c7061746820643d224d353030203048305635303048353030222066696c6c3d60638201527f2200000000000000000000000000000000000000000000000000000000000000608382015260008851612492816084850160208d016110c4565b7f22202f3e0000000000000000000000000000000000000000000000000000000060849184019182015288516124cf816088840160208d016110c4565b6125026124fc6124f66124f06124ea6088868801018e6116cc565b8c6116cc565b8a6116cc565b886116cc565b866116cc565b91505061252e817f3c2f7376673e00000000000000000000000000000000000000000000000000009052565b6006019998505050505050505050565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081526000825161257681601a8501602087016110c4565b91909101601a0192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156108e8576108e8612583565b6000826125fb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b80820281158282048414176108e8576108e861258356fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122032545977f8fe32a07639bc1a1561cc3aaf1c28b687e886a8a3b14ae80539bd6164736f6c63430008110033",
  "libraries": {
    "DnaManager": "0xD9A1161E19E4B0811E77EDEAe7141b0f66E62280"
  },
  "devdoc": {
    "custom:security-contact": "contact@polkadot-builders.xyz",
    "kind": "dev",
    "methods": {
      "generateTokenURI(address,uint256,uint96)": {
        "details": "Generates a token URI for an Polkadot Builders Crest NFT based on a provided DNA.",
        "params": {
          "dna": "The DNA of the NFT.",
          "storeAddress": "Address of the parts store.",
          "tokenId": "The ID of the NFT."
        },
        "returns": {
          "_0": "The generated token URI as a string."
        }
      },
      "getImageParts(address,uint96)": {
        "details": "Loads the parts to display in the SVG, for a given DNA",
        "params": {
          "dna": "The DNA of the NFT.",
          "storeAddress": "Address of the parts store."
        },
        "returns": {
          "_0": "The the parts to display in the SVG."
        }
      }
    },
    "title": "TokenGenerator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Library to generate token URIs for Polkadot Builder Crests NFTs.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}